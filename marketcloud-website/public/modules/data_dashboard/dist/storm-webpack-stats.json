{
  "errors": [],
  "warnings": [
    "app.bundle.js from UglifyJs\nSide effects in initialization of unused variable modules [./public/modules/data_dashboard/main.js:10,4]\nDropping unused variable removeImage [./public/modules/data_dashboard/src/components/imageSelector/imageSelector.component.js:181,6]\nSide effects in initialization of unused variable current_app_id [./public/modules/data_dashboard/src/components/sidebar/sidebar.component.js:55,10]\nDropping unused variable ctrl [./public/modules/data_dashboard/src/components/sortingSelector/sortingSelector.component.js:9,8]\nDropping unused variable validateCard [./public/modules/data_dashboard/src/controllers/application/billing.controller.js:53,8]\nDropping unused function getNextMonth [./public/modules/data_dashboard/src/controllers/application/overview.controller.js:25,13]\nDropping unused variable getResourceNameFromPath [./public/modules/data_dashboard/src/controllers/home.js:14,8]\nDropping unused variable formatted [./public/modules/data_dashboard/src/controllers/media.list.js:25,10]\nDropping unused function noop [./public/modules/data_dashboard/src/controllers/products/products.list.js:522,15]\nDropping unused function noop2 [./public/modules/data_dashboard/src/controllers/products/products.list.js:524,15]\nDropping unused variable variantNames [./public/modules/data_dashboard/src/controllers/products/products.list.js:309,14]\nDropping unused variable invalidItemIndex [./public/modules/data_dashboard/src/controllers/products/products.list.js:441,10]\nDropping unused function transformVariantObject [./public/modules/data_dashboard/src/controllers/products/productsWithVariants.new.js:298,15]\nDropping unused function getArrayOfVariants [./public/modules/data_dashboard/src/controllers/products/productsWithVariants.new.js:311,15]\nSide effects in initialization of unused variable element [./public/modules/data_dashboard/src/controllers/products/simpleProduct.edit.js:193,16]\nDropping unused variable controller [./public/modules/data_dashboard/src/controllers/shippingMethods/shipping.edit.js:2,4]\nSide effects in initialization of unused variable current_app_id [./public/modules/data_dashboard/src/controllers/sidebar.js:28,10]\nDropping unused variable props_to_translate [./public/modules/data_dashboard/src/controllers/translations.js:64,6]\nDropping unused variable _upperCase [./public/modules/data_dashboard/src/directives/avatar.directive.js:57,20]\nDropping unused function getAllTrueProfile [./public/modules/data_dashboard/src/factories/rolesPresets.factory.js:14,13]\nDropping unused function attachTableManagerFunctions [./public/modules/data_dashboard/src/factories/tableManager.factory.js:21,13]\nDropping unreachable code [./public/modules/data_dashboard/src/factories/validation.service.js:78,8]\nDropping unreachable code [./public/modules/data_dashboard/src/factories/validation.service.js:82,8]"
  ],
  "version": "1.15.0",
  "hash": "9cb183d52814c882c8a6",
  "publicPath": "",
  "assetsByChunkName": {
    "main": [
      "app.bundle.js",
      "app.bundle.map"
    ]
  },
  "assets": [
    {
      "name": "app.bundle.js",
      "size": 359762,
      "chunks": [
        0
      ],
      "chunkNames": [
        "main"
      ]
    },
    {
      "name": "app.bundle.map",
      "size": 1560169,
      "chunks": [
        0
      ],
      "chunkNames": [
        "main"
      ]
    }
  ],
  "chunks": [
    {
      "id": 0,
      "rendered": true,
      "initial": true,
      "entry": true,
      "extraAsync": false,
      "size": 533441,
      "names": [
        "main"
      ],
      "files": [
        "app.bundle.js",
        "app.bundle.map"
      ],
      "hash": "ca1827312bcb1020567b",
      "parents": [],
      "origins": [
        {
          "moduleId": 0,
          "module": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\main.js",
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\main.js",
          "moduleName": "./public/modules/data_dashboard/main.js",
          "loc": "",
          "name": "main",
          "reasons": []
        }
      ]
    }
  ],
  "modules": [
    {
      "id": 0,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\main.js",
      "name": "./public/modules/data_dashboard/main.js",
      "index": 0,
      "index2": 137,
      "size": 315,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": null,
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [],
      "source": "\"use strict\";\n\n//require('./src/app.js');\n\nfunction requireAll(requireContext) {\n  return requireContext.keys().map(requireContext);\n}\n\n// Require all JS files, including subdirectories\n// This will require every controller/factory/service/component\nvar modules = requireAll(require.context(\"./src\", true, /\\.js/));"
    },
    {
      "id": 1,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "name": "./public/modules/data_dashboard/src \\.js",
      "index": 1,
      "index2": 136,
      "size": 6563,
      "cacheable": true,
      "built": true,
      "optional": false,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\main.js",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 0,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\main.js",
          "module": "./public/modules/data_dashboard/main.js",
          "moduleName": "./public/modules/data_dashboard/main.js",
          "type": "require.context",
          "userRequest": "./src",
          "loc": "11:25-63"
        }
      ]
    },
    {
      "id": 2,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\app.js",
      "name": "./public/modules/data_dashboard/src/app.js",
      "index": 2,
      "index2": 0,
      "size": 47548,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./app.js"
        }
      ],
      "source": "'use strict';\n\n(function () {\n  'use strict';\n  /* globals angular, marketcloud, notie, API_BASE_URL */\n\n  /**\r\n   * The dashboard version, this is used for reporting\r\n   * @type {String}\r\n   */\n\n  window.VERSION = '1.9.1';\n\n  /**\r\n   * [The base url for api calls]\r\n   * @type {String}\r\n   */\n  window.API_BASE_URL = '/api/v0';\n\n  /**\r\n   *  Error reporting facility\r\n   **/\n  window.LAST_ERROR = null;\n\n  /**\r\n   * Angular Selectize2\r\n   * https://github.com/machineboy2045/angular-selectize\r\n   **/\n\n  var app = angular.module('DataDashboard', ['ngRoute', 'ngMessages', 'ngTagsInput', 'angular-loading-bar', 'frapontillo.bootstrap-switch', 'ngSanitize', 'angularFileUpload', 'Marketcloud.Shared', 'angularMoment', 'chart.js', 'trumbowyg-ng', 'moment-picker', 'dndLists']);\n\n  /*\r\n   *  Since angular 1.6.0 The default location hashPrefix is the hashBang\r\n   *  In order to keep our links we set it to '' empty string.\r\n   */\n  app.config(['$locationProvider', function ($locationProvider) {\n    $locationProvider.hashPrefix('');\n  }]);\n\n  app.config(['$compileProvider', function ($compileProvider) {\n    $compileProvider.debugInfoEnabled(false);\n  }]);\n\n  app.run(function () {\n    notie.setOptions({\n\n      colorSuccess: '#27ae60',\n      colorWarning: '#f39c12',\n      colorError: '#c0392b',\n      colorInfo: '#2980b9',\n      colorNeutral: '#95a5a6',\n      colorText: '#FFFFFF',\n      dateMonths: ['Januar', 'Februar', 'MÃ¤rz', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'], // For other languages\n      animationDelay: 300, // Be sure to also change \"transition: all 0.3s ease\" variable in .scss file\n      backgroundClickDismiss: true\n    });\n  });\n\n  app.run(['StormConfiguration', '$http', function (Configuration, $http) {\n    var theme = Configuration.get('theme');\n    Configuration.applyTheme(theme);\n    return;\n  }]);\n\n  /*\r\n    This is for sending complex JSON params\r\n  */\n  app.config(['$httpProvider', function ($httpProvider) {\n    $httpProvider.defaults.paramSerializer = '$httpParamSerializerJQLike';\n  }]);\n\n  /*\r\n    Catching angular errors and sending them to the server\r\n   */\n  app.factory('$exceptionHandler', ['$injector', function ($injector) {\n\n    return function myExceptionHandler(exception, cause) {\n\n      var $http = $injector.get('$http');\n      var $log = $injector.get('$log');\n      var $getBrowser = $injector.get('GetBrowser');\n\n      $log.error(exception);\n\n      // Not logging the same error over and over for each session\n      if (window.LAST_ERROR === exception.toString()) {\n        console.info('Not logging this error instance, because it was already logged.');\n        return;\n      }\n\n      window.LAST_ERROR = exception.toString();\n      $http({\n        method: 'POST',\n        url: '/logs',\n        data: {\n          type: 'frontend-error',\n          source: 'data-dashboard',\n          browser: $getBrowser(),\n          url: window.location.href,\n          error: {\n            error: exception.toString(),\n            stack: exception.stack || null,\n            cause: cause || null\n          }\n        }\n      }).then(function (response) {\n        $log.warn('An error was logged.');\n      }).catch(function (response) {\n        $log.warn('Unable to log errors, if you see this message, please contact us at info@marketcloud.studio404.net .Thank you.');\n      });\n      return true;\n    };\n  }]);\n\n  app.run(['$rootScope', '$route', '$application', '$account', '$location', function ($rootScope, $route, $application, $account, $location) {\n\n    $rootScope.application = window.current_application;\n    $rootScope.user = window.user;\n\n    $application.set(window.current_application);\n    $account.set(window.user);\n\n    $rootScope.$on('$routeChangeStart', function (event, next, current) {\n\n      var nextRouteName = next.$$route.name;\n      var currentUserRole = $application.get(\"role\");\n\n      // Admins and owners have all powers\n      if (currentUserRole == 'admin' || currentUserRole === 'owner') return;\n\n      // Checking for explicit denyrules\n      if (next.$$route.acl) {\n        var deniedRoles = next.$$route.acl.deny || [];\n\n        if (deniedRoles.indexOf(currentUserRole) > -1) {\n          notie.alert(2, \"Access restricted for users with role \" + currentUserRole, 2);\n\n          // We also hide the loading animation to prevent the view from\n          // being hidden\n          $rootScope.$evalAsync(function () {\n            $rootScope.showLoadingAnimation = false;\n\n            // If the entry point is an invalid route, we must\n            // send them to home, otherwise they will not see any route.\n            if (!current) $location.path('/');\n          });\n\n          // Cancel the route change event\n          event.preventDefault();\n        }\n      }\n\n      console.log(\"Next route is \" + nextRouteName + \" and your role is \" + currentUserRole);\n    });\n\n    $rootScope.$on('$routeChangeStart', function (event, next, current) {\n      $rootScope.showLoadingAnimation = true;\n    });\n    $rootScope.$on('$routeChangeError', function () {\n      $rootScope.showLoadingAnimation = false;\n    });\n    $rootScope.$on('$routeChangeSuccess', function () {\n\n      // if ($application.announcementWasSeenInThisSession !== true) {\n      //   notie.alert(4,'Please take time to review our <a href=\"/announcement\" target=\"_blank\" style=\"color:white;text-decoration:underline\">important announcement</a>')\n      // }\n      // $application.announcementWasSeenInThisSession = true\n      var _route = angular.copy($route.current.$$route);\n\n      // Fallback route name\n      var routeName = 'unknown';\n\n      if (_route && _route.name) routeName = _route.name;\n\n      $rootScope.showLoadingAnimation = false;\n\n      // Sidebar controller listens for this event (sidebar.js)\n      $rootScope.$broadcast('$dashboardSectionChange', {\n        section: routeName\n      });\n    });\n  }]);\n\n  app.run(['$window', '$rootScope', function ($window, $rootScope) {\n\n    $rootScope.online = navigator.onLine;\n\n    $window.addEventListener('offline', function () {\n      notie.alert(2, 'You are currently offline. Waiting for connection..');\n      $rootScope.$apply(function () {\n        $rootScope.online = false;\n      });\n    }, false);\n\n    $window.addEventListener('online', function () {\n      notie.alertHide();\n      $rootScope.$apply(function () {\n        $rootScope.online = true;\n      });\n    }, false);\n  }]);\n\n  /*\r\n    This interceptor makes sure that if the token expires,\r\n    the browser reloads to get a new one.\r\n      We  might consider to expose a \"refresh token\" endpoint\r\n    but for now... we keep it simple\r\n   */\n  app.service('authInterceptor', ['$q', function ($q) {\n    var service = this;\n\n    service.responseError = function (response) {\n      if (response.status === 401) {\n        notie.alert(4, 'Session expired, reloading page...');\n        window.location.reload();\n      }\n      return $q.reject(response);\n    };\n  }]).config(['$httpProvider', function ($httpProvider) {\n    $httpProvider.interceptors.push('authInterceptor');\n  }]);\n\n  app.run(['$rootScope', '$location', function ($root, $location) {\n    $root.$on('$routeChangeError', function (event, route, args, response) {\n\n      if (response.status >= 500) $location.path('/error');else if (response.status === 400) {\n        notie.alert(2, 'An error has occurred. Please check the data you entered', 1);\n      } else {\n        console.log(\"$routeChangeError\", response);\n        notie.alert(2, 'An error has occurred.', 1);\n      }\n    });\n  }]);\n\n  app.config(['$routeProvider', function ($routeProvider) {\n    $routeProvider.when('/applications/list', {\n      name: 'applications',\n      templateUrl: '/modules/data_dashboard/templates/list_applications.html',\n      controller: 'ListApplicationsController'\n    }).when('/applications/new', {\n      name: 'applications.new',\n      templateUrl: '/modules/data_dashboard/templates/new_application.html',\n      controller: 'CreateApplicationController'\n    }).when('/analytics', {\n      name: 'analytics',\n      templateUrl: '/modules/data_dashboard/templates/analytics.html',\n      controller: 'AnalyticsController',\n      resolve: {\n        analytics: ['$marketcloud', '$location', function ($marketcloud, $location) {\n\n          var range = $location.search().range || \"this month\";\n\n          var _from = null;\n          var _to = null;\n\n          switch (range) {\n            case \"today\":\n              var _from = new Date();\n              _from.setHours(0, 0, 0, 0);\n              break;\n            case \"yesterday\":\n              var _from = new Date();\n              _from.setDate(_from.getDate() - 1);\n              _from.setHours(0, 0, 0, 0);\n\n              var _to = new Date();\n              _to.setHours(0, 0, 0, 0);\n              break;\n            case \"this week\":\n              var _from = new Date();\n              _from.setDate(_from.getDate() - 7);\n              _from.setHours(0, 0, 0, 0);\n              break;\n            default:\n              var _from = new Date();\n              _from.setMonth(_from.getMonth() - 1);\n              _from.setHours(0, 0, 0, 0);\n\n              break;\n          }\n\n          if (!_to) _to = new Date();\n\n          return $marketcloud.orders.list({\n            $created_at_gt: _from.getTime(),\n            $created_at_lt: _to.getTime(),\n            per_page: 9999\n          });\n        }],\n\n        customers: ['$marketcloud', '$location', function ($marketcloud, $location) {\n\n          var range = $location.search().range || \"this month\";\n\n          var _from = null;\n          var _to = null;\n\n          switch (range) {\n            case \"today\":\n              var _from = new Date();\n              _from.setHours(0, 0, 0, 0);\n              break;\n            case \"yesterday\":\n              var _from = new Date();\n              _from.setDate(_from.getDate() - 1);\n              _from.setHours(0, 0, 0, 0);\n\n              var _to = new Date();\n              _to.setHours(0, 0, 0, 0);\n              break;\n            case \"this week\":\n              var _from = new Date();\n              _from.setDate(_from.getDate() - 7);\n              _from.setHours(0, 0, 0, 0);\n              break;\n            default:\n              var _from = new Date();\n              _from.setMonth(_from.getMonth() - 1);\n              _from.setHours(0, 0, 0, 0);\n\n              break;\n          }\n\n          if (!_to) _to = new Date();\n\n          return $marketcloud.users.list({\n            $created_at_gt: _from.toISOString(),\n            $created_at_lt: _to.toISOString(),\n            per_page: 9999\n          });\n        }],\n        carts: ['$marketcloud', '$location', function ($marketcloud, $location) {\n\n          var range = $location.search().range || \"this month\";\n\n          var _from = null;\n          var _to = null;\n\n          switch (range) {\n            case \"today\":\n              var _from = new Date();\n              _from.setHours(0, 0, 0, 0);\n              break;\n            case \"yesterday\":\n              var _from = new Date();\n              _from.setDate(_from.getDate() - 1);\n              _from.setHours(0, 0, 0, 0);\n\n              var _to = new Date();\n              _to.setHours(0, 0, 0, 0);\n              break;\n            case \"this week\":\n              var _from = new Date();\n              _from.setDate(_from.getDate() - 7);\n              _from.setHours(0, 0, 0, 0);\n              break;\n            default:\n              var _from = new Date();\n              _from.setMonth(_from.getMonth() - 1);\n              _from.setHours(0, 0, 0, 0);\n\n              break;\n          }\n\n          if (!_to) _to = new Date();\n\n          return $marketcloud.carts.list({\n            $created_at_gt: _from.toISOString(),\n            $created_at_lt: _to.toISOString(),\n            per_page: 9999\n          });\n        }]\n      }\n    }).when('/', {\n      name: 'home',\n      templateUrl: '/modules/data_dashboard/templates/home.html',\n      controller: 'HomeController',\n      resolve: {\n        analytics: ['$http', function ($http) {\n\n          var one_month_ago = new Date();\n          one_month_ago.setMonth(one_month_ago.getMonth() - 1);\n          one_month_ago.setHours(0, 0, 0, 0);\n\n          return $http({\n            method: 'GET',\n            url: API_BASE_URL + '/orders',\n\n            params: {\n              $created_at_gt: one_month_ago.getTime(),\n              per_page: 99999\n            },\n            headers: {\n              Authorization: window.public_key + ':' + window.token\n            }\n          });\n        }]\n      }\n    }).when('/error', {\n      templateUrl: '/modules/data_dashboard/templates/error.html'\n    }).when('/bundled_product/create', {\n      name: 'products.create',\n      templateUrl: '/modules/data_dashboard/templates/new_bundled_product.html',\n      controller: 'NewBundledProductController'\n    }).when('/bundled_product/:productId/edit', {\n      name: 'products.edit',\n      templateUrl: '/modules/data_dashboard/templates/edit_bundled_product.html',\n      controller: 'EditBundledProductController',\n      resolve: {\n        product: ['$marketcloud', '$route', function ($marketcloud, $route) {\n          return $marketcloud.products.getById($route.current.params.productId);\n        }]\n      }\n    })\n    /*\r\n    .when('/groupedProducts/create', {\r\n      name: 'products.create',\r\n      templateUrl: '/modules/data_dashboard/templates/new_grouped_product.html',\r\n      controller: 'NewGroupedProductController'\r\n    })\r\n    .when('/groupedProducts/:productId/edit', {\r\n      name: 'products.edit',\r\n      templateUrl: '/modules/data_dashboard/templates/edit_grouped_product.html',\r\n      controller: 'EditGroupedProductController',\r\n      resolve: {\r\n        product: ['$marketcloud', '$route', function($marketcloud, $route) {\r\n          return $marketcloud.products.getById($route.current.params.productId);\r\n        }]\r\n      }\r\n    })\r\n    .when('/bundled_product/create', {\r\n      name: 'products.create',\r\n      templateUrl: '/modules/data_dashboard/templates/new_bundled_product.html',\r\n      controller: 'NewBundledProductController'\r\n    })\r\n    .when('/bundled_product/:productId/edit', {\r\n      name: 'products.edit',\r\n      templateUrl: '/modules/data_dashboard/templates/edit_bundled_product.html',\r\n      controller: 'EditBundledProductController',\r\n      resolve: {\r\n        product: ['$marketcloud', '$route', function($marketcloud, $route) {\r\n          return $marketcloud.products.getById($route.current.params.productId);\r\n        }]\r\n      }\r\n    })\r\n    .when('/configurable_product/create', {\r\n      name: 'products.create',\r\n      templateUrl: '/modules/data_dashboard/templates/new_configurable_product.html',\r\n      controller: 'NewConfigurableProductController'\r\n    })\r\n    .when('/configurable_product/:productId/edit', {\r\n      name: 'products.edit',\r\n      templateUrl: '/modules/data_dashboard/templates/edit_configurable_product.html',\r\n      controller: 'EditConfigurableProductController',\r\n      resolve: {\r\n        product: ['$marketcloud', '$route', function($marketcloud, $route) {\r\n          return $marketcloud.products.getById($route.current.params.productId);\r\n        }]\r\n      }\r\n    }))*/\n    .when('/products', {\n      name: 'products.list',\n      templateUrl: '/modules/data_dashboard/templates/products.html',\n      controller: 'ListProductsController',\n      reloadOnSearch: false,\n      resolve: {\n        products: ['$marketcloud', 'StormConfiguration', '$route', '$location', function ($marketcloud, configuration, $route, $location) {\n\n          // Fetching filters from storage\n          var filters = configuration.get(\"products_list_active_filters\") || [];\n\n          // Default query to products endpoint\n          var query = {\n            page: 1\n          };\n\n          // Adding filters to query\n          filters.forEach(function (filter) {\n            query[filter.name] = filter.value;\n          });\n\n          // Applying Url query\n          var urlQuery = {};\n          try {\n            urlQuery = JSON.parse($location.search().query);\n          } catch (e) {\n            urlQuery = {};\n          }\n\n          for (var k in urlQuery) {\n            query[k] = urlQuery[k];\n          }\n\n          // Executing the query\n          return $marketcloud.products.list(query);\n        }]\n      }\n    }).when('/product_with_variants/create', {\n      name: 'products.create',\n      templateUrl: '/modules/data_dashboard/templates/new_productWithVariants.html',\n      controller: 'NewProductWithVariantsController'\n    }).when('/product_with_variants/create2', {\n      name: 'products.create',\n      templateUrl: '/modules/data_dashboard/templates/new_productWithVariants2.html',\n      controller: 'NewProductWithVariantsController'\n    }).when('/simple_product/create', {\n      name: 'products.create',\n      templateUrl: '/modules/data_dashboard/templates/new_simple_product.html',\n      controller: 'NewSimpleProductController'\n    }).when('/simple_product/:productId/edit', {\n      name: 'products.edit',\n      templateUrl: '/modules/data_dashboard/templates/edit_simple_product.html',\n      controller: 'EditSimpleProductController',\n      resolve: {\n        product: ['$marketcloud', '$route', function ($marketcloud, $route) {\n          return $marketcloud.products.getById($route.current.params.productId);\n        }]\n      }\n    }).when('/product_with_variants/:productId/edit', {\n      name: 'products.edit',\n      templateUrl: '/modules/data_dashboard/templates/edit_productWithVariants.html',\n      controller: 'EditProductWithVariantsController',\n      resolve: {\n        product: ['$marketcloud', '$route', function ($marketcloud, $route) {\n          return $marketcloud.products.getById($route.current.params.productId);\n        }]\n      }\n    }).when('/products/:productId/variants', {\n      name: 'products.variants.list',\n      templateUrl: '/modules/data_dashboard/templates/list_variants.html',\n      controller: 'ListVariantsController',\n      resolve: {\n        resolvedProduct: ['$marketcloud', '$route', function ($marketcloud, $route) {\n          return $marketcloud.products.getById($route.current.params.productId);\n        }]\n      }\n    }).when('/products/:productId/variants/:variantId', {\n      name: 'products.variants.edit',\n      templateUrl: '/modules/data_dashboard/templates/edit_variant.html',\n      controller: 'EditVariantController',\n      resolve: {\n        resolvedProduct: ['$marketcloud', '$route', function ($marketcloud, $route) {\n          return $marketcloud.products.getById($route.current.params.productId);\n        }]\n      }\n    }).when('/resource/:resourceName', {\n      name: '',\n      templateUrl: function templateUrl(params) {\n        return '/modules/data_dashboard/templates/resources.html';\n      },\n      //templateUrl: '/modules/data_dashboard/templates/edit_variant.html',\n      controller: 'ListResourcesController',\n      resolve: {\n        resources: ['$marketcloud', '$route', function ($marketcloud, $route) {\n          return $marketcloud[$route.current.params.resourceName].list();\n        }],\n        dependencies: ['$q', function ($q) {\n          return $q.when({});\n        }]\n\n      }\n    }).when('/products/:productId/translations', {\n      name: 'products.translation.edit',\n      templateUrl: '/modules/data_dashboard/templates/product_translations.html',\n      controller: 'EditProductTranslationsController',\n      resolve: {\n        product: ['$marketcloud', '$route', '$q', '$location', function ($marketcloud, $route, $q, $location) {\n          return $marketcloud.products.getById($route.current.params.productId);\n        }]\n      }\n    }).when('/categories/:id/translations', {\n      name: 'categories.translation.edit',\n      templateUrl: '/modules/data_dashboard/templates/category_translations.html',\n      controller: 'EditCategoryTranslationsController',\n      resolve: {\n        category: ['$marketcloud', '$route', function ($marketcloud, $route) {\n          return $marketcloud.categories.getById($route.current.params.id);\n        }]\n      }\n    }).when('/brands/:id/translations', {\n      name: 'brands.translation.edit',\n      templateUrl: '/modules/data_dashboard/templates/brand_translations.html',\n      controller: 'EditBrandTranslationsController',\n      resolve: {\n        brand: ['$marketcloud', '$route', function ($marketcloud, $route) {\n          return $marketcloud.brands.getById($route.current.params.id);\n        }]\n      }\n    }).when('/collections/:id/translations', {\n      name: 'collections.translation.edit',\n      templateUrl: '/modules/data_dashboard/templates/collection_translations.html',\n      controller: 'EditCollectionTranslationsController',\n      resolve: {\n        collection: ['$marketcloud', '$route', function ($marketcloud, $route) {\n          return $marketcloud.collections.getById($route.current.params.id);\n        }]\n      }\n    }).when('/contents/:id/translations', {\n      name: 'contents.translation.edit',\n      templateUrl: '/modules/data_dashboard/templates/content_translations.html',\n      controller: 'EditContentTranslationsController',\n      resolve: {\n        content: ['$marketcloud', '$route', function ($marketcloud, $route) {\n          return $marketcloud.contents.getById($route.current.params.id);\n        }]\n      }\n    }).when('/invoices/create/:orderId?', {\n      name: 'invoices.create',\n      templateUrl: '/modules/data_dashboard/templates/new_invoice.html',\n      controller: 'NewInvoiceController',\n      resolve: {\n        parentOrder: ['$marketcloud', '$route', function ($marketcloud, $route) {\n          if ($route.current.params.orderId) return $marketcloud.orders.getById($route.current.params.orderId);else return {};\n        }],\n        orders: ['$marketcloud', function ($marketcloud) {\n          return $marketcloud.orders.list({ per_page: 5 });\n        }]\n      }\n    }).when('/invoices/:invoiceId/edit', {\n      name: 'invoices.edit',\n      templateUrl: '/modules/data_dashboard/templates/edit_invoice.html',\n      controller: 'EditInvoiceController',\n      resolve: {\n        invoice: ['$marketcloud', '$route', function ($marketcloud, $route) {\n          return $marketcloud.invoices.getById($route.current.params.invoiceId);\n        }]\n      }\n    }).when('/invoices/', {\n      name: 'invoices.list',\n      templateUrl: '/modules/data_dashboard/templates/invoices.html',\n      controller: 'ListResourcesController',\n      resolve: {\n        resources: ['$marketcloud', function ($marketcloud) {\n          return $marketcloud.invoices.list({\n            page: 1\n          });\n        }],\n        resourceName: function resourceName() {\n          return 'invoices';\n        },\n        dependencies: ['$q', function ($q) {\n          return $q.when({});\n        }]\n      }\n    }).when('/payments/', {\n      name: 'payments.list',\n      templateUrl: '/modules/data_dashboard/templates/payments.html',\n      controller: 'ListResourcesController',\n      resolve: {\n        resources: ['$marketcloud', function ($marketcloud) {\n          return $marketcloud.payments.list({\n            page: 1\n          });\n        }],\n        resourceName: function resourceName() {\n          return 'payments';\n        },\n        dependencies: ['$q', '$marketcloud', function ($q, $marketcloud) {\n          return $q.all({\n            events: $marketcloud.events.list({\n              \"request.path\": \"/v0/payments\"\n            })\n          });\n        }]\n      }\n    }).when('/payments/alerts', {\n      name: 'payments.alerts.list',\n      templateUrl: '/modules/data_dashboard/templates/payments_alerts.html',\n      controller: 'ListResourcesController',\n      resolve: {\n        resources: ['$http', function ($http) {\n          return $http({\n            method: 'GET',\n            url: window.API_BASE_URL + '/payments/alerts',\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: window.public_key + ':' + window.token\n            }\n          });\n        }],\n        resourceName: function resourceName() {\n          return 'events';\n        },\n        dependencies: ['$q', function ($q) {\n          return $q.when({});\n        }]\n      }\n    }).when('/orders', {\n      name: 'orders.list',\n      templateUrl: '/modules/data_dashboard/templates/orders.html',\n      controller: 'OrdersController',\n      reloadOnSearch: false,\n      resolve: {\n        ordersResponse: ['$marketcloud', '$route', '$location', 'StormConfiguration', function ($marketcloud, $route, $location, configuration) {\n\n          // Fetching filters from storage\n          var filters = configuration.get(\"orders_list_active_filters\") || [];\n\n          // Default query to products endpoint\n          var query = {\n            page: 1\n          };\n\n          // Adding filters to query\n          filters.forEach(function (filter) {\n            query[filter.name] = filter.value;\n          });\n\n          // Applying Url query\n          var urlQuery = {};\n          try {\n            urlQuery = JSON.parse($location.search().query);\n          } catch (e) {\n            urlQuery = {};\n          }\n\n          for (var k in urlQuery) {\n            query[k] = urlQuery[k];\n          }\n\n          return $marketcloud.orders.list(query);\n        }]\n      }\n    }).when('/orders/create', {\n      name: 'orders.create',\n      templateUrl: '/modules/data_dashboard/templates/new_order.html',\n      controller: 'NewOrderController'\n    }).when('/orders/:orderId/view', {\n      name: 'orders.edit',\n      templateUrl: '/modules/data_dashboard/templates/order.html',\n      controller: 'OrderController',\n      resolve: {\n        order: ['$marketcloud', '$route', function ($marketcloud, $route) {\n          return $marketcloud.orders.getById($route.current.params.orderId);\n        }],\n        shippingMethods: ['$marketcloud', '$route', function ($marketcloud) {\n          return $marketcloud.shippings.list();\n        }],\n        paymentMethods: ['$marketcloud', '$route', function ($marketcloud) {\n          return $marketcloud.paymentMethods.list();\n        }]\n      }\n    }).when('/users', {\n      name: 'users.list',\n      templateUrl: '/modules/data_dashboard/templates/users.html',\n      controller: 'ListResourcesController',\n      resolve: {\n        resources: ['$marketcloud', '$route', function ($marketcloud) {\n          return $marketcloud.users.list({\n            page: 1,\n            per_page: 20,\n            expand: 'orders'\n          });\n        }],\n        resourceName: function resourceName() {\n          return 'users';\n        },\n        dependencies: ['$q', function ($q) {\n\n          return $q.when({});\n        }]\n      }\n    }).when('/users/create', {\n      name: 'users.create',\n      templateUrl: '/modules/data_dashboard/templates/new_user.html',\n      controller: 'NewUserController'\n    }).when('/users/:userId/view', {\n      name: 'users.view',\n      templateUrl: '/modules/data_dashboard/templates/user.html',\n      controller: 'UserController',\n      resolve: {\n        user: ['$marketcloud', '$route', function ($marketcloud, $route) {\n          return $marketcloud.users.getById($route.current.params.userId);\n        }]\n      }\n    }).when('/categories', {\n      name: 'categories.list',\n      templateUrl: '/modules/data_dashboard/templates/categories.html',\n      controller: 'ListResourcesController',\n      resolve: {\n        resources: ['$marketcloud', '$route', function ($marketcloud) {\n          return $marketcloud.categories.list({\n            page: 1\n          });\n        }],\n        resourceName: function resourceName() {\n          return 'categories';\n        },\n        dependencies: ['$q', function ($q) {\n\n          return $q.when({});\n        }]\n      }\n    }).when('/categories/:categoryId/edit', {\n      name: 'categories.edit',\n      templateUrl: '/modules/data_dashboard/templates/edit_category.html',\n      controller: 'EditCategoryController',\n      resolve: {\n        category: ['$marketcloud', '$route', function ($marketcloud, $route) {\n          return $marketcloud.categories.getById($route.current.params.categoryId);\n        }]\n      }\n    }).when('/categories/create', {\n      name: 'categories.create',\n      templateUrl: '/modules/data_dashboard/templates/new_category.html',\n      controller: 'CategoryController'\n    }).when('/brands', {\n      name: 'brands.list',\n      templateUrl: '/modules/data_dashboard/templates/brands.html',\n      controller: 'ListResourcesController',\n      resolve: {\n        resources: ['$marketcloud', '$route', function ($marketcloud) {\n          return $marketcloud.brands.list({\n            page: 1\n          });\n        }],\n        resourceName: function resourceName() {\n          return 'brands';\n        },\n        dependencies: ['$q', function ($q) {\n          return $q.when({});\n        }]\n      }\n    }).when('/brands/:brandId/edit', {\n      name: 'brands.edit',\n      templateUrl: '/modules/data_dashboard/templates/edit_brand.html',\n      controller: 'EditBrandController',\n      resolve: {\n        brand: ['$marketcloud', '$route', function ($marketcloud, $route) {\n          return $marketcloud.brands.getById($route.current.params.brandId);\n        }]\n      }\n    }).when('/brands/create', {\n      name: 'brands.create',\n      templateUrl: '/modules/data_dashboard/templates/new_brand.html',\n      controller: 'BrandController'\n    }).when('/collections', {\n      name: 'collections.list',\n      templateUrl: '/modules/data_dashboard/templates/collections.html',\n      controller: 'ListResourcesController',\n      resolve: {\n        resources: ['$marketcloud', '$route', function ($marketcloud) {\n          return $marketcloud.collections.list({\n            page: 1\n          });\n        }],\n        resourceName: function resourceName() {\n          return 'collections';\n        },\n        dependencies: ['$q', function ($q) {\n          return $q.when({});\n        }]\n      }\n    }).when('/collections/:collectionId/edit', {\n      name: 'collections.edit',\n      templateUrl: '/modules/data_dashboard/templates/edit_collection.html',\n      controller: 'EditCollectionController',\n      resolve: {\n        collection: ['$marketcloud', '$route', function ($marketcloud, $route) {\n          return $marketcloud.collections.getById($route.current.params.collectionId);\n        }]\n      }\n    }).when('/collections/create', {\n      name: 'collections.create',\n      templateUrl: '/modules/data_dashboard/templates/new_collection.html',\n      controller: 'CreateCollectionController'\n    }).when('/integrations', {\n      name: 'integrations.list',\n      templateUrl: '/modules/data_dashboard/templates/integrations.html',\n      controller: 'IntegrationsController'\n    }).when('/integrations/braintree', {\n      name: 'integrations.braintree',\n      templateUrl: '/modules/data_dashboard/templates/integration_braintree.html',\n      controller: 'IntegrationBraintreeController',\n      resolve: {\n        BraintreeIntegration: ['$http', function ($http) {\n\n          return $http({\n            method: 'GET',\n            url: API_BASE_URL + '/integrations/braintree',\n            headers: {\n              Authorization: window.public_key + ':' + window.token\n            }\n          }).then(function (response) {\n\n            return new Promise(function (resolve) {\n              resolve(response);\n            });\n          }).catch(function () {\n            return new Promise(function (resolve) {\n              resolve(null);\n            });\n          });\n        }]\n      }\n    }).when('/integrations/stripe', {\n      name: 'integrations.stripe',\n      templateUrl: '/modules/data_dashboard/templates/integration_stripe.html',\n      controller: 'IntegrationStripeController',\n      resolve: {\n        StripeIntegration: ['$http', function ($http) {\n\n          return $http({\n            method: 'GET',\n            url: API_BASE_URL + '/integrations/stripe',\n            headers: {\n              Authorization: window.public_key + ':' + window.token\n            }\n          }).then(function (response) {\n\n            return new Promise(function (resolve) {\n              resolve(response);\n            });\n          }).catch(function () {\n            return new Promise(function (resolve) {\n              resolve(null);\n            });\n          });\n        }]\n      }\n    }).when('/contents', {\n      name: 'contents.list',\n      templateUrl: '/modules/data_dashboard/templates/contents.html',\n      controller: 'ListResourcesController',\n      resolve: {\n        resources: ['$marketcloud', function ($marketcloud) {\n          return $marketcloud.contents.list({\n            page: 1\n          });\n        }],\n        resourceName: function resourceName() {\n          return 'contents';\n        },\n        dependencies: ['$q', function ($q) {\n          return $q.when({});\n        }]\n      }\n    }).when('/contents/create', {\n      name: 'contents.create',\n      templateUrl: '/modules/data_dashboard/templates/new_content.html',\n      controller: 'ContentController'\n    }).when('/contents/:contentId/edit', {\n      name: 'contents.edit',\n      templateUrl: '/modules/data_dashboard/templates/edit_content.html',\n      controller: 'EditContentController',\n      resolve: {\n        content: ['$marketcloud', '$route', function ($marketcloud, $route) {\n          return $marketcloud.contents.getById($route.current.params.contentId);\n        }]\n      }\n    }).when('/contents/static', {\n      name: 'staticContents.list',\n      templateUrl: '/modules/data_dashboard/templates/staticContents/staticContents.html',\n      controller: 'ListResourcesController',\n      resolve: {\n        resources: ['$marketcloud', function ($marketcloud) {\n          return $marketcloud.staticContents.list({\n            page: 1\n          });\n        }],\n        resourceName: function resourceName() {\n          return 'staticContents';\n        },\n        dependencies: ['$q', function ($q) {\n          return $q.when({});\n        }]\n      }\n    }).when('/contents/static/create', {\n      name: 'staticContents.create',\n      templateUrl: '/modules/data_dashboard/templates/staticContents/new_staticContent.html',\n      controller: 'CreateStaticContentController'\n    }).when('/contents/static/:contentId/edit', {\n      name: 'staticContents.edit',\n      templateUrl: '/modules/data_dashboard/templates/staticContents/edit_staticContents.html',\n      controller: 'EditStaticContentController',\n      resolve: {\n        content: ['$marketcloud', '$route', function ($marketcloud, $route) {\n          return $marketcloud.staticContents.getById($route.current.params.contentId);\n        }]\n      }\n    }).when('/events', {\n      name: 'events.list',\n      templateUrl: '/modules/data_dashboard/templates/events.html',\n      controller: 'ListResourcesController',\n      resolve: {\n        resources: ['$marketcloud', '$route', function ($marketcloud) {\n          return $marketcloud.events.list();\n        }],\n        resourceName: function resourceName() {\n          return 'events';\n        },\n        dependencies: ['$q', function ($q) {\n          return $q.when({});\n        }]\n      }\n    }).when('/variables', {\n      name: 'variables.list',\n      templateUrl: '/modules/data_dashboard/templates/variables.html',\n      controller: 'ListResourcesController',\n      resolve: {\n        resources: ['$marketcloud', '$route', function ($marketcloud) {\n          return $marketcloud.variables.list();\n        }],\n        resourceName: function resourceName() {\n          return 'variables';\n        },\n        dependencies: ['$q', function ($q) {\n          return $q.when({});\n        }]\n      }\n    }).when('/variables/create', {\n      name: 'variables.create',\n      templateUrl: '/modules/data_dashboard/templates/new_variable.html',\n      controller: 'CreateVariableController'\n    }).when('/variables/:variableId/edit', {\n      name: 'variables.edit',\n      templateUrl: '/modules/data_dashboard/templates/edit_variable.html',\n      controller: 'EditVariableController',\n      resolve: {\n        variable: ['$marketcloud', '$route', function ($marketcloud, $route) {\n          return $marketcloud.variables.getById($route.current.params.variableId);\n        }]\n      }\n    }).when('/media', {\n      name: 'media.list',\n      templateUrl: '/modules/data_dashboard/templates/media.html',\n      controller: 'MediaListController',\n      resolve: {\n        media: ['$marketcloud', '$route', function ($marketcloud, $route) {\n          return $marketcloud.media.list();\n        }]\n      }\n\n    }).when('/promotions', {\n      name: 'promotions.list',\n      templateUrl: '/modules/data_dashboard/templates/promotions.html',\n      controller: 'ListResourcesController',\n      resolve: {\n        resources: ['$marketcloud', '$route', function ($marketcloud) {\n          return $marketcloud.promotions.list({\n            page: 1\n          });\n        }],\n        resourceName: function resourceName() {\n          return 'promotions';\n        },\n        dependencies: ['$q', function ($q) {\n          return $q.when({});\n        }]\n      }\n    }).when('/promotions/create', {\n      name: 'promotions.create',\n      templateUrl: '/modules/data_dashboard/templates/new_promotion.html',\n      controller: 'NewPromotionController'\n    }).when('/promotions/:id/edit', {\n      name: 'promotions.edit',\n      templateUrl: '/modules/data_dashboard/templates/edit_promotion.html',\n      controller: 'EditPromotionController',\n      resolve: {\n        promotion: ['$marketcloud', '$route', function ($marketcloud, $route) {\n          return $marketcloud.promotions.getById($route.current.params.id);\n        }]\n      }\n    }).when('/coupons', {\n      name: 'coupons.list',\n      templateUrl: '/modules/data_dashboard/templates/coupons.html',\n      controller: 'ListResourcesController',\n      resolve: {\n        resources: ['$marketcloud', '$route', function ($marketcloud) {\n          return $marketcloud.coupons.list({\n            page: 1\n          });\n        }],\n        resourceName: function resourceName() {\n          return 'coupons';\n        },\n        dependencies: ['$q', function ($q) {\n          return $q.when({});\n        }]\n      }\n    }).when('/coupons/create', {\n      name: 'coupons.create',\n      templateUrl: '/modules/data_dashboard/templates/new_coupon.html',\n      controller: 'NewCouponController'\n    }).when('/coupons/:id/edit', {\n      name: 'coupons.create',\n      templateUrl: '/modules/data_dashboard/templates/edit_coupon.html',\n      controller: 'EditCouponController',\n      resolve: {\n        coupon: ['$marketcloud', '$route', function ($marketcloud, $route) {\n          return $marketcloud.coupons.getById($route.current.params.id);\n        }]\n      }\n    }).when('/shippings', {\n      redirectTo: '/system/shippings'\n    }).when('/shippings/create', {\n      redirectTo: '/system/shippings/create'\n    }).when('/shippings/:shippingId/edit', {\n      redirectTo: '/system/shippings/:shippingId/edit'\n    }).when('/system/taxes', {\n      name: 'system.taxes.list',\n      templateUrl: '/modules/data_dashboard/templates/taxes.html',\n      controller: 'ListResourcesController',\n      resolve: {\n        resources: ['$marketcloud', '$route', function ($marketcloud) {\n          return $marketcloud.taxes.list();\n        }],\n        resourceName: function resourceName() {\n          return 'taxes';\n        },\n        dependencies: ['$q', function ($q) {\n          return $q.when({});\n        }]\n\n      }\n    }).when('/system/taxes/create', {\n      name: 'system.taxes.create',\n      templateUrl: '/modules/data_dashboard/templates/new_tax.html',\n      controller: 'CreateTaxController'\n    }).when('/system/taxes/:id/edit', {\n      name: 'system.taxes.edit',\n      templateUrl: '/modules/data_dashboard/templates/edit_tax.html',\n      controller: 'EditTaxController',\n      resolve: {\n        tax: ['$marketcloud', '$route', function ($marketcloud, $route) {\n          return $marketcloud.taxes.getById($route.current.params.id);\n        }]\n      }\n    }).when('/system/shippings', {\n      name: 'system.shippings.list',\n      templateUrl: '/modules/data_dashboard/templates/shippings.html',\n      controller: 'ListResourcesController',\n      resolve: {\n        resources: ['$marketcloud', '$route', function ($marketcloud) {\n          return $marketcloud.shippings.list();\n        }],\n        resourceName: function resourceName() {\n          return 'shippings';\n        },\n        dependencies: ['$q', function ($q) {\n          return $q.when({});\n        }]\n\n      }\n    }).when('/system/shippings/create', {\n      name: 'system.shippings.create',\n      templateUrl: '/modules/data_dashboard/templates/new_shipping.html',\n      controller: 'CreateShippingController'\n    }).when('/system/shippings/:shippingId/edit', {\n      name: 'system.shippings.edit',\n      templateUrl: '/modules/data_dashboard/templates/edit_shipping.html',\n      controller: 'EditShippingController',\n      resolve: {\n        shipping: ['$marketcloud', '$route', function ($marketcloud, $route) {\n          return $marketcloud.shippings.getById($route.current.params.shippingId);\n        }]\n      }\n    }).when('/system/settings', {\n      name: 'system.settings',\n      templateUrl: '/modules/data_dashboard/templates/settings.html',\n      controller: 'SettingsController'\n    }).when('/system/localization', {\n      name: 'system.localization',\n      templateUrl: '/modules/data_dashboard/templates/localization.html',\n      controller: 'LocalizationController'\n    }).when('/system/payments', {\n      name: 'system.payments',\n      templateUrl: '/modules/data_dashboard/templates/paymentMethods.html',\n      controller: 'PaymentMethodsController',\n      resolve: {\n        paymentMethods: ['$marketcloud', '$route', function ($marketcloud) {\n          return $marketcloud.paymentMethods.list();\n        }]\n      }\n    }).when('/notifications', {\n      name: 'notifications',\n      templateUrl: '/modules/data_dashboard/templates/notifications.html',\n      controller: 'NotificationsController',\n      resolve: {\n        notifications: ['$marketcloud', '$route', function ($marketcloud) {\n          return $marketcloud.notifications.list();\n        }]\n      }\n    }).when('/notifications/:notificationId/edit', {\n      name: 'notifications.edit',\n      templateUrl: '/modules/data_dashboard/templates/edit_notification.html',\n      controller: 'EditNotificationController',\n      resolve: {\n        notification: ['$marketcloud', '$route', function ($marketcloud, $route) {\n          return $marketcloud.notifications.getById($route.current.params.notificationId);\n        }]\n      }\n    }).when('/notifications/:notificationId/translations', {\n      name: 'notifications.translation',\n      templateUrl: '/modules/data_dashboard/templates/notifications_translation.html',\n      controller: 'TranslateNotificationController',\n      resolve: {\n        notification: ['$marketcloud', '$route', function ($marketcloud, $route) {\n          return $marketcloud.notifications.getById($route.current.params.notificationId);\n        }]\n      }\n    }).when('/notifications/create', {\n      name: 'notifications.create',\n      templateUrl: '/modules/data_dashboard/templates/new_notification.html',\n      controller: 'NewNotificationController'\n    }).when('/notifications/preview/:data', {\n      name: 'notifications.preview',\n      templateUrl: '/modules/data_dashboard/templates/notifications_preview.html',\n      controller: 'PreviewNotificationController',\n      resolve: {\n        notification: ['$route', function ($route) {\n          return atob($route.current.params.data);\n        }]\n      }\n    }).when('/application/billing', {\n      name: 'application.billing',\n      templateUrl: '/modules/data_dashboard/templates/application/application_billing.html',\n      controller: 'ApplicationBillingController',\n      resolve: {\n        account: ['$http', function (http) {\n          return http({\n            method: 'GET',\n            url: '/account/get'\n          });\n        }]\n      }\n    }).when('/application', {\n      redirectTo: '/application/overview',\n      acl: {\n        deny: ['guest']\n      }\n    }).when('/application/overview', {\n      name: 'application.overview',\n      acl: {\n        deny: ['guest']\n      },\n      templateUrl: '/modules/data_dashboard/templates/application/application_overview.html',\n      controller: 'ApplicationOverviewController'\n    }).when('/application/settings', {\n      name: 'application.settings',\n      acl: {\n        deny: ['guest']\n      },\n      templateUrl: '/modules/data_dashboard/templates/application/application_settings.html',\n      controller: 'ApplicationSettingsController'\n    }).when('/application/deploy', {\n      name: 'application.deploy',\n      acl: {\n        deny: ['guest']\n      },\n      templateUrl: '/modules/data_dashboard/templates/application/application_deploy.html',\n      controller: 'DeployController'\n    }).when('/application/integrations', {\n      name: 'application.integrations',\n      acl: {\n        deny: ['guest']\n      },\n      templateUrl: '/modules/data_dashboard/templates/application/application_integrations.html',\n      controller: 'IntegrationsController'\n    }).when('/application/webhooks', {\n      name: 'application.webhooks',\n      acl: {\n        deny: ['guest']\n      },\n      templateUrl: '/modules/data_dashboard/templates/application/application_webhooks.html',\n      controller: 'WebhooksController',\n      resolve: {\n        webhooks: ['$http', '$route', '$application', function ($http, $route, $application) {\n          return $http({\n            method: 'GET',\n            url: '/applications/' + $application.get(\"id\") + '/webhooks'\n          });\n        }]\n      }\n    }).when('/application/collaborators', {\n      name: 'application.collaborators',\n      acl: {\n        deny: ['guest']\n      },\n      templateUrl: '/modules/data_dashboard/templates/application/application_collaborators.html',\n      controller: 'CollaboratorsController',\n      resolve: {\n        collaborators: ['$http', '$route', '$application', function ($http, $route, $application) {\n          return $http({\n            method: 'GET',\n            url: '/applications/' + $application.get('id') + '/collaborators'\n          });\n        }]\n      }\n    }).when('/application/acl', {\n      name: 'application.acl',\n      acl: {\n        deny: ['guest']\n      },\n      templateUrl: '/modules/data_dashboard/templates/application/roles.html',\n      controller: 'ACLController',\n      resolve: {\n        roles: ['$http', '$route', '$application', function ($http, $route, $application) {\n          return $http({\n            method: 'GET',\n            url: '/applications/' + $application.get('id') + '/roles'\n          });\n        }]\n      }\n    }).when('/application/acl/new', {\n      name: 'application.acl',\n      acl: {\n        deny: ['guest']\n      },\n      templateUrl: '/modules/data_dashboard/templates/application/new_role.html',\n      controller: 'NewRoleController'\n    }).when('/application/acl/:roleId/edit', {\n      name: 'application.acl',\n      acl: {\n        deny: ['guest']\n      },\n      templateUrl: '/modules/data_dashboard/templates/application/edit_role.html',\n      controller: 'EditRoleController',\n      resolve: {\n        role: ['$route', '$http', '$application', function ($route, $http, $application) {\n          return $http({\n            method: 'GET',\n            url: '/applications/' + $application.get('id') + '/roles/' + $route.current.params.roleId\n          });\n        }]\n      }\n    }).otherwise({\n      redirectTo: '/'\n    });\n  }]);\n\n  module.exports = app;\n})();"
    },
    {
      "id": 3,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\components\\activeFilters\\activeFilters.component.js",
      "name": "./public/modules/data_dashboard/src/components/activeFilters/activeFilters.component.js",
      "index": 3,
      "index2": 1,
      "size": 5277,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./components/activeFilters/activeFilters.component.js"
        }
      ],
      "source": "'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar app = angular.module('DataDashboard');\napp.controller('ActiveFiltersController', ['$scope', 'StormConfiguration', function (scope, StormConfiguration) {\n\n  var ctrl = this;\n\n  scope.newFilter = {\n    name: '',\n    value: null\n  };\n\n  var notFilters = ['per_page', 'page', 'sort_by', 'sort_order'];\n\n  this.$onInit = function () {\n\n    scope.ctrl = this;\n\n    scope.ctrl.query = this.query || {};\n\n    // An array of attributes name from the parent controller\n    scope.filterAttributes = this.filterAttributes;\n\n    // Initializing filters\n    scope.filters = StormConfiguration.get('products_list_active_filters') || [];\n\n    for (var k in ctrl.query) {\n      if (notFilters.indexOf(k) === -1) {\n        scope.filters.push({\n          name: k,\n          value: ctrl.query[k]\n        });\n      }\n    }\n\n    scope.persistFilters = StormConfiguration.get('products_list_persist_filters') || false;\n    scope.persistFilters = Boolean(scope.persistFilter);\n  };\n\n  /*\r\n   *  This function returns the guessed type for a property found in products\r\n   *\r\n   *  @param {String} Product key name to test\r\n   *\r\n   *  @return {String} THe name of the guessed type for the specified key\r\n   */\n  var inferFilterType = function inferFilterType(key) {\n    if (typeof scope.ctrl.resources === 'undefined') {\n      return null;\n    }\n\n    var _resource = scope.ctrl.resources.find(function (item) {\n      return item.hasOwnProperty(key);\n    });\n    // Key is the property name we should analyze on the model\n\n    if (_resource) {\n      return _typeof(_resource[key]);\n    } else {\n      return null;\n    }\n  };\n\n  scope.isFilterSet = function (key) {\n    return scope.filters.filter(function (filter) {\n      return filter.name === key;\n    }).length > 0;\n  };\n\n  /*\r\n   *  Filters out empty filters. Means that we will not show filters that are half created.\r\n   */\n  scope.filterIsNotEmpty = function (item, index, array) {\n    return item.name !== '' && item.value !== null;\n  };\n\n  /*\r\n   *    View function that selects which control to show for this particular filter\r\n   *\r\n   *  @return {String} A string label identifying the type of input\r\n   */\n  scope.getControlForFilter = function (filter) {\n\n    if (filter.name === 'type') {\n      return 'productTypeSelector';\n    }\n\n    if (filter.name === 'category_id') {\n      return 'categorySelectorInput';\n    }\n\n    if (filter.name === 'brand_id') {\n      return 'brandSelectorInput';\n    }\n\n    if (inferFilterType(filter.name) === 'number') {\n      return 'numberInput';\n    }\n\n    if (inferFilterType(filter.name) === 'string') {\n      return 'textInput';\n    }\n\n    if (inferFilterType(filter.name) === 'boolean') {\n      return 'booleanInput';\n    }\n\n    // else\n\n    return 'disabledInput';\n  };\n\n  /*\r\n   *  Adds an empty filter\r\n   */\n  scope.addFilter = function (filter) {\n    if (!filter) scope.filters.push({\n      name: '',\n      value: null\n    });else scope.filters.push(filter);\n  };\n\n  scope.saveNewFilterAndApply = function () {\n    scope.addFilter(scope.newFilter);\n    console.log(\"Saving this new filters\", scope.newFilter);\n    scope.applyFilters();\n    scope.newFilter = {\n      name: '',\n      value: null\n    };\n    $('#singleFilterModal').modal('hide');\n  };\n\n  scope.humanReadableFilterValue = function (filter) {\n\n    if ('object' === _typeof(filter.value)) {\n      if (filter.value.hasOwnProperty('$regex')) {\n        return filter.value.$regex;\n      }\n    }\n\n    if ('type' === filter.name) {\n      return filter.value.replace(/\\_/g, \" \");\n    }\n\n    // If we don't know how to handle it:\n    return filter.value;\n  };\n\n  /*\r\n   *  @param {Number} index The position of the filter to remove\r\n   *  @param {Boolean} applyToQuery Wether to call applyFilters() or not\r\n   */\n  scope.removeFilter = function (index, applyToQuery) {\n    if (typeof applyToQuery === 'undefined') {\n      applyToQuery = true;\n    }\n\n    var filterToRemove = scope.filters.splice(index, 1);\n\n    filterToRemove = filterToRemove[0];\n\n    delete scope.ctrl.query[filterToRemove.name];\n\n    if (applyToQuery === true) {\n      scope.applyFilters();\n    }\n  };\n\n  scope.applyFilters = function () {\n    scope.filters.forEach(function (filter) {\n      scope.ctrl.query[filter.name] = filter.value;\n    });\n\n    ctrl.onUpdate({\n      filters: scope.filters\n    });\n    $('#filtersModal').modal('hide');\n\n    //if (scope.persistFilters === true)\n    StormConfiguration.set('products_list_active_filters', scope.filters);\n  };\n}]);\napp.component('activeFilters', {\n  templateUrl: '/modules/data_dashboard/src/components/activeFilters/activeFilters.component.html',\n  controller: 'ActiveFiltersController',\n  bindings: {\n    query: '=', // We need access to the controller's query\n    filterAttributes: '=', // We need a list of property names to be sued as filters\n    onUpdate: '&', // THis will notify the controller that filters changed\n    resources: '=' // We need the list of resources to be able to infer which filters to display\n  }\n});"
    },
    {
      "id": 4,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\components\\addProductsCard\\addProductsCard.component.js",
      "name": "./public/modules/data_dashboard/src/components/addProductsCard/addProductsCard.component.js",
      "index": 4,
      "index2": 2,
      "size": 2671,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./components/addProductsCard/addProductsCard.component.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\n/*\r\n* @attribute overrides {object} set of overrides to apply\r\n          when querying marketcloud\r\n*\r\n*/\napp.controller('addProductsCardController', ['$scope', '$element', '$attrs', '$marketcloud', function (scope, $element, $attrs, $marketcloud) {\n\n  this.$onInit = function () {\n    scope.ctrl = this;\n\n    scope.config = this.config || {\n      additionalFields: [\n        // {name : \"quantity\", type : \"number\", required : true}\n      ]\n    };\n\n    scope.swapArrayItemPosition = function (sourceIndex, destinationIndex, arr) {\n      if (!arr[sourceIndex] || !arr[destinationIndex]) return;\n\n      var temp = angular.copy(arr[destinationIndex]);\n      arr[destinationIndex] = arr[sourceIndex];\n      arr[sourceIndex] = temp;\n    };\n\n    // Flag to show/hide the list\n    scope.showTheList = false;\n\n    // Object to hold the query data\n    scope.query = {};\n\n    // Here we save the products we get from marketcloud\n    scope.products = [];\n  };\n\n  scope.prepareRegex = function () {\n    scope.query.name.$options = 'i';\n  };\n\n  // Shows the list of choices\n  scope.showList = function () {\n    scope.showTheList = true;\n  };\n\n  // Hides the list of choices\n  scope.hideList = function () {\n    window.setTimeout(function () {\n      scope.showTheList = false;\n      scope.$apply();\n    }, 200);\n  };\n\n  /*\r\n   *  Pushes an item into the array of selected items and resets the search regex\r\n   */\n  scope.addProduct = function (product) {\n    scope.ctrl.items.push(product);\n    scope.query.name.$regex = '';\n    scope.products = [];\n  };\n\n  scope.removeProduct = function (i) {\n    scope.ctrl.items.splice(i, 1);\n  };\n  scope.loadProducts = function (query) {\n    query = query || scope.query;\n\n    // We only want to fetch simple products here\n    // TODO, this should be an attribute\n    if (scope.ctrl.overrides) {\n      for (var k in scope.ctrl.overrides) {\n        query[k] = scope.ctrl.overrides[k];\n      }\n    }\n\n    $marketcloud.products.list(query).then(function (response) {\n      scope.products = response.data.data.filter(function (item) {\n        return scope.ctrl.items.map(function (i) {\n          return i.id;\n        }).indexOf(item.id) < 0;\n      });\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred. Please try again', 1.5);\n    });\n  };\n}]);\napp.component('addProductsCard', {\n  templateUrl: '/modules/data_dashboard/src/components/addProductsCard/addProductsCard.component.html',\n  controller: 'addProductsCardController',\n  bindings: {\n    items: '=',\n    config: '=',\n    overrides: '=', // overrides to the query\n    title: '@',\n    onUpdate: '&'\n  }\n});"
    },
    {
      "id": 5,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\components\\addressForm\\addressForm.component.js",
      "name": "./public/modules/data_dashboard/src/components/addressForm/addressForm.component.js",
      "index": 5,
      "index2": 3,
      "size": 605,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./components/addressForm/addressForm.component.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.controller('AddressFormController', ['$scope', 'Countries', function ($scope, Countries) {\n\n  this.$onInit = function () {\n\n    // Initializing the array of countries taken from the service\n    $scope.countries = Countries;\n\n    // Linking the local address object to the parent scope object\n    $scope.address = this.address;\n  };\n}]);\n\napp.component('addressForm', {\n  templateUrl: '/modules/data_dashboard/src/components/addressForm/addressForm.component.html',\n  controller: 'AddressFormController',\n  bindings: {\n    address: '='\n  }\n});"
    },
    {
      "id": 6,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\components\\application\\application.component.js",
      "name": "./public/modules/data_dashboard/src/components/application/application.component.js",
      "index": 6,
      "index2": 4,
      "size": 772,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./components/application/application.component.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\nvar ApplicationController = ['$scope', function (scope) {\n\n  /*\r\n  * Due to https://github.com/angular/angular.js/commit/bcd0d4d896d0dfdd988ff4f849c1d40366125858\r\n  *\r\n  * From AngularJS >= 1.6.x pre-assigning bindings on controller instances is disabled by default.\r\n  */\n  this.$onInit = function () {\n    scope.application = this.applicationData;\n  };\n\n  scope.percentage = function (app) {\n    var v = app.api_calls_quota_left;\n    var t = app.api_calls_quota_max;\n    return v / t * 100;\n  };\n}];\n\napp.component('application', {\n  templateUrl: '/modules/data_dashboard/src/components/application/application.component.html',\n  controller: ApplicationController,\n  bindings: {\n    applicationData: '='\n  }\n});"
    },
    {
      "id": 7,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\components\\autocomplete\\autocomplete.component.js",
      "name": "./public/modules/data_dashboard/src/components/autocomplete/autocomplete.component.js",
      "index": 7,
      "index2": 5,
      "size": 3492,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./components/autocomplete/autocomplete.component.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.controller('autocompleteController', ['$scope', '$element', '$attrs', function (scope, $element, $attrs) {\n  // Since angular 1.6 component initialization must be inside the $onInit call\n  // to allow the use of ES6 classes as component controllers\n  this.$onInit = function () {\n    scope.ctrl = this;\n\n    // The list of values\n    scope.ctrl.suggestionList = angular.copy(scope.ctrl.items);\n\n    // Flag to toggle the suggestion list\n    scope.showTheList = false;\n\n    // Here ww handle the initial selection if the model already has a value\n    var initiallySelected = scope.ctrl.suggestionList.filter(function (item) {\n      if (item === scope.ctrl.myModel) return true;\n      if (item[scope.ctrl.value] === scope.ctrl.myModel) return true;\n\n      return false;\n    });\n\n    if (initiallySelected.length > 0) {\n\n      scope.selectItem(initiallySelected[0]);\n    }\n  };\n\n  /*\r\n   * Filters the suggestion list by query. This updates the suggestion list showing\r\n   * only those results that are matching the query.\r\n   */\n  scope.filter = function () {\n\n    var toMatch = scope.ctrl.selectedLabel.toLowerCase();\n\n    scope.ctrl.items = scope.ctrl.suggestionList.filter(function (i) {\n\n      // If the value attribute is provided we use it to look for a particular property\n      if (scope.ctrl.value) {\n\n        return i[scope.ctrl.value].toLowerCase().indexOf(toMatch) > -1;\n      } else {\n\n        return i.toLowerCase().indexOf(toMatch) > -1;\n      }\n    });\n  };\n\n  /*\r\n   * Makes the suggestion list visible\r\n   */\n  scope.showList = function () {\n    scope.showTheList = true;\n  };\n\n  /*\r\n   * Makes the suggestion list invisible\r\n   */\n  scope.hideList = function () {\n    window.setTimeout(function () {\n      scope.showTheList = false;\n      scope.$apply();\n    }, 200);\n  };\n\n  scope.handleNewItems = function () {\n    if (scope.ctrl.allowNewElements) {\n\n      scope.ctrl.myModel = scope.ctrl.selectedLabel;\n      scope.hideList();\n    }\n  };\n\n  /**\r\n   * Selects the clicked item as a chosen value\r\n   */\n  scope.selectItem = function (item) {\n\n    console.log(\"selectItem called on \", item);\n\n    // If the component has a label attribute, we want to show that label\n    // insteand of the actually chosen value\n    if (scope.ctrl.label) {\n      scope.ctrl.selectedLabel = item[scope.ctrl.label];\n    } else {\n      // Otherwise we want to select the actual value.\n      scope.ctrl.selectedLabel = item;\n    }\n\n    if (scope.ctrl.value) {\n      scope.ctrl.myModel = item[scope.ctrl.value];\n    } else {\n      scope.ctrl.myModel = item;\n    }\n\n    // update the query to reflect the model value\n    // scope.ctrl.myModel = scope.ctrl.myModel;\n\n    // After the choice, we hide the list\n    scope.showTheList = false;\n\n    // Fucking AngularJS ng-changes triggers before the update cycle is complete\n    window.setTimeout(scope.ctrl.onSelected, 1);\n  };\n}]);\napp.component('autocomplete', {\n  templateUrl: '/modules/data_dashboard/src/components/autocomplete/autocomplete.component.html',\n  controller: 'autocompleteController',\n  bindings: {\n    allowNewElements: '@',\n    myModel: '=', // The model\n    items: '=', // The source for autocomplete suggestions\n    onSelected: '&', // Hook called when an item is selected\n    label: '@', // The property to use as a label for suggestions,\n    value: '@', // The property to use as a value for suggestions,\n    inputClasses: '@' // Classes to add to the input\n  }\n});"
    },
    {
      "id": 8,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\components\\backButton\\backButton.component.js",
      "name": "./public/modules/data_dashboard/src/components/backButton/backButton.component.js",
      "index": 8,
      "index2": 6,
      "size": 456,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./components/backButton/backButton.component.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.controller('BackButtonController', ['$scope', '$element', '$attrs', function (scope, $element, $attrs) {\n  scope.goBack = function () {\n    history.back();\n  };\n}]);\n\napp.component('backButton', {\n  template: '<a class=\"link pull-right\" ng-click=\"goBack()\"><i class=\"fa fa-long-arrow-left\"></i> <span class=\"xs-hidden\">Back</span></a>',\n  controller: 'BackButtonController',\n  bindings: {}\n});"
    },
    {
      "id": 9,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\components\\brandsSelector\\brandsSelector.component.js",
      "name": "./public/modules/data_dashboard/src/components/brandsSelector/brandsSelector.component.js",
      "index": 9,
      "index2": 7,
      "size": 2810,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./components/brandsSelector/brandsSelector.component.js"
        }
      ],
      "source": "'use strict';\n\nangular.module('DataDashboard').controller('BrandsSelectorController', BrandsSelectorController).component('brandsSelector', {\n  templateUrl: '/modules/data_dashboard/src/components/brandsSelector/brandsSelector.component.html',\n  controller: 'BrandsSelectorController',\n  bindings: {\n    brand: '=',\n    enableCreateBrand: '@',\n    onError: '&'\n  }\n});\n\nBrandsSelectorController.$inject = ['$marketcloud', '$scope', '$element'];\n\nfunction BrandsSelectorController($marketcloud, scope, $elem) {\n  var ctrl = null;\n\n  this.$onInit = function () {\n    ctrl = this;\n    scope.ctrl = ctrl;\n\n    scope.newBrand = {};\n\n    ctrl.modal = $($elem).find('.modal')[0];\n\n    scope.enableCreateBrand = this.enableCreateBrand || true;\n\n    scope.ctrl.query = {\n      name: {\n        $regex: '',\n        $options: 'i'\n      }\n    };\n  };\n\n  scope.showModal = function () {\n    $(ctrl.modal).modal('show');\n  };\n\n  scope.saveBrand = function () {\n    $marketcloud.brands.save(scope.newBrand).then(function (response) {\n      scope.ctrl.brands.push(response.data.data);\n      scope.newBrand = {};\n      scope.ctrl.brand = response.data.data.id;\n      return $marketcloud.brands.list();\n    }).then(function (response) {\n      scope.ctrl.brands = response.data.data;\n      $(ctrl.modal).modal('hide');\n    }).catch(function (response) {\n      $(ctrl.modal).hide();\n      notie.alert(3, 'An error has occurred. Brand not saved', 1);\n    });\n  };\n\n  scope.setSelectedBrand = function (brand) {\n    scope.brand = brand;\n    scope.ctrl.brand = brand.id;\n    scope.ctrl.onChange({\n      brand: brand.id\n    });\n  };\n\n  // Uses the input box in the component to filter the wanted brand\n  scope.filterBrands = function () {\n    $marketcloud.brands.list(scope.ctrl.query).then(function (response) {\n      ctrl.brands = response.data.data;\n    }).catch(function (error) {\n      notie.alert(2, 'An error has occurred while fetching brands, please retry.', 2);\n    });\n  };\n\n  function initializeData() {\n    // Initial fetch of brands\n    $marketcloud.brands.list().then(function (response) {\n      ctrl.brands = response.data.data;\n\n      var currentBrand = null;\n      // Look for the currently selected brand, if any\n      ctrl.brands.forEach(function (brand) {\n        if (brand.id === scope.ctrl.brand) {\n          currentBrand = brand;\n        }\n      });\n\n      // If found, we initialize the current brand\n      if (currentBrand !== null) {\n        scope.brand = currentBrand;\n      } else {\n        // Otherwise we must fetch it\n        return $marketcloud.brands.getById(scope.ctrl.brand);\n      }\n    }).then(function (response) {\n      if (response.data.data) {\n        scope.brand = response.data.data;\n      }\n    }).catch(function (response) {\n      ctrl.onError(response);\n    });\n  }\n\n  initializeData();\n}"
    },
    {
      "id": 10,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\components\\categoriesSelector\\categoriesSelector.component.js",
      "name": "./public/modules/data_dashboard/src/components/categoriesSelector/categoriesSelector.component.js",
      "index": 10,
      "index2": 8,
      "size": 3848,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./components/categoriesSelector/categoriesSelector.component.js"
        }
      ],
      "source": "'use strict';\n\nangular.module('DataDashboard').controller('CategoriesSelectorController', CategoriesSelectorController).component('categoriesSelector', {\n  templateUrl: '/modules/data_dashboard/src/components/categoriesSelector/categoriesSelector.component.html',\n  controller: 'CategoriesSelectorController',\n  bindings: {\n    enableCreateCategory: '@',\n    category: '=',\n    onError: '&',\n    onChange: '&',\n    clearInput: '&'\n  }\n});\n\nCategoriesSelectorController.$inject = ['$marketcloud', '$scope', '$element'];\n\nfunction CategoriesSelectorController($marketcloud, scope, $elem) {\n\n  var ctrl = null;\n  this.$onInit = function () {\n    ctrl = this;\n    scope.ctrl = this;\n    scope.newCategory = {};\n    ctrl.modal = $($elem).find('.modal')[0];\n\n    scope.clearInput = ctrl.clearInput || false;\n    scope.enableCreateCategory = ctrl.enableCreateCategory || true;\n\n    scope.ctrl.query = {\n      name: {\n        $regex: \"\",\n        $options: 'i'\n      }\n    };\n  };\n\n  scope.showModal = function () {\n    $(ctrl.modal).modal('show');\n  };\n\n  function initializeData() {\n    // Initial fetch of categories\n    $marketcloud.categories.list().then(function (response) {\n      ctrl.categories = response.data.data;\n\n      var currentCategory = null;\n      // Look for the currently selected category, if any\n      ctrl.categories.forEach(function (category) {\n        if (category.id === scope.ctrl.category) currentCategory = category;\n      });\n\n      // If found, we initialize the current category\n      if (null !== currentCategory && !scope.clearInput) {\n        scope.category = currentCategory;\n      } else {\n        // Otherwise we must fetch it\n        return $marketcloud.categories.getById(scope.ctrl.category);\n      }\n    }).then(function (response) {\n      if (response.data.data && !scope.clearInput) {\n        scope.category = response.data.data;\n      }\n    }).catch(function (response) {\n      ctrl.onError(response);\n    });\n  }\n\n  initializeData();\n\n  scope.setSelectedCategory = function (category) {\n    scope.category = category;\n    scope.ctrl.category = category.id;\n    scope.ctrl.onChange({\n      category: category.id\n    });\n\n    /**\r\n     * FIXME: Handle multiple or single categories per product\r\n     * Currently, for sake of Epoteka integration we are saving multiple categories as a string\r\n     * e.g. 1523,6523,3123\r\n     * In future, this should be handled in an array!!!!\r\n     * FIXME:\r\n     */\n\n    console.log(scope.clearInput);\n    if (scope.clearInput) {\n      delete scope.category;\n    }\n\n    /**\r\n     * Emiting the selected category to the parent component and handling it there\r\n     * TODO: Transfer entire logic to categories selector component\r\n     */\n\n    scope.$emit('selectedCategory', {\n      text: category.path,\n      category_id: category.id\n    });\n  };\n\n  // Uses the input box in the component to filter the wanted category\n  scope.filterCategories = function () {\n    $marketcloud.categories.list(scope.ctrl.query).then(function (response) {\n      ctrl.categories = response.data.data;\n    }).catch(function (error) {\n      notie.alert(2, 'An error has occurred while fetching categories, please retry.', 2);\n    });\n  };\n\n  // Saves a new category\n  scope.saveCategory = function () {\n    $marketcloud.categories.save(scope.newCategory).then(function (response) {\n      ctrl.categories.push(response.data.data);\n      scope.newCategory = {};\n\n      scope.$emit('selectedCategory', {\n        text: response.data.data.path,\n        category_id: response.data.data.id\n      });\n      return $marketcloud.categories.list();\n    }).then(function (response) {\n      ctrl.categories = response.data.data;\n      $(ctrl.modal).modal('hide');\n    }).catch(function (response) {\n      $(ctrl.modal).hide();\n      notie.alert(3, 'An error has occurred. Category not saved', 1);\n    });\n  };\n}"
    },
    {
      "id": 11,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\components\\customAttributes\\customAttributes.component.js",
      "name": "./public/modules/data_dashboard/src/components/customAttributes/customAttributes.component.js",
      "index": 11,
      "index2": 9,
      "size": 7949,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./components/customAttributes/customAttributes.component.js"
        }
      ],
      "source": "'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar app = angular.module('DataDashboard');\napp.controller('CustomAttributesFormController', ['$scope', '$element', '$attrs', 'moment', function (scope, $element, $attrs, $moment) {\n  this.$onInit = function () {\n    scope.ctrl = this;\n    scope.inObject = false;\n    scope.btnText = 'Add';\n\n    scope.resource = this.resource;\n\n    scope.properties = this.properties || {};\n    scope.type = this.type || {};\n\n    // Keeping a reference for nesting\n    scope.rootObject = scope.properties;\n\n    scope.newAttribute = {\n      name: null,\n      value: null,\n      type: null\n\n      // Initializing propertyTypes object\n    };computePropertiesTypes();\n\n    scope.resetNewAttributeValue = function () {\n      switch (scope.newAttribute.type) {\n        case 'string':\n          scope.newAttribute.value = '';\n          return;\n        case 'number':\n          scope.newAttribute.value = 0;\n          return;\n        case 'boolean':\n          scope.newAttribute.value = true;\n      }\n    };\n\n    scope.newAttribute.type = 'string';\n\n    scope.availableTypes = [{\n      name: 'String',\n      value: 'string'\n    }, {\n      name: 'Number',\n      value: 'number'\n    }, {\n      name: 'Boolean',\n      value: 'boolean'\n    }, {\n      name: 'RichText',\n      value: 'richtext'\n    }, {\n      name: 'URL/Media',\n      value: 'URL'\n    }, {\n      name: 'List',\n      value: 'list'\n    }];\n  };\n\n  scope.containerForNewMediaAttribute = [];\n\n  scope.containersForExistingMediaAttributes = {};\n\n  scope.$watchCollection('containerForNewMediaAttribute', function () {\n    scope.newAttribute.value = scope.containerForNewMediaAttribute[scope.containerForNewMediaAttribute.length - 1];\n  });\n\n  scope.propertiesTypes = {};\n\n  function computePropertiesTypes() {\n    for (var k in scope.properties) {\n      scope.propertiesTypes[k] = _typeof(scope.properties[k]);\n\n      if (scope.type[k] === 'list') {\n        scope.properties[k] = scope.properties[k].split(',').map(function (item) {\n          return item.trim();\n        });\n        scope.propertiesTypes[k] = 'object';\n      }\n\n      if (scope.isNull(k) === true) {\n        scope.propertiesTypes[k] = 'null';\n      }\n\n      if (scope.isRichText(scope.properties[k]) === true) {\n        scope.propertiesTypes[k] = 'richtext';\n      }\n\n      if (scope.isURL(scope.properties[k]) === true) {\n        scope.propertiesTypes[k] = 'URL';\n        scope.containersForExistingMediaAttributes[k] = [scope.properties[k]];\n        scope.$watchCollection('containersForExistingMediaAttributes.' + k, function () {\n          // If the value is null, it means that we just deleted it, so we don't have to re-update it\n          if (scope.properties[k] === null) {\n            return;\n          }\n          if (scope.containersForExistingMediaAttributes[k]) {\n            scope.properties[k] = scope.containersForExistingMediaAttributes[k][scope.containersForExistingMediaAttributes[k].length - 1];\n          }\n        });\n      }\n    }\n  }\n\n  scope.isBoolean = function (d) {\n    return typeof d === 'boolean';\n  };\n\n  scope.isString = function (d) {\n    return typeof d === 'string' && !scope.isRichText(d) && !scope.isURL(d);\n  };\n\n  scope.isNull = function (key) {\n    return scope.properties[key] === null;\n  };\n\n  scope.isURL = function (d) {\n    if (!d || typeof d.indexOf !== 'function') {\n      return false;\n    }\n    return d.indexOf('http://') === 0 || d.indexOf('https://') === 0;\n  };\n\n  scope.isRichText = function (str) {\n    if (typeof str !== 'string') {\n      return false;\n    }\n\n    var doc = new DOMParser().parseFromString(str, 'text/html');\n    return [].slice.call(doc.body.childNodes).some(function (node) {\n      return node.nodeType === 1;\n    });\n  };\n\n  scope.isNumber = function (d) {\n    return typeof d === 'number';\n  };\n\n  scope.isObject = function (d) {\n    if (d === null) {\n      return false;\n    }\n\n    return (typeof d === 'undefined' ? 'undefined' : _typeof(d)) === 'object';\n  };\n\n  scope.typeof = function (o) {\n    return typeof o === 'undefined' ? 'undefined' : _typeof(o);\n  };\n\n  scope.hasCustomProperties = function () {\n    return Object.keys(scope.properties).length > 0;\n  };\n\n  scope.addCustomProperty = function () {\n    scope.errorMessage = null;\n    if (scope.resource.hasOwnProperty(scope.newAttribute.name)) {\n      // scope.productError = \"CUSTOM_PROPERTY_NAME_ALREADY_EXISTS\";\n      scope.errorMessage = 'Name already exists';\n    } else if (scope.newAttribute.name !== 0 && !scope.newAttribute.name) {\n      scope.errorMessage = 'Please, enter a valid property name';\n    } else if (scope.inObject && scope.properties.indexOf(scope.newAttribute.value) !== -1) {\n      scope.errorMessage = 'Duplicated value';\n    } else {\n      scope.properties[scope.newAttribute.name] = scope.newAttribute.value;\n      scope.type[scope.newAttribute.name] = scope.newAttribute.type;\n\n      scope.newAttribute.value = null;\n      scope.newAttribute.name = null;\n\n      if (scope.inObject) {\n        scope.newAttribute.name = scope.properties.length;\n      }\n      scope.btnText = 'Add';\n      // Re-calculating types\n      computePropertiesTypes();\n    }\n  };\n\n  scope.deleteCustomProperty = function (propertyName) {\n    // delete scope.properties[propertyName]\n\n    scope.properties[propertyName] = null;\n    // Re-calculating types\n    if (scope.inObject) {\n      scope.properties.splice(propertyName, 1);\n      scope.newAttribute.name = scope.properties.length;\n    }\n    computePropertiesTypes();\n  };\n\n  scope.editCustomProperty = function (propertyName) {\n    scope.newAttribute.name = propertyName;\n    scope.newAttribute.value = scope.properties[propertyName];\n    scope.newAttribute.type = scope.propertiesTypes[propertyName];\n    scope.btnText = 'edit';\n  };\n\n  scope.propertiesStack = [];\n\n  // Goes inside the properties object to show nested properties\n  scope.showRecursiveObjectEditor = function (propertyName) {\n    // Pushing the new level into the stack\n    scope.propertiesStack.push(propertyName);\n\n    // Getting the pointer to the root of the object\n    scope.properties = scope.rootObject;\n\n    // Digging into the object's nested properties to find the wanted\n    for (var i = 0; i < scope.propertiesStack.length; i++) {\n      if (scope.properties.hasOwnProperty(scope.propertiesStack[i])) {\n        scope.properties = scope.properties[scope.propertiesStack[i]];\n      } else {\n        break;\n      }\n    }\n\n    scope.newAttribute.name = scope.properties.length;\n    scope.newAttribute.type = 'string';\n    scope.inObject = true;\n\n    // Recalculating the propertiesTypes object for the current properties object\n    computePropertiesTypes();\n  };\n  // Goes to a specific nested level\n  scope.goToNestedStep = function (index) {\n    // Getting the pointer to the root of the object\n    scope.properties = scope.rootObject;\n\n    if (index === 0) {\n      scope.inObject = false;\n      scope.newAttribute.name = null;\n      scope.btnText = 'Add';\n    }\n\n    // Adjusting the stack to the wanted level\n    scope.propertiesStack = scope.propertiesStack.slice(0, index);\n\n    for (var i = 0; i < index; i++) {\n      if (scope.properties.hasOwnProperty(scope.propertiesStack[i])) {\n        scope.properties = scope.properties[scope.propertiesStack[i]];\n      } else {\n        break;\n      }\n    }\n    // Re-calculating types\n    computePropertiesTypes();\n  };\n}]);\n\napp.component('customAttributesForm', {\n  templateUrl: '/modules/data_dashboard/src/components/customAttributes/customAttributes.component.html',\n  controller: 'CustomAttributesFormController',\n  bindings: {\n    properties: '=',\n    resource: '=',\n    onError: '&',\n    disableAdd: '=',\n    removeCardFrame: '@?'\n  }\n});"
    },
    {
      "id": 12,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\components\\dashboardBreadcrumb\\dashboardBreadcrumb.component.js",
      "name": "./public/modules/data_dashboard/src/components/dashboardBreadcrumb/dashboardBreadcrumb.component.js",
      "index": 12,
      "index2": 10,
      "size": 466,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./components/dashboardBreadcrumb/dashboardBreadcrumb.component.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.controller('DashboardBreadcrumbController', ['$scope', '$element', '$attrs', function (scope, $element, $attrs) {\n  scope.goBack = function () {\n    history.back();\n  };\n}]);\n\napp.component('dashboardBreadcrumb', {\n  template: '<a href=\"#\" class=\"link pull-right\"><i class=\"fa fa-long-arrow-left\"></i> Back</a>',\n  controller: 'DashboardBreadcrumbController',\n  bindings: {\n    resourceName: '='\n  }\n});"
    },
    {
      "id": 13,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\components\\dashboardSectionNavbar\\dashboardSectionNavbar.component.js",
      "name": "./public/modules/data_dashboard/src/components/dashboardSectionNavbar/dashboardSectionNavbar.component.js",
      "index": 13,
      "index2": 11,
      "size": 13,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./components/dashboardSectionNavbar/dashboardSectionNavbar.component.js"
        }
      ],
      "source": "\"use strict\";"
    },
    {
      "id": 14,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\components\\dataTable\\dataTable.component.js",
      "name": "./public/modules/data_dashboard/src/components/dataTable/dataTable.component.js",
      "index": 14,
      "index2": 12,
      "size": 501,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./components/dataTable/dataTable.component.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.controller('McDataTableController', ['$scope', function (scope) {\n  this.$onInit = function () {\n    var ctrl = this;\n    scope.ctrl = ctrl;\n\n    scope.columns = ctrl.columns || Object.keys(scope.ctrl.data[0]);\n  };\n}]);\n\napp.component('mcDataTable', {\n  templateUrl: '/modules/data_dashboard/src/components/dataTable/dataTable.component.html',\n  controller: 'McDataTableController',\n  bindings: {\n    data: '=',\n    columns: '=?'\n  }\n});"
    },
    {
      "id": 15,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\components\\errorMessages\\errorMessages.component.js",
      "name": "./public/modules/data_dashboard/src/components/errorMessages/errorMessages.component.js",
      "index": 15,
      "index2": 13,
      "size": 1477,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./components/errorMessages/errorMessages.component.js"
        }
      ],
      "source": "'use strict';\n\nangular.module('DataDashboard').controller('ErrorMessagesController', ErrorMessagesController).component('errorMessages', {\n  templateUrl: '/modules/data_dashboard/src/components/errorMessages/errorMessages.component.html',\n  controller: 'ErrorMessagesController',\n  bindings: {\n    validation: '<',\n    propertyName: '@',\n    modelName: '@',\n    onError: '&',\n\n    messageMin: '@',\n    messageMax: '@',\n    messageRequired: '@',\n    messageType: '@'\n  }\n});\n\nErrorMessagesController.$inject = ['$scope', '$models'];\n\nfunction ErrorMessagesController(scope, Models) {\n  if (!Models) {\n    throw new Error('ErrorMessages Component requires Models factory. errorMessages.component.js');\n  }\n\n  var ctrl = null;\n\n  this.$onInit = function () {\n    ctrl = this;\n    scope.ctrl = ctrl;\n\n    if (ctrl.modelName) {\n      if (!Models.hasOwnProperty(ctrl.modelName)) {\n        throw new Error('Cannot find model with name ' + ctrl.modelName);\n      }\n\n      ctrl.schema = angular.copy(Models[ctrl.modelName].schema);\n      if (!ctrl.schema) {\n        console.log(\"Lo schema non ha il mio model \" + ctrl.modelName, Models);\n      }\n    }\n  };\n\n  this.$onChanges = function (changes) {\n    // var validation = changes.validation.currentValue;\n\n    // if (validation.invalidPropertyName === this.propertyName)\n    //     $('html, body').animate({\n    //       scrollTop: $(\"[property-name='\"+validation.invalidPropertyName+\"']\").offset().top - 200\n    //     }, 500);\n  };\n}"
    },
    {
      "id": 16,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\components\\flagIcon\\flagIcon.component.js",
      "name": "./public/modules/data_dashboard/src/components/flagIcon/flagIcon.component.js",
      "index": 16,
      "index2": 14,
      "size": 731,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./components/flagIcon/flagIcon.component.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.controller('FlagIconController', ['$scope', 'Countries', function (scope, countries) {\n  var ctrl = this;\n\n  this.$onInit = function () {\n    var countryObject = countries.find(function (item) {\n      return item.name.toLowerCase() === ctrl.country.toLowerCase();\n    });\n\n    if (!countryObject) ctrl.countryCode = ctrl.country;else ctrl.countryCode = countryObject.code;\n  };\n\n  scope.getFlagClassName = function () {\n    return 'flag-icon-' + ctrl.countryCode.toLowerCase();\n  };\n}]);\n\napp.component('flagIcon', {\n  template: '<span class=\"flag-icon\" ng-class=\"getFlagClassName()\"></span>',\n  controller: 'FlagIconController',\n  bindings: {\n    country: '@'\n  }\n});"
    },
    {
      "id": 17,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\components\\imageSelector\\imageSelector.component.js",
      "name": "./public/modules/data_dashboard/src/components/imageSelector/imageSelector.component.js",
      "index": 17,
      "index2": 15,
      "size": 7723,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./components/imageSelector/imageSelector.component.js"
        }
      ],
      "source": "'use strict';\n\nvar ImageSelectorControllerDependencies = ['$scope', 'FileUploader', '$http', '$element', '$attrs', '$exceptionHandler', '$marketcloud'];\n\nvar ImageSelectorController = function ImageSelectorController(scope, FileUploader, $http, $element, $attrs, $exceptionHandler, $marketcloud) {\n  var ctrl = null;\n  this.$onInit = function () {\n    // Reference to the controller\n    ctrl = this;\n\n    // List of image urls\n    ctrl.images = ctrl.images || [];\n\n    // List of image objects\n    // ctrl.media = ctrl.media || [];\n\n    scope.closeOnUploadComplete = $attrs.closeOnUploadComplete;\n\n    /* Component configuration from attributes */\n    // The classes used to style the button\n    scope.buttonClass = $attrs.buttonClass;\n\n    // The text displayed on the button\n    scope.buttonText = $attrs.buttonText;\n\n    // The icon displayed on the button\n    scope.buttonIcon = $attrs.buttonIcon || null;\n\n    var tabs = $attrs.tabs || 'library,from_disk,from_url';\n\n    // This will hold an array of tab names\n    // The component will show only those tabs\n    // whose name is in this array\n    //\n    // The first tab will be the active one.\n    // TODO to improve this, we can add an attribute \"activeTab\"\n\n    scope.tabs = tabs.split(',');\n\n    // This is the name of the parent function which will return a reference to the image container\n    // scope.getImagesContainer = $attrs.getImagesContainer || 'getImagesContainer';\n  };\n\n  /* Uploader configuration */\n  scope.uploader = new FileUploader({\n    url: window.API_BASE_URL + '/media',\n    arrayKey: '',\n    headers: {\n      'Authorization': window.public_key + ':' + window.token\n    },\n    filters: []\n  });\n\n  // When closeDialog is called from within the component\n  // we notify the parent component/controller by calling the on-close-dialog\n  // callback\n  scope.closeDialog = function () {\n    ctrl.onCloseDialog();\n  };\n\n  scope.openDialog = function () {\n    ctrl.onOpenDialog();\n  };\n\n  scope.uploadImages = function () {\n    ctrl.onUploadImages();\n  };\n\n  scope.image = {};\n  scope.media_files = [];\n  scope.loadingMediaFiles = false;\n\n  // Used to keep filters and pagination state\n  scope.query = {};\n\n  // Initializing the pagination object to null\n  // This allows for convenient check on view pagination === null => dont show pagination\n  scope.pagination = null;\n\n  scope.loadMedias = function (query) {\n    scope.media_files = [];\n    scope.loadingMediaFiles = true;\n    /* $http({\r\n        method: 'GET',\r\n        url: window.API_BASE_URL + '/media',\r\n        headers: {\r\n          Authorization: window.public_key\r\n        }\r\n      }) */\n    $marketcloud.media.list(query || {}).then(function (response) {\n      scope.loadingMediaFiles = false;\n      scope.media_files = response.data.data;\n\n      scope.pagination = {\n        currentPage: response.data.page,\n        numberOfPages: response.data.pages,\n        nextPage: response.data._links.next || null,\n        previousPage: response.data._links.prev || null,\n        count: response.data.count\n      };\n    }).catch(function (response) {\n      scope.loadingMediaFiles = false;\n      notie.alert(2, 'An error has occurred, please retry.', 1.5);\n    });\n  };\n\n  scope.loadPage = function (page_number) {\n    scope.query.page = page_number;\n    return scope.loadData();\n  };\n\n  scope.loadMore = function () {\n    var pageToFetch = scope.media_files.length / 20 + 1;\n    $marketcloud.media.list({ page: pageToFetch }).then(function (response) {\n      scope.loadingMediaFiles = false;\n\n      scope.media_files = scope.media_files.concat(response.data.data);\n    }).catch(function (response) {\n      scope.loadingMediaFiles = false;\n      notie.alert(2, 'An error has occurred, please retry.', 1.5);\n    });\n  };\n  scope.loadData = function (query) {\n    scope.media_files = [];\n    scope.loadingMediaFiles = true;\n\n    if (!query) {\n      query = scope.query || {};\n    }\n\n    $marketcloud.media.list(query).then(function (response) {\n      scope.loadingMediaFiles = false;\n      scope.media_files = response.data.data;\n\n      scope.pagination = {\n        currentPage: response.data.page,\n        numberOfPages: response.data.pages,\n        nextPage: response.data._links.next || null,\n        previousPage: response.data._links.prev || null,\n        count: response.data.count\n      };\n    }).catch(function (response) {\n      scope.loadingMediaFiles = false;\n      notie.alert(3, 'An error has occurred. Please try again.', 1.5);\n    });\n  };\n\n  // Calling it right now because we want to initialize the media library\n  if (scope.media_files.length === 0) {\n    scope.loadMedias();\n  }\n\n  scope.showProgressBar = false;\n  scope.uploadingImages = false;\n\n  scope.howManySelectedMedia = function () {\n    return ctrl.images.length;\n  };\n\n  scope.addSelectedFromLibrary = function () {\n    var modal = $element.find('#ImageSelectorModal');\n    $(modal).modal('hide');\n    /* $('#ImageSelectorModal').modal('hide') */\n  };\n\n  scope.isImageSelected = function (image) {\n    return ctrl.images.indexOf(image.url) > -1;\n  };\n  scope.selectImage = function (image) {\n    ctrl.image = image.url;\n    scope.closeDialog();\n    var modal = $element.find('#ImageSelectorModal');\n    $(modal).modal('hide');\n  };\n\n  var removeImage = function removeImage(image) {\n    // var pos = scope.$parent[scope.getImagesContainer]().indexOf(image.url);\n    var pos = ctrl.images.indexOf(image.url);\n    if (pos > -1) {\n      ctrl.images.splice(pos, 1);\n    }\n\n    // Rimuovo il media\n    /* for (var i =0; i< ctrl.media.length;i++) {\r\n      if (ctrl.media[i].url === image.url)\r\n        ctrl.media.splice(i,1);\r\n    } */\n  };\n\n  scope.uploader.onCompleteAll = function () {\n    scope.loadMedias();\n    scope.showProgressBar = false;\n    scope.uploadingImages = false;\n    scope.uploader.clearQueue();\n\n    // Checking if we need to close the dialog\n    if (scope.closeOnUploadComplete === 'true') {\n      scope.closeDialog();\n      /* $('#ImageSelectorModal').modal('hide') */\n      var modal = $element.find('#ImageSelectorModal');\n      $(modal).modal('hide');\n    }\n\n    if (ctrl.onUploadComplete) {\n      ctrl.onUploadComplete();\n    }\n  };\n\n  scope.uploader.onProgressAll = function (progress) {};\n\n  scope.uploader.onErrorItem = function (item, response, status, headers) {\n    var err = new Error('Error uploading an item');\n    err.response = response;\n    err.status = status;\n    err.headers = headers;\n    $exceptionHandler(err);\n  };\n\n  scope.chooseFileFromStorage = function () {\n    $('#chooseFileFromStorageButton').trigger('click');\n  };\n\n  scope.uploadSelectedImages = function () {\n    scope.showProgressBar = true;\n    scope.uploadingImages = true;\n    scope.uploader.uploadAll();\n  };\n\n  scope.addImageFromUrl = function () {\n    ctrl.images.push(scope.image.url);\n    // scope.$parent[scope.getImagesContainer]().push(scope.image.url);\n    scope.image.url = null;\n  };\n\n  scope.showImageSelectorModal = function () {\n    /* $('#ImageSelectorModal').modal('show') */\n    var modal = $element.find('#ImageSelectorModal');\n    $(modal).modal('show');\n\n    // Notifying the parent\n    scope.openDialog();\n  };\n};\n\nImageSelectorController.$inject = ImageSelectorControllerDependencies;\n\nangular.module('DataDashboard').controller('ImageSelectorController', ImageSelectorController);\n\nangular.module('DataDashboard').component('imageSelector', {\n  templateUrl: '/modules/data_dashboard/src/components/imageSelector/imageSelector.component.html',\n  controller: 'ImageSelectorController',\n  bindings: {\n    onCloseDialog: '&',\n    onOpenDialog: '&',\n    onUploadComplete: '&',\n    image: '=?',\n    buttonClass: '@',\n    buttonIcon: '@',\n    buttonText: '@',\n    closeOnUploadComplete: '@'\n  }\n});"
    },
    {
      "id": 18,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\components\\imageThumbnail\\imageThumbnail.component.js",
      "name": "./public/modules/data_dashboard/src/components/imageThumbnail/imageThumbnail.component.js",
      "index": 18,
      "index2": 16,
      "size": 1124,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./components/imageThumbnail/imageThumbnail.component.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.controller('ImageThumbnailController', ['$scope', '$element', '$attrs', function (scope, $element, $attrs) {\n  this.$onInit = function () {\n    scope.ctrl = this;\n\n    // Boolean flag to control display/hide of the overlay\n    scope.ctrl.showOverlay = false;\n  };\n\n  scope.edit = function () {\n    scope.ctrl.onEdit();\n    $element.find('#editImageModal').modal('show');\n  };\n  scope.delete = function () {\n    scope.ctrl.onDelete();\n  };\n\n  scope.zoom = function () {\n    $element.find('#zoomImageModal').modal('show');\n  };\n\n  scope.showOverlay = function () {\n    scope.ctrl.showOverlay = true;\n  };\n  scope.hideOverlay = function () {\n    scope.ctrl.showOverlay = false;\n  };\n\n  scope.toggleEditImageModal = function (image) {\n    $element.find('#editImageModal').modal('hide');\n  };\n}]);\napp.component('imageThumbnail', {\n  templateUrl: '/modules/data_dashboard/src/components/imageThumbnail/imageThumbnail.component.html',\n  controller: 'ImageThumbnailController',\n  bindings: {\n    imageSrc: '=',\n    image: '=',\n    onEdit: '&',\n    onDelete: '&'\n  }\n});"
    },
    {
      "id": 19,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\components\\imagesCard\\imagesCard.component.js",
      "name": "./public/modules/data_dashboard/src/components/imagesCard/imagesCard.component.js",
      "index": 19,
      "index2": 17,
      "size": 1056,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./components/imagesCard/imagesCard.component.js"
        }
      ],
      "source": "'use strict';\n\nfunction ImagesCardController(scope) {\n  var ctrl = null;\n\n  this.$onInit = function () {\n    ctrl = this;\n    scope.ctrl = ctrl;\n  };\n\n  scope.swapArrayItemPosition = function moveItem(fromIndex, toIndex, target) {\n    var toMove = JSON.parse(JSON.stringify(target[fromIndex]));\n\n    // We ensure that the indexes exist\n    if (fromIndex > target.length - 1) return;\n\n    // First we remove the element to move\n    target.splice(fromIndex, 1);\n\n    // Then we add it to the desired position\n    target.splice(toIndex, 0, toMove);\n  };\n\n  scope.removeImage = function (i) {\n    var removed = scope.ctrl.items.splice(i, 1);\n    scope.ctrl.onRemove(removed[0]);\n  };\n}\n\nImagesCardController.$inject = ['$scope'];\n\nangular.module('DataDashboard').controller('ImagesCardController', ImagesCardController).component('imagesCard', {\n  templateUrl: '/modules/data_dashboard/src/components/imagesCard/imagesCard.component.html',\n  controller: 'ImagesCardController',\n  bindings: {\n    items: '=',\n    onRemove: '&',\n    removeCardFrame: '@?'\n  }\n});"
    },
    {
      "id": 20,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\components\\linkHelpText\\linkHelpText.component.js",
      "name": "./public/modules/data_dashboard/src/components/linkHelpText/linkHelpText.component.js",
      "index": 20,
      "index2": 18,
      "size": 703,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./components/linkHelpText/linkHelpText.component.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.controller('LinkHelpTextController', ['$scope', '$element', '$attrs', function (scope, $element, $attrs) {\n  this.$onInit = function () {\n    scope.ctrl = this;\n\n    // The text to display\n    scope.ctrl.text = this.text;\n\n    // The label to display\n    scope.ctrl.label = this.label;\n\n    scope.showHelpText = false;\n  };\n\n  scope.toggleHelpText = function () {\n    scope.showHelpText = !scope.showHelpText;\n  };\n}]);\napp.component('linkHelpText', {\n  templateUrl: '/modules/data_dashboard/src/components/linkHelpText/linkHelpText.component.html',\n  controller: 'LinkHelpTextController',\n  bindings: {\n    text: '@',\n    label: '@'\n  }\n});"
    },
    {
      "id": 21,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\components\\navbar\\navbar.component.js",
      "name": "./public/modules/data_dashboard/src/components/navbar/navbar.component.js",
      "index": 21,
      "index2": 19,
      "size": 423,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./components/navbar/navbar.component.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.controller('NavbarController', ['$scope', '$application', '$account', function ($scope, $application, $account) {\n\n  $scope.application = $application.get();\n  $scope.user = $account.get();\n}]);\n\napp.component('navbar', {\n  templateUrl: '/modules/data_dashboard/src/components/navbar/navbar.component.html',\n  controller: 'NavbarController',\n  bindings: {}\n});"
    },
    {
      "id": 22,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\components\\paginationNav\\paginationNav.component.js",
      "name": "./public/modules/data_dashboard/src/components/paginationNav/paginationNav.component.js",
      "index": 22,
      "index2": 20,
      "size": 1037,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./components/paginationNav/paginationNav.component.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.controller('PaginationNavController', ['$scope', '$element', '$attrs', '$marketcloud', function (scope, $element, $attrs, $marketcloud) {\n  this.$onInit = function () {\n    scope.ctrl = this;\n  };\n\n  scope.loadPage = function (page_number) {\n    scope.ctrl.onChangePage({\n      page: page_number\n    });\n  };\n\n  scope.getListOfPages = function () {\n    var np = scope.ctrl.pagination.numberOfPages;\n    var cp = scope.ctrl.pagination.currentPage;\n\n    var arr = [];\n    var initialPage = cp - 2;\n    if (initialPage <= 0) {\n      initialPage = 1;\n    }\n    var lastPage = cp + 2;\n    if (lastPage > np) {\n      lastPage = np;\n    }\n\n    for (var i = initialPage; i < lastPage; i++) {\n      arr.push(i);\n    }\n\n    return arr;\n  };\n}]);\napp.component('paginationNav', {\n  templateUrl: '/modules/data_dashboard/src/components/paginationNav/paginationNav.component.html',\n  controller: 'PaginationNavController',\n  bindings: {\n    pagination: '=',\n    onChangePage: '&'\n\n  }\n});"
    },
    {
      "id": 23,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\components\\paginationSelector\\paginationSelector.component.js",
      "name": "./public/modules/data_dashboard/src/components/paginationSelector/paginationSelector.component.js",
      "index": 23,
      "index2": 21,
      "size": 2758,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./components/paginationSelector/paginationSelector.component.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.controller('PaginationSelectorController', ['$scope', function (scope) {\n\n  var ctrl = this;\n\n  this.$onInit = function () {\n\n    scope.ctrl = this;\n    scope.ctrl.perPage = this.perPage || this.config.defaultPageSize;\n    scope.ctrl.page = this.page || this.config.defaultPageNumber;\n\n    this.updatePageCounters();\n  };\n\n  // If the parent controller's pagination changes\n  // we have to update our reference\n  this.$onChanges = function (changes) {\n\n    // Whenever the parent controller refreshes data updating the query\n    // we must update our reference to pagination\n    if (changes.pagination) {\n      ctrl.pagination = changes.pagination.currentValue;\n\n      // We have to be sure that scope is already there\n      if (scope && scope.ctrl) {\n        ctrl.updatePageCounters();\n      }\n    }\n  };\n\n  this.updatePageCounters = function () {\n    scope.pages = [];\n    for (var i = 1; i <= this.pagination.numberOfPages; i++) {\n      scope.pages.push(i);\n    }\n\n    // We find the positions of the first and the last displayed item\n    scope.first = (scope.ctrl.page - 1) * scope.ctrl.perPage + 1;\n    scope.last = scope.ctrl.page * scope.ctrl.perPage - 1;\n\n    // If there are less items than the perPage value, we adjust the \"last\" value\n    if (scope.last > scope.ctrl.pagination.count) {\n      scope.last = scope.ctrl.pagination.count;\n    }\n  };\n\n  this.config = {\n    availablePageSizes: [10, 20, 50, 100],\n    defaultPageSize: 20,\n    defaultPageNumber: 1\n\n    // this function triggers the callback specified as onChangePageSize\n  };scope.setPageSize = function (pageSize) {\n\n    var newSize = scope.ctrl.perPage;\n\n    if (pageSize) newSize = pageSize;\n\n    scope.ctrl.onChangePageSize({\n      per_page: newSize\n    }).then(function () {\n      ctrl.updatePageCounters();\n    });\n  };\n\n  scope.setPageNumber = function (pageNumber) {\n\n    if (pageNumber <= 0) {\n      console.info(\"Cannot set page <= 0. Ignoring setPageNumber() call.\");\n      return;\n    }\n\n    if (pageNumber > scope.ctrl.pagination.numberOfPages) {\n      console.info(\"Cannot set page > pagination.numberOfPages. Ignoring setPageNumber() call.\");\n      return;\n    }\n\n    scope.ctrl.onChangePageNumber({\n      page: pageNumber\n    }).then(function () {\n      ctrl.updatePageCounters();\n    });\n  };\n}]);\napp.component('paginationSelector', {\n  templateUrl: '/modules/data_dashboard/src/components/paginationSelector/paginationSelector.component.html',\n  controller: 'PaginationSelectorController',\n  bindings: {\n    perPage: '=',\n    page: '=',\n    pagination: '<', // We don't need to modify this, we just use it to listen for changes and read data\n    onChangePageSize: '&',\n    onChangePageNumber: '&'\n\n  }\n});"
    },
    {
      "id": 24,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\components\\resourcePicker\\resourcePicker.component.js",
      "name": "./public/modules/data_dashboard/src/components/resourcePicker/resourcePicker.component.js",
      "index": 24,
      "index2": 22,
      "size": 13,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./components/resourcePicker/resourcePicker.component.js"
        }
      ],
      "source": "\"use strict\";"
    },
    {
      "id": 25,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\components\\seoForm\\seoForm.component.js",
      "name": "./public/modules/data_dashboard/src/components/seoForm/seoForm.component.js",
      "index": 25,
      "index2": 23,
      "size": 662,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./components/seoForm/seoForm.component.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.controller('SEOFormController', ['$scope', '$element', '$attrs', function (scope, $element, $attrs) {\n  this.$onInit = function () {\n    scope.ctrl = this;\n\n    // The SEO object holds all SEO related data\n    scope.ctrl.seo = this.seo;\n\n    // The active tab key\n    scope.activeSeoTab = 'meta';\n  };\n\n  scope.showSeoTab = function (tabname) {\n    scope.activeSeoTab = tabname;\n  };\n}]);\napp.component('seoForm', {\n  templateUrl: '/modules/data_dashboard/src/components/seoForm/seoForm.component.html',\n  controller: 'SEOFormController',\n  bindings: {\n    seo: '=',\n    removeCardFrame: '@?'\n  }\n});"
    },
    {
      "id": 26,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\components\\sidebar\\sidebar.component.js",
      "name": "./public/modules/data_dashboard/src/components/sidebar/sidebar.component.js",
      "index": 26,
      "index2": 24,
      "size": 5378,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./components/sidebar/sidebar.component.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.controller('SidebarController', ['$scope', '$http', '$routeParams', '$location', '$rootScope', '$route', '$application', '$window', 'StormConfiguration', function ($scope, $http, $params, $location, $root, $route, $application, $window, Configuration) {\n  $scope.showingSubSidebar = false;\n\n  $scope.currentSidebarSection = null;\n\n  $scope.currentSection = null;\n\n  $scope.sidebarIsExpanded = true;\n\n  $scope.subEntriesGroupToShow = null;\n\n  $scope.subSideBars = {\n    inventory: false,\n    system: false\n  };\n\n  $scope.StormConfiguration = {};\n  $scope.StormConfiguration = Configuration.get();\n\n  $scope.$on('$dashboardSectionChange', function ($event, args) {\n    // Intercepting the new section event\n    if (args.section) {\n\n      $scope.currentSection = args.section.split('.')[0];\n      $scope.currentSubsection = args.section.split('.')[1] || null;\n\n      $root.currentSection = args.section.split('.')[0];\n      $root.currentSubsection = args.section.split('.')[1] || null;\n\n      if (args.section.indexOf('system') < 0 || args.section.indexOf('inventory') < 0) {\n        $scope.hideSubSidebar();\n      }\n    }\n  });\n\n  $scope.switchToApp = function (app_id) {\n    var current_app_id = $application.get().id;\n    // We just need to swap the current urls with the desired app id\n    var url = '/applications/' + app_id + '/dashboard#/';\n\n    window.location.href = url;\n  };\n\n  $scope.showSubEntries = function (id) {\n    $scope.subEntriesGroupToShow = id;\n  };\n  $scope.hideAllSubEntries = function () {\n    for (var k in $scope.subEntriesGroupShown) {\n      $scope.subEntriesGroupShown[k] = false;\n    }\n  };\n\n  $scope.subEntriesGroupShown = {\n    inventory: false,\n    system: false\n\n    // find workaround with $window, since currently using $window doesnt work\n  };this.mql = window.matchMedia('screen and (max-width:1000px)');\n\n  this.mql.addListener(function (mq) {\n    console.log(\"matchMedia Listener\");\n    if (mq.matches) {\n      if (true === $scope.sidebarIsExpanded) {\n        $scope.toggleSidebar();\n      }\n    } else {\n      // When the screen size grows bigger, we expand the sidebar,\n      // not required but probably wanted by the user\n      if (false === $scope.sidebarIsExpanded) {\n        $scope.toggleSidebar();\n      }\n    }\n  });\n\n  $scope.toggleSidebar = function () {\n\n    var movement = \"-=200\";\n    var duration = 500;\n\n    if ($scope.sidebarIsExpanded === false) {\n      movement = '+=200';\n\n      // if we are closing the sidebar, we also close sub-sections in it\n      $scope.hideAllSubEntries();\n    }\n\n    $(\"#page-wrapper\").animate({\n      \"margin-left\": movement\n    }, {\n      duration: duration,\n      queue: false\n    });\n\n    $(\".dashboard-section-header\").animate({\n      \"left\": movement\n    }, {\n      duration: duration,\n      queue: false\n    });\n\n    $(\".sidebar-footer\").animate({\n      \"left\": movement\n    }, {\n      duration: duration,\n      queue: false\n    });\n\n    $(\".sidebar\").not('.sub-sidebar').animate({\n      left: movement\n    }, {\n      duration: duration,\n      queue: false,\n      done: function done() {\n\n        if (true === $scope.sidebarIsExpanded) {\n          $(\"a.entry .fa\").addClass(\"pull-right\");\n          $scope.sidebarIsExpanded = false;\n        } else {\n          $scope.sidebarIsExpanded = true;\n          $(\"a.entry .fa\").removeClass(\"pull-right\");\n        }\n\n        $scope.$apply();\n      }\n    });\n  };\n\n  $scope.toggleSidebar = function () {\n\n    if (true === $scope.sidebarIsExpanded) {\n      angular.element('.sidebar').addClass('collapsed');\n      angular.element('.sidebar').removeClass('expanded');\n      angular.element('#page-wrapper').addClass('expanded');\n      angular.element('#page-wrapper').removeClass('collapsed');\n      $scope.hideAllSubEntries();\n      $scope.sidebarIsExpanded = false;\n    } else {\n      angular.element('.sidebar').addClass('expanded');\n      angular.element('.sidebar').removeClass('collapsed');\n      angular.element('#page-wrapper').addClass('collapsed');\n      angular.element('#page-wrapper').removeClass('expanded');\n      $scope.sidebarIsExpanded = true;\n    }\n  };\n\n  $scope.toggleSubEntries = function (group_id) {\n    // group_id is the name of the dashboard section\n    // a section is a group of logical views\n    // e.g. inventory is a group of views related to inventory management\n    $scope.currentSection = group_id;\n\n    if (false === $scope.sidebarIsExpanded) $scope.toggleSidebar();\n\n    $scope.subEntriesGroupShown[group_id] = !$scope.subEntriesGroupShown[group_id];\n  };\n\n  $scope.saveStormConfiguration = function () {\n\n    for (var k in $scope.StormConfiguration) {\n      Configuration.set(k, $scope.StormConfiguration[k], true);\n    }\n\n    if ($scope.StormConfiguration.hasOwnProperty(\"theme\")) Configuration.applyTheme($scope.StormConfiguration.theme);\n  };\n\n  $scope.showSubSidebar = function (id) {\n\n    $scope.showingSubSidebar = true;\n\n    var sidebars = ['inventory', 'system', 'contents'];\n\n    if (sidebars.indexOf(id) < 0) {\n      return false;\n    }\n\n    $scope.currentSidebarSection = id;\n  };\n\n  $scope.hideSubSidebar = function () {\n    $scope.showingSubSidebar = false;\n  };\n}]);\n\napp.component('sidebar', {\n  templateUrl: '/modules/data_dashboard/src/components/sidebar/sidebar.component.html',\n  controller: 'SidebarController',\n  bindings: {}\n});"
    },
    {
      "id": 27,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\components\\sortingSelector\\sortingSelector.component.js",
      "name": "./public/modules/data_dashboard/src/components/sortingSelector/sortingSelector.component.js",
      "index": 27,
      "index2": 25,
      "size": 1087,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./components/sortingSelector/sortingSelector.component.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.controller('sortingSelectorController', ['$scope', function (scope) {\n\n  var ctrl = this;\n\n  this.$onInit = function () {\n    scope.ctrl = this;\n    scope.ctrl.query = this.query || {};\n\n    if (!scope.ctrl.query.sort_by) scope.ctrl.query.sort_by = 'id';\n    if (!scope.ctrl.query.sort_order) scope.ctrl.query.sort_order = 'DESC';\n\n    scope.ctrl.resourceAttributes = this.resourceAttributes || [];\n  };\n\n  scope.applySorting = function () {\n    console.log(\"sortingSelector.applySorting\", {\n      sort_by: scope.ctrl.query.sort_by,\n      sort_order: scope.ctrl.query.sort_order\n    });\n    scope.ctrl.onUpdate({\n      sort_by: scope.ctrl.query.sort_by,\n      sort_order: scope.ctrl.query.sort_order\n    });\n\n    $(\"#sortingModal\").modal('hide');\n  };\n}]);\n\napp.component('sortingSelector', {\n  templateUrl: '/modules/data_dashboard/src/components/sortingSelector/sortingSelector.component.html',\n  controller: 'sortingSelectorController',\n  bindings: {\n    query: '=',\n    resourceAttributes: '=',\n    onUpdate: '&'\n  }\n});"
    },
    {
      "id": 28,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\components\\switch\\switch.component.js",
      "name": "./public/modules/data_dashboard/src/components/switch/switch.component.js",
      "index": 28,
      "index2": 26,
      "size": 1001,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./components/switch/switch.component.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.controller('SwitchController', ['$scope', '$element', '$attrs', function (scope, $element, $attrs) {\n  this.$onInit = function () {\n    scope.ctrl = this;\n\n    scope.ctrl.value = this.value;\n\n    // Theme is success danger info primary warning default\n    scope.ctrl.theme = $attrs.theme || 'info';\n\n    scope.ctrl.align = $attrs.align || '';\n  };\n\n  $element.on('click', function () {\n    if (scope.ctrl.readOnly === true) {\n      return;\n    }\n\n    scope.ctrl.value = !scope.ctrl.value;\n\n    // Params must be wrapped in an object\n    // then when using the on-update attribute i can write\n    // on-update=\"somfunc(params)\"\n\n    scope.$apply();\n\n    scope.ctrl.onUpdate();\n  });\n}]);\napp.component('switch', {\n  templateUrl: '/modules/data_dashboard/src/components/switch/switch.component.html',\n  controller: 'SwitchController',\n  bindings: {\n    value: '=',\n    onUpdate: '&',\n    class: '@',\n    align: '@',\n    readOnly: '@'\n  }\n});"
    },
    {
      "id": 29,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\components\\taxesSelector\\taxesSelector.component.js",
      "name": "./public/modules/data_dashboard/src/components/taxesSelector/taxesSelector.component.js",
      "index": 29,
      "index2": 27,
      "size": 704,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./components/taxesSelector/taxesSelector.component.js"
        }
      ],
      "source": "'use strict';\n\nangular.module('DataDashboard').controller('TaxesSelectorController', TaxesSelectorController).component('taxesSelector', {\n  templateUrl: '/modules/data_dashboard/src/components/taxesSelector/taxesSelector.component.html',\n  controller: 'TaxesSelectorController',\n  bindings: {\n    tax: '=',\n    onError: '&',\n    onChange: '&'\n  }\n});\n\nTaxesSelectorController.$inject = ['$marketcloud', '$scope'];\n\nfunction TaxesSelectorController($marketcloud, scope) {\n  this.$onInit = function () {\n    scope.ctrl = this;\n  };\n\n  $marketcloud.taxes.list().then(function (response) {\n    scope.ctrl.taxes = response.data.data;\n  }).catch(function (response) {\n    scope.ctrl.onError(response);\n  });\n}"
    },
    {
      "id": 30,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\components\\toolbarSearch\\toolbarSearch.component.js",
      "name": "./public/modules/data_dashboard/src/components/toolbarSearch/toolbarSearch.component.js",
      "index": 30,
      "index2": 28,
      "size": 839,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./components/toolbarSearch/toolbarSearch.component.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.controller('ToolbarSearchController', ['$scope', function (scope) {\n\n  var ctrl = this;\n  scope.searchWord = '';\n\n  this.$onInit = function () {\n    scope.ctrl = this;\n\n    scope.ctrl.query = {};\n\n    if (!this.propertyName) this.propertyName = \"name\";\n\n    scope.ctrl.query[ctrl.propertyName] = {\n      $options: 'i',\n      $regex: ''\n    };\n  };\n\n  scope.onQueryChange = function () {\n\n    scope.ctrl.query[ctrl.propertyName][\"$regex\"] = scope.searchWord;\n    return scope.ctrl.onUpdate({\n      query: scope.ctrl.query\n    });\n  };\n}]);\n\napp.component('toolbarSearch', {\n  templateUrl: '/modules/data_dashboard/src/components/toolbarSearch/toolbarSearch.component.html',\n  controller: 'ToolbarSearchController',\n  bindings: {\n    onUpdate: '&',\n    propertyName: '@'\n  }\n});"
    },
    {
      "id": 31,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\PaymentMethods.controller.js",
      "name": "./public/modules/data_dashboard/src/controllers/PaymentMethods.controller.js",
      "index": 31,
      "index2": 29,
      "size": 3233,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/PaymentMethods.controller.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.controller('PaymentMethodsController', ['$scope', '$http', '$marketcloud', '$location', 'paymentMethods', function (scope, http, $marketcloud, location, paymentMethods) {\n  scope.paymentMethods = paymentMethods.data.data;\n  /* scope.integrations = integrations.data.data; */\n  scope.modalMode = 'update';\n  scope.paymentMethod = {\n    name: '',\n    description: '',\n    active: false\n\n  };\n\n  scope.loadPaymentMethods = function () {\n    $marketcloud.paymentMethods.list().then(function (response) {\n      scope.paymentMethods = response.data.data;\n    }).catch(function (response) {\n      notie.alert(3, 'An erro has occurred. Please try again.', 1.5);\n    });\n  };\n\n  scope.availableChargeOptions = [{\n    label: 'No additional charge',\n    value: 'no_cost'\n  }, {\n    label: 'Fixed fee',\n    value: 'fixed_fee'\n  }, {\n    label: 'Percentage based fee',\n    value: 'percentage_fee'\n  }, {\n    label: 'Fixed plus percentage',\n    value: 'fixed_plus_percentage'\n  }];\n\n  scope.delete = function (payment) {\n\n    payment = payment || scope.payment;\n\n    $marketcloud.paymentMethods.delete(payment.id).then(function (response) {\n      notie.alert(1, 'Payment method deleted.', 1.5);\n      scope.payment = {};\n      return $marketcloud.paymentMethods.list();\n    }).then(function (response) {\n      scope.paymentMethods = response.data.data;\n      $('#addManualPaymentMethodModal').modal('hide');\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred, please try again.');\n    });\n  };\n\n  scope.save = function () {\n    $marketcloud.paymentMethods.save(scope.payment).then(function (response) {\n      notie.alert(1, 'Payment method created.', 1.5);\n      scope.payment = {};\n      return $marketcloud.paymentMethods.list();\n    }).then(function (response) {\n      scope.paymentMethods = response.data.data;\n      $('#addManualPaymentMethodModal').modal('hide');\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred, please try again.');\n    });\n  };\n  scope.createPayment = function () {\n    scope.modalMode = 'create';\n    scope.payment = {};\n    $('#addManualPaymentMethodModal').modal('show');\n  };\n  scope.editPayment = function (payment) {\n    scope.modalMode = 'update';\n\n    scope.payment = payment;\n\n    $('#addManualPaymentMethodModal').modal('show');\n  };\n\n  scope.update = function (updates) {\n    var payload = updates || scope.payment;\n\n    $marketcloud.paymentMethods.update(scope.payment.id, payload).then(function (response) {\n      notie.alert(1, 'Payment method updated.', 1.5);\n      return $marketcloud.paymentMethods.list();\n    }).then(function (response) {\n      scope.paymentMethods = response.data.data;\n      $('#addManualPaymentMethodModal').modal('hide');\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred, please try again.');\n    });\n  };\n\n  scope.togglePaymentMethod = function (paymentMethod) {\n    $marketcloud.paymentMethods.update(paymentMethod.id, paymentMethod).then(function (response) {\n      notie.alert(1, 'Update successful', 1.5);\n    }).catch(function (error) {\n      notie.alert(3, 'An error has occurred, please try again.', 1.5);\n    });\n  };\n}]);"
    },
    {
      "id": 32,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\analytics.controller.js",
      "name": "./public/modules/data_dashboard/src/controllers/analytics.controller.js",
      "index": 32,
      "index2": 30,
      "size": 7073,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/analytics.controller.js"
        }
      ],
      "source": "'use strict';\n/* globals angular */\n\nvar app = angular.module('DataDashboard');\n\napp.controller('AnalyticsController', ['$scope', '$http', '$routeParams', 'analytics', 'moment', 'carts', 'customers', '$location', function (scope, http, params, analytics, moment, carts, customers, $location) {\n\n    scope.currentRange = \"This month\";\n    if ($location.search().range) scope.currentRange = $location.search().range;\n\n    var today = new Date();\n    today.setHours(0, 0, 0, 0);\n    today = today.getTime();\n\n    var yesterday = new Date();\n    yesterday.setDate(yesterday.getDate() - 1);\n    yesterday.setHours(0, 0, 0, 0);\n    yesterday = yesterday.getTime();\n\n    var oneWeekAgo = new Date();\n    oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n    oneWeekAgo.setHours(0, 0, 0, 0);\n    oneWeekAgo = oneWeekAgo.getTime();\n\n    var orders = analytics.data.data;\n\n    var salesVolumePerDay = {};\n\n    var numberOfOrdersPerDay = {};\n\n    orders.filter(function (x) {\n        // We consider only orders not canceled or refunded or failed for the analytics\n        var invalid_orders = ['failed', 'canceled', 'refunded'];\n        return invalid_orders.indexOf(x.status) < 0;\n    }).map(function (x) {\n        return {\n            created_at: x.created_at,\n            total: x.total\n        };\n    }).forEach(function (x) {\n        var d = new Date(x.created_at);\n        var month = String(d.getMonth() + 1);\n        if (month.length < 2) {\n            month = '0' + month;\n        }\n        var day = d.getFullYear() + '-' + month + '-' + d.getDate();\n\n        if (!salesVolumePerDay[day]) {\n            salesVolumePerDay[day] = 0;\n        }\n\n        salesVolumePerDay[day] += x.total;\n\n        if (!numberOfOrdersPerDay[day]) numberOfOrdersPerDay[day] = 0;\n\n        numberOfOrdersPerDay[day]++;\n    });\n\n    var goodOrders = orders.filter(function (x) {\n        // We consider only orders not canceled or refunded or failed for the analytics\n        var invalid_orders = ['failed', 'canceled', 'refunded'];\n        return invalid_orders.indexOf(x.status) < 0;\n    });\n\n    // Given a date object\n    // returns yyyy-mm-dd\n    function getDateKeyFromDate(d) {\n        var month = String(d.getMonth() + 1);\n\n        if (month.length < 2) month = '0' + month;\n\n        var day = d.getFullYear() + '-' + month + '-' + d.getDate();\n\n        return day;\n    }\n\n    var ordersPerDay = {};\n\n    // We have to prefill days labels\n\n\n    var d = new Date();\n    switch (scope.currentRange.toLowerCase()) {\n        case \"this month\":\n            for (var i = 1; i < 30; i++) {\n                var key = getDateKeyFromDate(d);\n                ordersPerDay[key] = [];\n                d.setDate(d.getDate() - i);\n            }\n            break;\n\n        case \"this week\":\n            for (var i = 1; i < 7; i++) {\n                var key = getDateKeyFromDate(d);\n                ordersPerDay[key] = [];\n                d.setDate(d.getDate() - i);\n            }\n            break;\n\n        case \"yesterday\":\n            var yesterday = new Date();\n            yesterday.setDate(yesterday.getDate() - 1);\n            var key = getDateKeyFromDate(yesterday);\n            ordersPerDay[key] = [];\n            break;\n\n        case \"today\":\n            var today = new Date();\n            var key = getDateKeyFromDate(today);\n            ordersPerDay[key] = [];\n            break;\n    }\n\n    goodOrders.forEach(function (order) {\n        var d = new Date(order.created_at);\n\n        var day = getDateKeyFromDate(d);\n\n        if (ordersPerDay[day]) ordersPerDay[day].push(order);else ordersPerDay[day] = [order];\n    });\n\n    scope.dateLabels = Object.keys(ordersPerDay);\n    scope.formattedDateLabels = scope.dateLabels.map(function (label) {\n        return moment(label, 'YYYY-M-DD').format('MMM Do');\n    });\n\n    scope.ordersVolumePerDay = [];\n    scope.ordersCountPerDay = [];\n\n    scope.dateLabels.forEach(function (date) {\n        var numberOfOrdersThisDate = ordersPerDay[date].length;\n        var salesThisDate = ordersPerDay[date].map(function (order) {\n            return order.total;\n        }).reduce(function (a, b) {\n            return a + b;\n        }, 0);\n\n        scope.ordersCountPerDay.push(numberOfOrdersThisDate);\n        scope.ordersVolumePerDay.push(salesThisDate);\n    });\n\n    scope.totalOrdersValue = goodOrders.map(function (order) {\n        return order.total;\n    }).reduce(function (a, b) {\n        return a + b;\n    }, 0).toFixed(2);\n\n    scope.totalOrdersCount = goodOrders.length;\n    /*\r\n     *\tHere we feed the Chart.js chart on the dashboard homepage\r\n     *\r\n     *\tThis chart shows orders volume for this month (last 30 days)\r\n     */\n\n    scope.chartOptions = {\n        scaleLabel: \"<%= Number(value).toFixed(2).replace('.',',') %> \" + scope.application.currency_code\n    };\n\n    scope.chartOptions = {\n        scales: {\n            xAxes: [{\n                gridLines: {\n                    display: false\n                }\n            }],\n            yAxes: [{\n                scaleLabel: {\n                    display: true,\n                    labelString: scope.application.currency_code\n                }\n            }]\n        }\n    };\n\n    carts = carts.data.data;\n\n    customers = customers.data.data;\n\n    scope.totalCustomersCount = customers.length;\n\n    var totalCartsCount = carts.length;\n    scope.totalCartsCount = totalCartsCount;\n\n    // Carts with item inside\n    var abandonedCarts = carts.filter(function (cart) {\n        return cart.status === \"open\" && cart.items.length > 0;\n    });\n    var abandonedCartsCount = abandonedCarts.length;\n\n    // Empty carts\n    var emptyCartsCount = carts.filter(function (cart) {\n        return cart.status === \"open\" && cart.items.length === 0;\n    }).length;\n\n    //\n    var convertedCartsCount = carts.filter(function (cart) {\n        return cart.status === \"closed\";\n    }).length;\n\n    scope.abandonedCartsTotalValue = abandonedCarts.map(function (cart) {\n        return cart.total;\n    }).reduce(function (a, b) {\n        return a + b;\n    }, 0);\n\n    scope.CartsDatasets = [abandonedCartsCount, emptyCartsCount, convertedCartsCount];\n\n    scope.CartsLabels = ['Abandoned', 'Empty', 'Converted'];\n\n    scope.CartsChartOptions = {\n        legend: {\n            display: true,\n            position: 'bottom'\n        }\n\n    };\n\n    scope.setCurrentTimeRange = function (range) {\n\n        range = range.toLowerCase();\n\n        scope.currentRange = range;\n\n        return $location.path('/analytics').search(\"range\", range);\n    };\n\n    var totalCartValue = carts.map(function (cart) {\n        return cart.total;\n    }).reduce(function (a, b) {\n        return a + b;\n    }, 0);\n\n    scope.averageCartValue = 0;\n\n    if (totalCartValue > 0) scope.averageCartValue = (totalCartValue / carts.length).toFixed(2);\n\n    var totalOrdersValue = orders.map(function (order) {\n        return order.total;\n    }).reduce(function (a, b) {\n        return a + b;\n    }, 0);\n\n    scope.averageOrderValue = 0;\n\n    if (totalOrdersValue > 0) scope.averageOrderValue = (totalOrdersValue / orders.length).toFixed(2);\n}]);"
    },
    {
      "id": 33,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\application\\acl.controller.js",
      "name": "./public/modules/data_dashboard/src/controllers/application/acl.controller.js",
      "index": 33,
      "index2": 31,
      "size": 4415,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/application/acl.controller.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.controller('EditRoleController', ['$scope', '$http', '$application', '$rootScope', 'rolePresets', 'role', '$location', function (scope, http, $application, rootScope, rolePresets, role, location) {\n  var application = $application.get();\n  scope.application = application;\n  rootScope.currentSection = 'application.collaborators';\n\n  scope.role = role.data.data;\n\n  scope.preset_name = 'public';\n  scope.errors = {};\n\n  scope.presets = rolePresets;\n  scope.applyPreset = function () {\n    if (!scope.presets.hasOwnProperty(scope.preset_name)) {\n      return;\n    }\n\n    for (var k in scope.presets[scope.preset_name]) {\n      scope.role.endpoints[k] = scope.presets[scope.preset_name][k];\n    }\n  };\n  scope.clearErrors = function () {\n    scope.errors = {};\n  };\n  scope.formHasErrors = function () {\n    return Object.keys(scope.errors).length > 0;\n  };\n  var validateRole = function validateRole() {\n    scope.clearErrors();\n    if (scope.role.name.length > 253) {\n      scope.errors.name = 'Name too long';\n\n      return false;\n    }\n\n    if (scope.role.name.length < 1) {\n      scope.errors.name = 'Name too short';\n      return false;\n    }\n\n    return true;\n  };\n  scope.updateRole = function () {\n    if (!validateRole()) {\n      return;\n    }\n    http({\n      method: 'PUT',\n      url: '/applications/' + scope.application.id + '/roles/' + scope.role.id,\n      data: scope.role\n    }).then(function (response) {\n      notie.alert(1, 'Role successfuly created.', 1.5);\n      location.path('#/application/acl');\n    }).catch(function (error) {\n      notie.alert(2, 'An error has occurred, please try again.', 1.5);\n    });\n  };\n}]);\n\napp.controller('NewRoleController', ['$scope', '$http', '$application', '$rootScope', 'rolePresets', '$location', function (scope, http, $application, rootScope, rolePresets, location) {\n  var application = $application.get();\n  scope.application = application;\n  rootScope.currentSection = 'application.acl';\n\n  scope.preset_name = 'public';\n  scope.errors = {};\n  scope.newRole = {\n    name: '',\n    description: '',\n    endpoints: angular.copy(rolePresets.public)\n  };\n  scope.presets = rolePresets;\n  scope.applyPreset = function () {\n    if (!scope.presets.hasOwnProperty(scope.preset_name)) {\n      return;\n    }\n\n    for (var k in scope.presets[scope.preset_name]) {\n      scope.newRole.endpoints[k] = scope.presets[scope.preset_name][k];\n    }\n  };\n  scope.clearErrors = function () {\n    scope.errors = {};\n  };\n  scope.formHasErrors = function () {\n    return Object.keys(scope.errors).length > 0;\n  };\n  var validateRole = function validateRole() {\n    scope.clearErrors();\n    if (scope.newRole.name.length > 253) {\n      scope.errors.name = 'Name too long';\n\n      return false;\n    }\n\n    if (scope.newRole.name.length < 1) {\n      scope.errors.name = 'Name too short';\n      return false;\n    }\n\n    return true;\n  };\n  scope.saveRole = function () {\n    if (!validateRole()) {\n      return;\n    }\n    http({\n      method: 'POST',\n      url: '/applications/' + scope.application.id + '/roles',\n      data: scope.newRole\n    }).then(function (response) {\n      notie.alert(1, 'Role successfuly created.', 1.5);\n      location.path('/applications/' + scope.application.id + '/acl');\n    }).catch(function (error) {\n      notie.alert(2, 'An error has occurred, please try again.', 1.5);\n    });\n  };\n}]);\n\napp.controller('ACLController', ['$scope', '$http', 'roles', '$application', '$rootScope', function (scope, http, roles, $application, rootScope) {\n  var application = $application.get();\n  scope.application = application;\n  rootScope.currentSection = 'application.acl';\n\n  scope.roles = roles.data.data;\n\n  scope.load = function () {\n    http({\n      method: 'GET',\n      url: '/applications/' + scope.application.id + '/roles'\n    }).then(function (response) {\n      scope.roles = response.data.data;\n    }).catch(function (response) {\n      notie.alert(2, 'An error has occurred while reloading roles.', 1);\n    });\n  };\n\n  scope.delete = function (role) {\n    http({\n      method: 'DELETE',\n      url: '/applications/' + scope.application.id + '/roles/' + role.id\n    }).then(function (response) {\n      notie.alert(1, 'Role correctly deleted', 1);\n      scope.load();\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred, role not deleted', 1);\n    });\n  };\n}]);"
    },
    {
      "id": 34,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\application\\application.new.controller.js",
      "name": "./public/modules/data_dashboard/src/controllers/application/application.new.controller.js",
      "index": 34,
      "index2": 32,
      "size": 877,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/application/application.new.controller.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.controller('CreateApplicationController', ['$scope', '$http', '$location', '$rootScope', function (scope, http, location, $rootScope) {\n\n    scope.application = {};\n\n    scope.create = function () {\n        scope._invalid = null;\n        var validation = window.Models.Application.validate(scope.application);\n        if (false === validation.valid) {\n            scope._invalid = validation.invalidPropertyName;\n        }\n        http({\n            method: 'POST',\n            url: '/applications',\n            data: scope.application\n        }).then(function (response) {\n            notie.alert(1, \"Application created\", 1.5);\n            location.path('#/applications/list');\n        }).catch(function (error) {\n            notie.alert(3, \"An error has occurred, please try again\", 1.5);\n        });\n    };\n}]);"
    },
    {
      "id": 35,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\application\\applications.list.controller.js",
      "name": "./public/modules/data_dashboard/src/controllers/application/applications.list.controller.js",
      "index": 35,
      "index2": 33,
      "size": 183,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/application/applications.list.controller.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.controller('ListApplicationsController', ['$scope', function (scope) {\n\n  scope.applications = window.applications;\n}]);"
    },
    {
      "id": 36,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\application\\billing.controller.js",
      "name": "./public/modules/data_dashboard/src/controllers/application/billing.controller.js",
      "index": 36,
      "index2": 34,
      "size": 2998,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/application/billing.controller.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.controller('ApplicationBillingController', ['$scope', '$http', '$rootScope', '$application', '$account', function (scope, http, rootScope, $application, $account) {\n  var application = $application.get();\n  scope.application = application;\n\n  rootScope.currentSection = 'application.billing';\n\n  // The form's step\n  scope.step = 1;\n\n  // The selected plan\n  scope.selected_plan = null;\n\n  // the error message\n  scope.error = null;\n\n  scope.invalidPropertyName = null;\n\n  // holds the card data\n  scope.card = {};\n\n  // idle, processing, error, success\n  scope.creditCardFormState = 'idle';\n\n  scope.showYearlyPlans = false;\n\n  scope.goToStep = function (step) {\n    scope.step = step;\n  };\n\n  // Loads the current user information like profile and billing\n  scope.account = $account.get();\n\n  scope.selectPlan = function (plan_id) {\n    scope.plans.forEach(function (plan) {\n      if (plan.id === plan_id) {\n        scope.selected_plan = plan;\n      }\n    });\n    console.log('selected_plan', scope.selected_plan);\n    scope.goToStep(2);\n  };\n\n  var validateCard = function validateCard() {\n    scope.error = null;\n\n    if (!Stripe.card.validateExpiry(scope.card.exp_month, scope.card.exp_year)) {\n      scope.error = 'The card\\'s expiration is invalid';\n      scope.invalidPropertyName = 'card.expiry';\n    }\n\n    if (!Stripe.card.validateCVC(scope.card.cvc)) {\n      scope.error = 'The card\\'s cvc is invalid';\n      scope.invalidPropertyName = 'card.cvc';\n    }\n\n    if (!Stripe.card.validateCardNumber(scope.card.number)) {\n      scope.error = 'The card\\'s number is invalid';\n      scope.invalidPropertyName = 'card.number';\n    }\n\n    return scope.error === null;\n  };\n\n  scope.updateApplicationSubscription = function () {\n    scope.creditCardFormState = 'processing';\n    http({\n      method: 'PUT',\n      url: '/applications/' + application.id + '/billing',\n      data: {\n        plan_id: scope.selected_plan.id\n      }\n    }).then(function (response) {\n      scope.goToStep(3);\n      scope.creditCardFormState = 'success';\n    }).catch(function (error) {\n      console.log(error);\n      scope.error = error;\n      notie.alert(2, error.data.errors[0].message || 'Payment failed, please check your billing information.');\n      scope.creditCardFormState = 'error';\n    });\n  };\n\n  scope.filterByInterval = function (value, index, arr) {\n    if (scope.showYearlyPlans === true) {\n      return value.interval === 'yearly';\n    } else {\n      return value.interval === 'monthly';\n    }\n  };\n\n  scope.plans = [];\n\n  http.get('/applications/' + scope.application.id + '/plans').then(function (response) {\n    console.log('PLANS', response.data);\n    scope.plans = response.data.data;\n\n    scope.plans.forEach(function (plan) {\n      plan.api_calls_quota_max = plan.api_calls_quota_max / 1000;\n      plan.api_calls_quota_max = plan.api_calls_quota_max + 'K';\n    });\n  }).catch(function (error) {\n    console.log(error);\n  });\n}]);"
    },
    {
      "id": 37,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\application\\collaborators.controller.js",
      "name": "./public/modules/data_dashboard/src/controllers/application/collaborators.controller.js",
      "index": 37,
      "index2": 35,
      "size": 2582,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/application/collaborators.controller.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.controller('CollaboratorsController', ['$scope', '$http', 'collaborators', '$application', '$rootScope', function (scope, http, collaborators, $application, rootScope) {\n  var application = $application.get();\n  scope.application = application;\n  rootScope.currentSection = 'application.collaborators';\n\n  scope.mode = null;\n\n  scope.collaborators = collaborators.data.data;\n\n  scope.load = function () {\n    http({\n      method: 'GET',\n      url: '/applications/' + scope.application.id + '/collaborators'\n    }).then(function (response) {\n      scope.collaborators = response.data.data;\n    }).catch(function (response) {\n      notie.alert(2, 'An error has occurred while reloading collaborators.', 1);\n    });\n  };\n\n  /* scope.edit = function(collaborator) {\r\n    scope.newCollaborator = collaborator;\r\n    scope.showUpdateModal();\r\n  };\r\n  scope.showUpdateModal = function() {\r\n    scope.mode = 'update';\r\n    $('#newCollaboratorModal').modal('show');\r\n  }; */\n\n  scope.showCreateModal = function () {\n    scope.mode = 'create';\n    $('#newCollaboratorModal').modal('show');\n  };\n\n  scope.saveCollaborator = function () {\n    http({\n      method: 'POST',\n      url: '/applications/' + scope.application.id + '/collaborators',\n      data: scope.newCollaborator\n    }).then(function (response) {\n      notie.alert(1, 'Collaborator correctly created', 1.5);\n      scope.newCollaborator = {};\n      $('#newCollaboratorModal').modal('hide');\n      scope.load();\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred, collaborator not created', 1.5);\n      scope.newCollaborator = {};\n    });\n  };\n\n  scope.updateCollaborator = function (collaborator) {\n    http({\n      method: 'PUT',\n      url: '/applications/' + scope.application.id + '/collaborators/' + collaborator.email,\n      data: {\n        role: collaborator.role\n      }\n    }).then(function (response) {\n      notie.alert(1, 'Collaborator correctly updated', 1);\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred, collaborator not updated', 1);\n      scope.newCollaborator = {};\n    });\n  };\n\n  scope.delete = function (collaborator) {\n    http({\n      method: 'DELETE',\n      url: '/applications/' + scope.application.id + '/collaborators/' + collaborator.email\n    }).then(function (response) {\n      notie.alert(1, 'Collaborator correctly deleted', 1);\n      scope.load();\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred, collaborator not deleted', 1);\n    });\n  };\n}]);"
    },
    {
      "id": 38,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\application\\deploy.controller.js",
      "name": "./public/modules/data_dashboard/src/controllers/application/deploy.controller.js",
      "index": 38,
      "index2": 36,
      "size": 728,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/application/deploy.controller.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.controller('DeployController', ['$scope', '$rootScope', '$application', function (scope, $rootScope, $application) {\n  var application = $application.get();\n  scope.application = application;\n\n  scope.selectedTemplate = null;\n\n  $rootScope.application = application;\n  $rootScope.currentSection = 'application.deploy';\n\n  scope.getHerokuURL = function () {\n    var str = 'https://heroku.com/deploy';\n    str += '?template=' + scope.selectedTemplate;\n    str += '&env[MARKETCLOUD_PUBLIC_KEY]=' + encodeURIComponent(scope.application.public_key);\n    str += '&env[MARKETCLOUD_SECRET_KEY]=' + encodeURIComponent(scope.application.secret_key);\n    return str;\n  };\n}]);"
    },
    {
      "id": 39,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\application\\integrations.controller.js",
      "name": "./public/modules/data_dashboard/src/controllers/application/integrations.controller.js",
      "index": 39,
      "index2": 37,
      "size": 4920,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/application/integrations.controller.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.controller('IntegrationsController', function ($scope, $http, $application, $rootScope) {\n  var application = $application.get();\n  scope.application = application;\n  $scope.integrations = [{\n    name: 'braintree',\n    tags: ['payments'],\n    image: 'https://marketcloud.azureedge.net/storm-images/braintree-logo.jpg',\n    description: 'Accept cards and Paypal on web and mobile almost anywhere.',\n    links: {\n      'view': '/documentation/integrations/braintree'\n    }\n  }, {\n    name: 'stripe',\n    tags: ['payments'],\n    image: 'https://marketcloud.azureedge.net/storm-images/stripe.png',\n    description: 'Web and mobile payments. Built for developers.',\n    links: {\n      'view': '/documentation/integrations/stripe'\n    }\n  }, {\n    name: 'facebook',\n    tags: ['authentication'],\n    image: 'https://marketcloud.azureedge.net/storm-images/facebook.png',\n    description: 'Facebook authentication',\n    links: {\n      'view': '/documentation/guides/facebook-login'\n    }\n  }];\n  rootScope.currentSection = 'application.integrations';\n});\n\napp.controller('IntegrationStripeController', function ($scope, $http, $routeParams, StripeIntegration) {\n  console.log('Integration status', StripeIntegration);\n\n  /*\r\n   *  The integration states are\r\n   *\r\n   *  Not installed\r\n   *  Installed inactive\r\n   *  Installed active\r\n   *\r\n   *  Installed means that the oauth flow was completed and we have the data\r\n   *  StripeIntegration is the object we use to inject the integration state fetched from the api\r\n   *\r\n   *  If it's null, we conclude that it is not installed\r\n   */\n  if (StripeIntegration) {\n    $scope.isIntegrationInstalled = true;\n    $scope.StripeIntegration = StripeIntegration;\n  } else {\n    $scope.isIntegrationInstalled = false;\n  }\n\n  $scope.currentApplication = $application.get();\n\n  // TODO\n  // Lo switch deve essere visibile se e solo se l'integrazione Ã¨ installata. cosÃ¬ da\n  // non essere clicccabile altrimenti.\n\n  $scope.toggleIntegration = function () {\n    alert($scope.StripeIntegration.isActive);\n    return $http({\n      method: 'PUT',\n      url: '/applications/' + $application.get().id + '/integrations/stripe',\n      data: {\n        isActive: $scope.StripeIntegration.isActive\n      }\n    }).then(function (response) {\n      notie.alert(1, 'Integration correctly updated', 1);\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred. Integration not updated', 1);\n    });\n  };\n});\n\napp.controller('IntegrationBraintreeController', function ($scope, $http, $routeParams, BraintreeIntegration) {\n  // This bool is used to show/hide credentials form\n  // This form is used to update the credentials\n  $scope.displayCredentialsForm = false;\n\n  $scope.currentApplication = $application.get();\n\n  $scope.braintreeConfiguration = BraintreeIntegration.data.data;\n\n  $scope.braintreeUpdate = angular.copy(BraintreeIntegration.data.data);\n\n  // If the integration is not enabled we initialize it to false\n  if (!$scope.braintreeUpdate.hasOwnProperty('isActive')) {\n    $scope.braintreeUpdate.isActive = false;\n  }\n\n  $scope.toggleCredentialsForm = function () {\n    $scope.displayCredentialsForm = !$scope.displayCredentialsForm;\n  };\n\n  $scope.showModal = function () {\n    $('#BraintreeCredentialsModal').modal('show');\n  };\n\n  $scope.toggleIntegration = function () {\n    return $http({\n      method: 'PUT',\n      url: '/applications/' + $application.get().id + '/integrations/braintree',\n      data: {\n        isActive: $scope.braintreeConfiguration.isActive\n      }\n    }).then(function (response) {\n      notie.alert(1, 'Integration correctly updated', 1);\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred. Integration not updated', 1);\n    });\n  };\n  $scope.saveBraintreeConfiguration = function () {\n    var payload = {\n      environment: $scope.braintreeUpdate.environment,\n      isActive: $scope.braintreeUpdate.isActive\n\n      // If the user also changed the config,\n    };if ($scope.braintreeUpdate.merchantId && $scope.braintreeUpdate.publicKey && $scope.braintreeUpdate.privateKey) {\n      payload.merchantId = $scope.braintreeUpdate.merchantId;\n      payload.publicKey = $scope.braintreeUpdate.publicKey;\n      payload.privateKey = $scope.braintreeUpdate.privateKey;\n    }\n\n    console.log('PUTTING', payload);\n    $http({\n      method: 'PUT',\n      url: '/applications/' + $application.get().id + '/integrations/braintree',\n      data: payload\n    }).then(function (response) {\n      notie.alert(1, 'Integration correctly updated', 1);\n      $('#BraintreeCredentialsModal').modal('hide');\n      $scope.braintreeConfiguration = angular.copy({\n        environment: payload.environment,\n        isActive: payload.isActive\n      });\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred. Integration not updated', 1);\n    });\n  };\n});"
    },
    {
      "id": 40,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\application\\navigation.controller.js",
      "name": "./public/modules/data_dashboard/src/controllers/application/navigation.controller.js",
      "index": 40,
      "index2": 38,
      "size": 695,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/application/navigation.controller.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.controller('NavigationController', ['$scope', '$route', '$rootScope', '$application', function ($scope, $route, $rootScope, $application) {\n  var application = $application.get();\n  scope.application = application;\n\n  // $rootScope.$broadcast('$dashboardSectionChange',{section : $route.current.$$route.name});\n\n  $scope.$on('$dashboardSectionChange', function ($event, args) {\n    // Intercepting the new section event\n    // $scope.currentSection = args.section.split('.')[0];\n    $scope.currentSection = args.section;\n\n    $scope.showNavigation = $scope.currentSection !== 'home' && $scope.currentSection !== 'create';\n  });\n}]);"
    },
    {
      "id": 41,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\application\\overview.controller.js",
      "name": "./public/modules/data_dashboard/src/controllers/application/overview.controller.js",
      "index": 41,
      "index2": 39,
      "size": 1485,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/application/overview.controller.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.controller('ApplicationOverviewController', ['$scope', '$http', '$application', '$rootScope', function (scope, http, $application, rootScope) {\n  scope.activities = [];\n\n  // Not loading activities as a route resolve\n  // this is because the http method is still quite slow.\n  // so we load it after showing the view.\n  http({\n    url: '/applications/' + $application.get(\"id\") + '/activity',\n    method: 'GET'\n  }).then(function (response) {\n    scope.activities = response.data.data;\n  });\n\n  var application = $application.get();\n  scope.application = application;\n\n  // TODO grab statistical information\n\n  rootScope.currentSection = 'application.overview';\n\n  function getNextMonth(date) {\n    var next_month = new Date(date);\n    next_month.setMonth(date.getMonth() + 1);\n    return next_month;\n  }\n\n  scope.kilobytesToGigabytes = function (kb) {\n    return kb / 1024 / 1024;\n  };\n\n  scope.application.renew_date;\n  scope.getMethodCSSClass = function (a) {\n    var cls = null;\n    switch (a.method) {\n      case 'GET':\n        cls = 'label-success';\n        break;\n      case 'POST':\n        cls = 'label-info';\n        break;\n      case 'PUT':\n        cls = 'label-warning';\n        break;\n      case 'PATCH':\n        cls = 'label-warning';\n        break;\n      case 'DELETE':\n        cls = 'label-danger';\n        break;\n      default:\n        cls = 'label-success';\n        break;\n\n    }\n    return cls;\n  };\n}]);"
    },
    {
      "id": 42,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\application\\settings.controller.js",
      "name": "./public/modules/data_dashboard/src/controllers/application/settings.controller.js",
      "index": 42,
      "index2": 40,
      "size": 2866,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/application/settings.controller.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.factory('BillingPlans', function () {\n  var BILLING_PLANS = {\n    'free': {\n      name: 'free',\n      id: 'free',\n      price_monthly: 0,\n      price_yearly: 0,\n      api_calls_quota_max: '5000',\n      storage: 0.5\n    },\n    'month-19': {\n      name: 'cumulus',\n      id: 'month-19',\n      price_monthly: 19,\n      price_yearly: 190,\n      api_calls_quota_max: '100000',\n      storage: 1\n    },\n    'month-49': {\n      name: 'stratus',\n      id: 'month-49',\n      price_monthly: 49,\n      price_yearly: 490,\n      api_calls_quota_max: '450000',\n      storage: 2\n    },\n    'month-99': {\n      name: 'nimbo stratus',\n      id: 'month-99',\n      price_monthly: 99,\n      price_yearly: 990,\n      api_calls_quota_max: '1500000',\n      storage: 5\n    }\n  };\n  return BILLING_PLANS;\n});\n\napp.controller('ApplicationSettingsController', ['$scope', '$application', '$http', '$location', '$rootScope', 'BillingPlans', function (scope, $application, $http, $location, rootScope, BillingPlans) {\n  var application = $application.get();\n  scope.application = application;\n\n  rootScope.currentSection = 'application.settings';\n\n  scope.plans = BillingPlans;\n\n  scope.currentPlan = null;\n\n  for (var k in BillingPlans) {\n    if (scope.application.plan_name === BillingPlans[k].name) {\n      scope.currentPlan = BillingPlans[k];\n    }\n  }\n\n  scope.updateApplication = function () {\n    var update = {\n      url: scope.application.url,\n      name: scope.application.name\n    };\n\n    $http.put('/applications/' + scope.application.id, update).then(function (response) {\n      notie.alert(1, 'The application has been updated.', 1.5);\n    }).catch(function (error) {\n      notie.alert(3, 'An error has occurred. Please try again.', 1.5);\n    });\n  };\n\n  scope.deleteApplication = function () {\n    notie.confirm('Do you really want to delete the application? It is not reversible!', 'Confirm', 'Cancel', function () {\n      $http.delete('/applications/' + scope.application.id).then(function (response) {\n        notie.alert(1, 'The application has been deleted.', 1.5);\n        $location.path('/');\n      }).catch(function (response) {\n        notie.alert(3, 'An error has occurred, please try again.', 1.5);\n      });\n    });\n  };\n\n  scope.regenerateKeys = function () {\n    notie.confirm('Do you really want to update the application\\'s keys?', 'Confirm', 'Cancel', function () {\n      $http.put('/applications/' + scope.application.id + '/regenerateKeys').then(function (response) {\n        scope.application.public_key = response.data.data.public_key;\n        scope.application.secret_key = response.data.data.secret_key;\n        notie.alert(1, 'Keys regenerated correctly.', 1.5);\n      }).catch(function (response) {\n        notie.alert(3, 'An error has occurred. Please retry', 1.5);\n      });\n    });\n  };\n}]);"
    },
    {
      "id": 43,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\application\\webhooks.controller.js",
      "name": "./public/modules/data_dashboard/src/controllers/application/webhooks.controller.js",
      "index": 43,
      "index2": 41,
      "size": 4962,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/application/webhooks.controller.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.controller('WebhooksController', ['$scope', '$http', 'webhooks', '$application', '$rootScope', function (scope, http, webhooks, $application, rootScope) {\n  rootScope.currentSection = 'application.webhooks';\n\n  var application = $application.get();\n  scope.application = application;\n\n  scope.mode = null;\n  scope.error = null;\n  scope.invalidPropertyName = null;\n\n  scope.application = application;\n  scope.webhooks = webhooks.data.data;\n\n  scope.newWebhook = {};\n\n  var webhookMethods = ['create', 'update', 'delete'];\n\n  var webhookResources = ['addresses', 'brands', 'carts', 'categories', 'collections', 'contents', 'coupons', 'invoices', 'files', 'orders', 'paymentMethods', 'products', 'promotions', 'stores', 'taxes', 'users', 'variables'];\n\n  /* scope.events = [\r\n    'products.create',\r\n    'products.delete',\r\n    'products.update',\r\n    'brands.create',\r\n    'brands.delete',\r\n    'brands.update',\r\n    'categories.create',\r\n    'categories.delete',\r\n    'categories.update',\r\n    'orders.create',\r\n    'orders.delete',\r\n    'orders.update',\r\n    'carts.create',\r\n    'carts.delete',\r\n    'carts.update',\r\n    'payments.create',\r\n    'payments.delete',\r\n    'payments.update',\r\n    'shippings.create',\r\n    'shippings.delete',\r\n    'shippings.update',\r\n    'users.create',\r\n    'users.update',\r\n    'users.delete'\r\n  ]; */\n\n  scope.events = [];\n\n  webhookResources.forEach(function (resource) {\n    webhookMethods.forEach(function (method) {\n      scope.events.push(resource + '.' + method);\n    });\n  });\n\n  scope.events.splice(scope.events.indexOf(\"orders.delete\"), 0, \"payments.create\");\n\n  scope.load = function () {\n    http({\n      method: 'GET',\n      url: '/applications/' + scope.application.id + '/webhooks'\n    }).then(function (response) {\n      console.log('LOAD', response);\n      scope.webhooks = response.data.data;\n    }).catch(function (response) {\n      notie.alert(2, 'An error has occurred while reloading webhooks.', 1);\n    });\n  };\n\n  scope.edit = function (hook) {\n    scope.newWebhook = hook;\n    scope.showUpdateModal();\n  };\n\n  scope.showUpdateModal = function () {\n    scope.mode = 'update';\n    $('#newWebhookModal').modal('show');\n  };\n\n  scope.showCreateModal = function () {\n    scope.mode = 'create';\n    scope.newWebhook = {};\n    $('#newWebhookModal').modal('show');\n  };\n\n  scope.validateWebhook = function () {\n    scope.error = null;\n    scope.invalidPropertyName = null;\n    if (scope.validateUrl() === false) {\n      scope.error = 'The URL is not valid. Remember to specify the protocol http:// or https:// at the beginning.';\n      scope.invalidPropertyName = 'url';\n      return false;\n    }\n\n    if (!scope.newWebhook.event) {\n      scope.error = 'Please select a valid event from the menu';\n      scope.invalidPropertyName = 'event';\n      return false;\n    }\n\n    return true;\n  };\n\n  scope.saveWebhook = function () {\n    if (!scope.validateWebhook()) {\n      return;\n    }\n\n    http({\n      method: 'POST',\n      url: '/applications/' + scope.application.id + '/webhooks',\n      data: scope.newWebhook\n    }).then(function (response) {\n      notie.alert(1, 'Webhook correctly created', 1);\n      scope.newWebhook = {};\n      $('#newWebhookModal').modal('hide');\n      scope.load();\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred, webhook not created', 1);\n      scope.newWebhook = {};\n    });\n  };\n\n  scope.validateUrl = function () {\n    var regex = /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})).?)(?::\\d{2,5})?(?:[/?#]\\S*)?$/i;\n    return regex.test(scope.newWebhook.url);\n  };\n\n  scope.updateWebhook = function () {\n    if (!scope.validateWebhook()) {\n      return;\n    }\n\n    var update = {\n      event: scope.newWebhook.event,\n      url: scope.newWebhook.url\n    };\n\n    http({\n      method: 'PUT',\n      url: '/applications/' + scope.application.id + '/webhooks/' + scope.newWebhook.id,\n      data: update\n    }).then(function (response) {\n      notie.alert(1, 'Webhook correctly updated', 1);\n      scope.newWebhook = {};\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred, webhook not updated', 1);\n    });\n  };\n\n  scope.delete = function (hook) {\n    http({\n      method: 'DELETE',\n      url: '/applications/' + scope.application.id + '/webhooks/' + hook.id\n    }).then(function (response) {\n      notie.alert(1, 'Webhook correctly deleted', 1);\n      scope.load();\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred, webhook not deleted', 1);\n    });\n  };\n}]);"
    },
    {
      "id": 44,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\brandTranslations.controller.js",
      "name": "./public/modules/data_dashboard/src/controllers/brandTranslations.controller.js",
      "index": 44,
      "index2": 42,
      "size": 3097,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/brandTranslations.controller.js"
        }
      ],
      "source": "'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n(function () {\n  'use strict';\n\n  angular.module('DataDashboard').controller('EditBrandTranslationsController', EditBrandTranslationsController);\n\n  EditBrandTranslationsController.$inject = ['$scope', '$marketcloud', 'brand', '$http', '$application', '$location', 'LocalesFactory'];\n\n  function EditBrandTranslationsController(scope, $marketcloud, brand, $http, $application, $location, locales) {\n    if ($application.getAvailableLocaleCodes().length === 0) {\n      notie.alert(2, 'This store has no additional locale. Please add a locale first.', 2);\n      return $location.path('/system/localization');\n    }\n\n    // Injecting resolve data into the controller\n    scope.brand = brand.data.data;\n\n    // This is fetched from the app's config\n    scope.availableLocales = [];\n\n    // mocking the retrieval of locales\n    scope.locales = locales;\n\n    scope.availableLocales = $application.get().locales.split(',').map(function (code) {\n      return scope.locales[code];\n    });\n\n    // Slugs functions\n    function getSlugFromString(v) {\n      return v.split(' ').map(function (item) {\n        return item.replace(/\\W/g, '');\n      }).map(function (item) {\n        return item.toLowerCase();\n      }).join('-');\n    }\n    scope.unsafeSlug = false;\n\n    scope.updateSlug = function () {\n      scope.brand.locales[scope.currentLocale.code].slug = getSlugFromString(scope.brand.locales[scope.currentLocale.code].name);\n    };\n\n    // Which locale we are currently editing\n    scope.currentLocale = scope.availableLocales[0];\n\n    // Init locales object\n    if (!scope.brand.hasOwnProperty('locales')) {\n      scope.brand.locales = {};\n    }\n\n    // Checking that the product has initialized every locale sub object\n    scope.availableLocales.forEach(function (locale) {\n      // Se il prodotto.locales non ha il locale, creo l'oggetto\n      if (!scope.brand.locales.hasOwnProperty(locale.code)) {\n        scope.brand.locales[locale.code] = {};\n      }\n    });\n\n    scope.getFlagClassName = function () {\n      return 'flag-icon-' + scope.currentLocale.code.slice(-2).toLocaleLowerCase();\n    };\n\n    scope.updateTranslations = function () {\n      var payload = {\n        locales: angular.copy(scope.brand.locales)\n      };\n\n      $marketcloud.brands.update(scope.brand.id, payload).then(function (response) {\n        notie.alert(1, 'All updates have been saved.', 2);\n      }).catch(function (error) {\n        notie.alert(3, 'An error has occurred, please try again', 2);\n      });\n    };\n\n    scope.filterNotNullProperties = function (item) {\n      var result = {};\n      for (var k in item) {\n        if (item[k]) {\n          result[k] = item[k];\n        }\n      }\n      return result;\n    };\n\n    scope.typeof = function (y) {\n      return typeof y === 'undefined' ? 'undefined' : _typeof(y);\n    };\n  }\n})();"
    },
    {
      "id": 45,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\brands\\brands.edit.js",
      "name": "./public/modules/data_dashboard/src/controllers/brands/brands.edit.js",
      "index": 45,
      "index2": 43,
      "size": 1754,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/brands/brands.edit.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.controller('EditBrandController', ['$scope', '$http', 'brand', '$location', '$marketcloud', '$utils', '$validation', '$models', function (scope, http, brandResponse, location, $marketcloud, $utils, $validation, $models) {\n  scope.brand = brandResponse.data.data;\n\n  // mapping non-core attributes into scope.customPropertiesData\n  var coreProperties = Models.Brand.getPropertyNames();\n\n  coreProperties.push('id', 'locales', 'seo', 'application_id', 'images', 'slug', 'updated_at', 'created_at');\n\n  scope.customPropertiesData = {};\n\n  for (var k in scope.brand) {\n    if (coreProperties.indexOf(k) === -1) {\n      scope.customPropertiesData[k] = scope.brand[k];\n      delete scope.brand[k];\n    }\n  }\n\n  scope.removeImage = function (i) {\n    scope.brand.images.splice(i, 1);\n  };\n\n  scope.updateBrand = function () {\n    scope.brand.image_url = scope.brand.images[0];\n\n    var toSave = angular.copy(scope.brand);\n\n    for (var k in scope.customPropertiesData) {\n      toSave[k] = scope.customPropertiesData[k];\n    }$marketcloud.brands.update(scope.brand.id, toSave).then(function (response) {\n      notie.alert(1, 'Brand successfully update.', 1.5);\n    }).catch(function (response) {\n\n      if (response.status === 400) {\n        notie.alert(2, 'The data you entered has some errors', 1.5);\n\n        var validation = response.data.errors[0];\n        $validation.showErrorMessage(validation, $models.Brand.schema, '[ng-model=\"brand.' + validation.invalidPropertyName + '\"]');\n      } else notie.alert(3, 'An error has occurred.', 2);\n    });\n  };\n\n  scope.unsafeSlug = false;\n\n  scope.updateSlug = function () {\n    scope.brand.slug = $utils.getSlugFromString(scope.brand.name);\n  };\n}]);"
    },
    {
      "id": 46,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\brands\\brands.list.js",
      "name": "./public/modules/data_dashboard/src/controllers/brands/brands.list.js",
      "index": 46,
      "index2": 44,
      "size": 1529,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/brands/brands.list.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.controller('BrandsController', ['$scope', '$marketcloud', 'brands', function (scope, $marketcloud, resources) {\n  scope.brands = resources.data.data;\n\n  scope.pagination = {\n    currentPage: resources.data.page,\n    numberOfPages: resources.data.pages,\n    nextPage: resources.data._links.next || null,\n    previousPage: resources.data._links.prev || null,\n    count: resources.data.count\n  };\n\n  scope.query = {\n    per_page: 20\n  };\n\n  scope.loadPage = function (page_number) {\n    return scope.loadData({ page: page_number });\n  };\n  scope.loadData = function (query) {\n    if (!query) {\n      query = scope.query;\n    }\n\n    $marketcloud.brands.list(query).then(function (response) {\n      scope.brands = response.data.data;\n\n      scope.pagination = {\n        currentPage: response.data.page,\n        numberOfPages: response.data.pages,\n        nextPage: response.data._links.next || null,\n        previousPage: response.data._links.prev || null,\n        count: response.data.count\n      };\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred. Please try again.', 1.5);\n    });\n  };\n\n  scope.deleteBrand = function (brand_id, index) {\n    $marketcloud.brands.delete(brand_id).then(function (response) {\n      scope.loadData({\n        page: scope.currentPage\n      });\n      notie.alert(1, 'Brand deleted', 1.5);\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred.Please try again.', 1.5);\n    });\n  };\n}]);"
    },
    {
      "id": 47,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\brands\\brands.new.js",
      "name": "./public/modules/data_dashboard/src/controllers/brands/brands.new.js",
      "index": 47,
      "index2": 45,
      "size": 1581,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/brands/brands.new.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.controller('BrandController', ['$scope', '$http', '$marketcloud', '$location', '$utils', '$validation', '$models', function (scope, http, $marketcloud, location, $utils, $validation, $models) {\n\n  scope.newBrand = {};\n\n  // mapping non-core attributes into scope.customPropertiesData\n  var coreProperties = Models.Brand.getPropertyNames();\n\n  coreProperties.push('id', 'locales', 'seo', 'application_id', 'images', 'slug', 'updated_at', 'created_at');\n\n  scope.customPropertiesData = {};\n\n  // For imageThumbnail\n  scope.removeImage = function (i) {\n    scope.newBrand.images.splice(i, 1);\n  };\n\n  scope.unsafeSlug = false;\n\n  scope.updateSlug = function () {\n    scope.newBrand.slug = $utils.getSlugFromString(scope.newBrand.name);\n  };\n\n  scope.saveBrand = function () {\n    scope.newBrand.image_url = scope.newBrand.images[0];\n\n    var toSave = angular.copy(scope.newBrand);\n\n    for (var k in scope.customPropertiesData) {\n      toSave[k] = scope.customPropertiesData[k];\n    }$marketcloud.brands.save(toSave).then(function (response) {\n      notie.alert(1, 'Brand saved', 1.5);\n      location.path('/brands');\n    }).catch(function (response) {\n\n      if (response.status === 400) {\n        notie.alert(2, 'The data you entered has some errors', 1.5);\n\n        var validation = response.data.errors[0];\n        $validation.showErrorMessage(validation, $models.Brand.schema, '[ng-model=\"newBrand.' + validation.invalidPropertyName + '\"]');\n      } else notie.alert(3, 'An error has occurred.', 2);\n    });\n  };\n}]);"
    },
    {
      "id": 48,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\categories\\categories.edit.js",
      "name": "./public/modules/data_dashboard/src/controllers/categories/categories.edit.js",
      "index": 48,
      "index2": 46,
      "size": 2179,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/categories/categories.edit.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.controller('EditCategoryController', ['$scope', '$http', 'category', '$location', '$marketcloud', '$utils', '$validation', '$models', function (scope, http, category, location, $marketcloud, $utils, $validation, $models) {\n  scope.loadingData = true;\n\n  scope.category = category.data.data;\n\n  scope.categories = [];\n\n  // mapping non-core attributes into scope.customPropertiesData\n  var coreProperties = Models.Brand.getPropertyNames();\n\n  coreProperties.push('id', 'locales', 'seo', 'application_id', 'images', 'slug', 'parent_id', 'path', 'updated_at', 'created_at');\n\n  scope.customPropertiesData = {};\n\n  for (var k in scope.category) {\n    if (coreProperties.indexOf(k) === -1) {\n      scope.customPropertiesData[k] = scope.category[k];\n      delete scope.category[k];\n    }\n  }\n\n  // For image thumbnail\n  scope.removeImage = function (i) {\n    scope.category.images.splice(i, 1);\n  };\n\n  // Loading categories\n  $marketcloud.categories.list().then(function (response) {\n    scope.categories = response.data.data;\n  }).catch(function () {\n    notie.alert(2, 'An error has occurred while loading categories', 1.5);\n  });\n\n  scope.updateCategory = function () {\n    scope.category.image_url = scope.category.images[0];\n\n    var toSave = angular.copy(scope.category);\n\n    for (var k in scope.customPropertiesData) {\n      toSave[k] = scope.customPropertiesData[k];\n    }\n\n    $marketcloud.categories.update(category.data.data.id, toSave).then(function (response) {\n      notie.alert(1, 'Category updated with success ', 2);\n      location.path('/categories');\n    }).catch(function (response) {\n\n      if (response.status === 400) {\n        notie.alert(2, 'The data you entered has some errors', 1.5);\n\n        var validation = response.data.errors[0];\n        $validation.showErrorMessage(validation, $models.Category.schema, '[ng-model=\"category.' + validation.invalidPropertyName + '\"]');\n      } else notie.alert(3, 'An error has occurred.', 2);\n    });\n  };\n\n  scope.unsafeSlug = false;\n\n  scope.updateSlug = function () {\n    scope.category.slug = $utils.getSlugFromString(scope.category.name);\n  };\n}]);"
    },
    {
      "id": 49,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\categories\\categories.list.js",
      "name": "./public/modules/data_dashboard/src/controllers/categories/categories.list.js",
      "index": 49,
      "index2": 47,
      "size": 2380,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/categories/categories.list.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.controller('CategoriesController', ['$scope', 'categories', '$q', '$marketcloud', function (scope, resources, $q, $marketcloud) {\n  scope.categories = resources.data.data;\n\n  scope.pagination = {\n    currentPage: resources.data.page,\n    numberOfPages: resources.data.pages,\n    nextPage: resources.data._links.next || null,\n    previousPage: resources.data._links.prev || null,\n    count: resources.data.count\n  };\n\n  scope.query = {\n    per_page: 20\n  };\n\n  scope.toggleAll = function () {\n    scope.categories.forEach(function (p) {\n      p.selected = scope.selectAll;\n    });\n  };\n\n  scope.getSelectedItems = function () {\n    return scope.categories.filter(function (p) {\n      return p.selected === true;\n    });\n  };\n\n  scope.bulkDelete = function () {\n    notie.confirm('Delete ' + scope.getSelectedItems().length + ' items?', 'Delete', 'Cancel', function () {\n      var defer = $q.defer();\n\n      var promises = [];\n\n      scope.getSelectedItems().forEach(function (category) {\n        promises.push($marketcloud.categories.delete(category.id));\n      });\n\n      $q.all(promises).then(function () {\n        notie.alert(1, 'All items have been deleted', 1.5);\n        scope.loadPage(scope.currentPage);\n      });\n\n      return defer.promise;\n    });\n  };\n\n  scope.loadPage = function (page_number) {\n    scope.query.page = page_number;\n    return scope.loadData();\n  };\n  scope.loadData = function (query) {\n    if (!query) {\n      query = scope.query;\n    }\n\n    $marketcloud.categories.list(query).then(function (response) {\n      scope.categories = response.data.data;\n\n      scope.pagination = {\n        currentPage: response.data.page,\n        numberOfPages: response.data.pages,\n        nextPage: response.data._links.next || null,\n        previousPage: response.data._links.prev || null,\n        count: response.data.count\n      };\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred. Please try again.', 1.5);\n    });\n  };\n\n  scope.deleteCategory = function (category_id, index) {\n    $marketcloud.categories.delete(category_id).then(function (response) {\n      scope.loadData({\n        page: 1\n      });\n      notie.alert(1, 'Category deleted', 1.5);\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred.Please try again.', 1.5);\n    });\n  };\n}]);"
    },
    {
      "id": 50,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\categories\\categories.new.js",
      "name": "./public/modules/data_dashboard/src/controllers/categories/categories.new.js",
      "index": 50,
      "index2": 48,
      "size": 2011,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/categories/categories.new.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.controller('CategoryController', ['$scope', '$http', '$marketcloud', '$location', '$utils', '$validation', '$models', function (scope, http, $marketcloud, location, $utils, $validation, $models) {\n\n  scope.customPropertiesData = {};\n  scope.newCategory = {};\n\n  scope.categories = [];\n  // Loading categories\n  $marketcloud.categories.list().then(function (response) {\n    scope.categories = response.data.data;\n  }).catch(function () {\n    notie.alert(3, 'An error has occurred. Please retry', 1.5);\n  });\n\n  // mapping non-core attributes into scope.customPropertiesData\n  var coreProperties = $models.Category.getPropertyNames();\n\n  coreProperties.push('id', 'locales', 'seo', 'application_id', 'images', 'slug', 'parent_id', 'path', 'updated_at', 'created_at');\n\n  // For image thumbnails\n  scope.removeImage = function (i) {\n    scope.newCategory.images.splice(i, 1);\n  };\n\n  scope.saveCategory = function () {\n    scope.newCategory.image_url = scope.newCategory.images[0];\n\n    var toSave = angular.copy(scope.newCategory);\n\n    for (var k in scope.customPropertiesData) {\n      toSave[k] = scope.customPropertiesData[k];\n    }$marketcloud.categories.save(toSave).then(function (response) {\n      notie.alert(1, 'Category saved', 1.5);\n      location.path('/categories');\n    }).catch(function (response) {\n\n      if (response.status === 400) {\n        notie.alert(2, 'The data you entered has some errors', 1.5);\n\n        var validationObject = response.data.errors[0];\n        var invalidPropertyName = validationObject.invalidPropertyName;\n\n        $validation.showErrorMessage(validationObject, $models.Category.schema, '[ng-model=\"newCategory.' + invalidPropertyName + '\"]');\n      } else {\n        notie.alert(3, 'An error has occurred. Please try again', 1.5);\n      }\n    });\n  };\n\n  scope.unsafeSlug = false;\n\n  scope.updateSlug = function () {\n    scope.newCategory.slug = $utils.getSlugFromString(scope.newCategory.name);\n  };\n}]);"
    },
    {
      "id": 51,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\categoryTranslations.controller.js",
      "name": "./public/modules/data_dashboard/src/controllers/categoryTranslations.controller.js",
      "index": 51,
      "index2": 49,
      "size": 3315,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/categoryTranslations.controller.js"
        }
      ],
      "source": "'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n(function () {\n  'use strict';\n\n  angular.module('DataDashboard').controller('EditCategoryTranslationsController', EditCategoryTranslationsController);\n\n  EditCategoryTranslationsController.$inject = ['$scope', '$marketcloud', 'category', '$http', '$location', '$application', 'LocalesFactory'];\n\n  function EditCategoryTranslationsController(scope, $marketcloud, category, $http, $location, $application, locales) {\n    if ($application.getAvailableLocaleCodes().length === 0) {\n      notie.alert(2, 'This store has no additional locale. Please add a locale first.', 2);\n      return $location.path('/system/localization');\n    }\n\n    // Injecting resolve data into the controller\n    scope.category = category.data.data;\n\n    // This is fetched from the app's config\n    scope.availableLocales = [];\n\n    // mocking the retrieval of locales\n    scope.locales = locales;\n\n    scope.availableLocales = $application.get().locales.split(',').filter(function (localeCode) {\n      // When splitting an empty string, we get [\"\"]\n      return localeCode !== '';\n    }).map(function (code) {\n      return scope.locales[code];\n    });\n\n    // Which locale we are currently editing\n    scope.currentLocale = scope.availableLocales[0];\n\n    // Init locales object\n    if (!scope.category.hasOwnProperty('locales')) {\n      scope.category.locales = {};\n    }\n\n    // Checking that the product has initialized every locale sub object\n    scope.availableLocales.forEach(function (locale) {\n      // Se il prodotto.locales non ha il locale, creo l'oggetto\n      if (!scope.category.locales.hasOwnProperty(locale.code)) {\n        scope.category.locales[locale.code] = {};\n      }\n    });\n\n    // Slugs functions\n    function getSlugFromString(v) {\n      return v.split(' ').map(function (item) {\n        return item.replace(/\\W/g, '');\n      }).map(function (item) {\n        return item.toLowerCase();\n      }).join('-');\n    }\n    scope.unsafeSlug = false;\n\n    scope.updateSlug = function () {\n      scope.category.locales[scope.currentLocale.code].slug = getSlugFromString(scope.category.locales[scope.currentLocale.code].name);\n    };\n\n    scope.getFlagClassName = function () {\n      if (scope.currentLocale) {\n        return 'flag-icon-' + scope.currentLocale.code.slice(-2).toLocaleLowerCase();\n      }\n    };\n\n    scope.updateTranslations = function () {\n      var payload = {\n        locales: angular.copy(scope.category.locales)\n      };\n\n      $marketcloud.categories.update(scope.category.id, payload).then(function (response) {\n        notie.alert(1, 'All updates have been saved.', 2);\n      }).catch(function (error) {\n        notie.alert(3, 'An error has occurred, please try again', 2);\n      });\n    };\n\n    scope.filterNotNullProperties = function (item) {\n      var result = {};\n      for (var k in item) {\n        if (item[k]) {\n          result[k] = item[k];\n        }\n      }\n      return result;\n    };\n\n    scope.typeof = function (y) {\n      return typeof y === 'undefined' ? 'undefined' : _typeof(y);\n    };\n  }\n})();"
    },
    {
      "id": 52,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\collectionTranslations.controller.js",
      "name": "./public/modules/data_dashboard/src/controllers/collectionTranslations.controller.js",
      "index": 52,
      "index2": 50,
      "size": 3182,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/collectionTranslations.controller.js"
        }
      ],
      "source": "'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n(function () {\n  'use strict';\n\n  angular.module('DataDashboard').controller('EditCollectionTranslationsController', EditCollectionTranslationsController);\n\n  EditCollectionTranslationsController.$inject = ['$scope', '$marketcloud', 'collection', '$http', '$application', '$location', 'LocalesFactory'];\n\n  function EditCollectionTranslationsController(scope, $marketcloud, collection, $http, $application, $location, locales) {\n    if ($application.getAvailableLocaleCodes().length === 0) {\n      notie.alert(2, 'This store has no additional locale. Please add a locale first.', 2);\n      return $location.path('/system/localization');\n    }\n\n    // Injecting resolve data into the controller\n    scope.collection = collection.data.data;\n\n    // This is fetched from the app's config\n    scope.availableLocales = [];\n\n    // mocking the retrieval of locales\n    scope.locales = locales;\n\n    scope.availableLocales = $application.get().locales.split(',').map(function (code) {\n      return scope.locales[code];\n    });\n\n    // Which locale we are currently editing\n    scope.currentLocale = scope.availableLocales[0];\n\n    // Init locales object\n    if (!scope.collection.hasOwnProperty('locales')) {\n      scope.collection.locales = {};\n    }\n\n    // Checking that the product has initialized every locale sub object\n    scope.availableLocales.forEach(function (locale) {\n      // Se il prodotto.locales non ha il locale, creo l'oggetto\n      if (!scope.collection.locales.hasOwnProperty(locale.code)) {\n        scope.collection.locales[locale.code] = {};\n      }\n    });\n\n    // Slugs functions\n    function getSlugFromString(v) {\n      return v.split(' ').map(function (item) {\n        return item.replace(/\\W/g, '');\n      }).map(function (item) {\n        return item.toLowerCase();\n      }).join('-');\n    }\n    scope.unsafeSlug = false;\n\n    scope.updateSlug = function () {\n      scope.collection.locales[scope.currentLocale.code].slug = getSlugFromString(scope.collection.locales[scope.currentLocale.code].name);\n    };\n\n    scope.getFlagClassName = function () {\n      return 'flag-icon-' + scope.currentLocale.code.slice(-2).toLocaleLowerCase();\n    };\n\n    scope.updateTranslations = function () {\n      var payload = {\n        locales: angular.copy(scope.collection.locales)\n      };\n\n      $marketcloud.collections.update(scope.collection.id, payload).then(function (response) {\n        notie.alert(1, 'All updates have been saved.', 2);\n      }).catch(function (error) {\n        notie.alert(3, 'An error has occurred, please try again', 2);\n      });\n    };\n\n    scope.filterNotNullProperties = function (item) {\n      var result = {};\n      for (var k in item) {\n        if (item[k]) {\n          result[k] = item[k];\n        }\n      }\n      return result;\n    };\n\n    scope.typeof = function (y) {\n      return typeof y === 'undefined' ? 'undefined' : _typeof(y);\n    };\n  }\n})();"
    },
    {
      "id": 53,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\collections\\collections.controller.js",
      "name": "./public/modules/data_dashboard/src/controllers/collections/collections.controller.js",
      "index": 53,
      "index2": 51,
      "size": 1703,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/collections/collections.controller.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.controller('CollectionController', ['$scope', '$http', '$marketcloud', '$location', '$utils', function (scope, http, $marketcloud, location, $utils) {\n\n\tscope.collection = {\n\t\titems: []\n\t};\n\n\tscope.products = [];\n\tscope.itemsToAdd = [];\n\n\tscope.query = {};\n\n\tscope.prepareRegex = function () {\n\t\tscope.query.name.$options = 'i';\n\t};\n\n\tscope.addProductToCollection = function (product) {\n\t\tscope.itemsToAdd.push(product);\n\t\tscope.query.name.$regex = '';\n\t\tscope.products = [];\n\t};\n\n\tscope.removeProductFromCollection = function (i) {\n\t\tscope.itemsToAdd.splice(i, 1);\n\t};\n\n\tscope.showTheList = false;\n\tscope.showList = function () {\n\t\tscope.showTheList = true;\n\t};\n\tscope.hideList = function () {\n\t\twindow.setTimeout(function () {\n\t\t\tscope.showTheList = false;\n\t\t\tscope.$apply();\n\t\t}, 200);\n\t};\n\tscope.loadProducts = function (query) {\n\t\tquery = query || scope.query;\n\n\t\t$marketcloud.products.list(query).then(function (response) {\n\n\t\t\tscope.products = response.data.data.filter(function (item) {\n\t\t\t\treturn scope.itemsToAdd.map(function (i) {\n\t\t\t\t\treturn i.id;\n\t\t\t\t}).indexOf(item.id) < 0;\n\t\t\t});\n\t\t}).catch(function (response) {\n\t\t\tnotie.alert(3, 'An error has occurred. Please try again');\n\t\t});\n\t};\n\n\tscope.loadProducts();\n\n\tscope.saveCollection = function () {\n\t\tscope.collection.items = scope.itemsToAdd.map(function (item) {\n\t\t\treturn { product_id: item.id };\n\t\t});\n\t\t$marketcloud.collections.save(scope.collection).then(function (response) {\n\t\t\tnotie.alert(1, 'Collection saved', 1.5);\n\t\t\tlocation.path('/collections');\n\t\t}).catch(function (response) {\n\t\t\tnotie.alert(2, 'An error has occurred, please try again', 1.5);\n\t\t});\n\t};\n}]);"
    },
    {
      "id": 54,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\collections\\collections.create.js",
      "name": "./public/modules/data_dashboard/src/controllers/collections/collections.create.js",
      "index": 54,
      "index2": 52,
      "size": 2319,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/collections/collections.create.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.controller('CreateCollectionController', ['$scope', '$http', '$marketcloud', '$location', function (scope, http, $marketcloud, location) {\n  scope.collection = {\n    items: []\n  };\n\n  scope.products = [];\n  scope.itemsToAdd = [];\n\n  scope.customPropertiesData = {};\n\n  scope.query = {};\n\n  // Slug related functions\n  function getSlugFromString(v) {\n    return v.split(' ').map(function (item) {\n      return item.replace(/\\W/g, '');\n    }).map(function (item) {\n      return item.toLowerCase();\n    }).join('-');\n  }\n  scope.unsafeSlug = false;\n\n  scope.updateSlug = function () {\n    scope.collection.slug = getSlugFromString(scope.collection.name);\n  };\n\n  scope.prepareRegex = function () {\n    scope.query.name.$options = 'i';\n  };\n\n  scope.addProductToCollection = function (product) {\n    scope.itemsToAdd.push(product);\n    scope.query.name.$regex = '';\n    scope.products = [];\n  };\n\n  scope.removeProductFromCollection = function (i) {\n    scope.itemsToAdd.splice(i, 1);\n  };\n\n  scope.showTheList = false;\n  scope.showList = function () {\n    scope.showTheList = true;\n  };\n  scope.hideList = function () {\n    window.setTimeout(function () {\n      scope.showTheList = false;\n      scope.$apply();\n    }, 200);\n  };\n  scope.loadProducts = function (query) {\n    query = query || scope.query;\n\n    $marketcloud.products.list(query).then(function (response) {\n      scope.products = response.data.data.filter(function (item) {\n        return scope.itemsToAdd.map(function (i) {\n          return i.id;\n        }).indexOf(item.id) < 0;\n      });\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred. Please try again');\n    });\n  };\n\n  scope.loadProducts();\n\n  scope.saveCollection = function () {\n    for (var k in scope.customPropertiesData) {\n      scope.collection[k] = scope.customPropertiesData[k];\n    }\n    scope.collection.items = scope.itemsToAdd.map(function (item) {\n      return {\n        product_id: item.id\n      };\n    });\n    $marketcloud.collections.save(scope.collection).then(function (response) {\n      notie.alert(1, 'Collection saved', 1.5);\n      location.path('/collections');\n    }).catch(function (response) {\n      notie.alert(2, 'An error has occurred, please try again', 1.5);\n    });\n  };\n}]);"
    },
    {
      "id": 55,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\collections\\collections.edit.js",
      "name": "./public/modules/data_dashboard/src/controllers/collections/collections.edit.js",
      "index": 55,
      "index2": 53,
      "size": 2959,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/collections/collections.edit.js"
        }
      ],
      "source": "'use strict';\n\nangular.module('DataDashboard').controller('EditCollectionController', ['$scope', '$http', '$marketcloud', '$location', 'collection', '$utils', '$validation', '$models', function (scope, http, $marketcloud, location, collection, $utils, $validation, $models) {\n  scope.collection = collection.data.data;\n\n  scope.products = [];\n  scope.itemsToAdd = angular.copy(scope.collection.items);\n\n  scope.query = {};\n\n  // This will hold custom properties for further processing\n  scope.customPropertiesData = {};\n\n  // mapping non-core attributes into scope.customPropertiesData\n  var coreProperties = Models.Collection.getPropertyNames();\n\n  coreProperties.push('id', 'application_id', 'seo');\n\n  for (var k in scope.collection) {\n    if (coreProperties.indexOf(k) < 0) {\n      scope.customPropertiesData[k] = scope.collection[k];\n      delete scope.collection[k];\n    }\n  }\n\n  scope.unsafeSlug = false;\n\n  scope.updateSlug = function () {\n    scope.collection.slug = $utils.getSlugFromString(scope.collection.name);\n  };\n\n  scope.prepareRegex = function () {\n    scope.query.name.$options = 'i';\n  };\n\n  scope.addProductToCollection = function (product) {\n    scope.itemsToAdd.push(product);\n    scope.query.name.$regex = '';\n    scope.products = [];\n  };\n\n  scope.removeProductFromCollection = function (i) {\n    scope.itemsToAdd.splice(i, 1);\n  };\n\n  scope.showTheList = false;\n  scope.showList = function () {\n    scope.showTheList = true;\n  };\n  scope.hideList = function () {\n    window.setTimeout(function () {\n      scope.showTheList = false;\n      scope.$apply();\n    }, 200);\n  };\n  scope.loadProducts = function (query) {\n    query = query || scope.query;\n\n    $marketcloud.products.list(query).then(function (response) {\n      scope.products = response.data.data.filter(function (item) {\n        return scope.itemsToAdd.map(function (i) {\n          return i.id;\n        }).indexOf(item.id) < 0;\n      });\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred. Please try again');\n    });\n  };\n\n  scope.loadProducts();\n\n  scope.saveCollection = function () {\n\n    // let's re-assemble the custom properties first.\n    for (var k in scope.customPropertiesData) {\n      scope.collection[k] = scope.customPropertiesData[k];\n    }\n    scope.collection.items = scope.itemsToAdd.map(function (item) {\n      return {\n        product_id: item.id\n      };\n    });\n    $marketcloud.collections.update(scope.collection.id, scope.collection).then(function (response) {\n      notie.alert(1, 'Collection saved', 1.5);\n    }).catch(function (response) {\n\n      if (response.status === 400) {\n        notie.alert(2, 'The data you entered has some errors', 1.5);\n\n        var validation = response.data.errors[0];\n        $validation.showErrorMessage(validation, $models.Collection.schema, '[ng-model=\"collection.' + validation.invalidPropertyName + '\"]');\n      } else notie.alert(3, 'An error has occurred.', 2);\n    });\n  };\n}]);"
    },
    {
      "id": 56,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\collections\\collections.new.js",
      "name": "./public/modules/data_dashboard/src/controllers/collections/collections.new.js",
      "index": 56,
      "index2": 54,
      "size": 2451,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/collections/collections.new.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.controller('CreateCollectionController', ['$scope', '$http', '$marketcloud', '$location', '$utils', '$validation', '$models', function (scope, http, $marketcloud, location, $utils, $validation, $models) {\n  scope.collection = {\n    items: []\n  };\n\n  scope.products = [];\n  scope.itemsToAdd = [];\n\n  scope.customPropertiesData = {};\n\n  scope.query = {};\n\n  scope.unsafeSlug = false;\n\n  scope.updateSlug = function () {\n    scope.collection.slug = $utils.getSlugFromString(scope.collection.name);\n  };\n\n  scope.prepareRegex = function () {\n    scope.query.name.$options = 'i';\n  };\n\n  scope.addProductToCollection = function (product) {\n    scope.itemsToAdd.push(product);\n    scope.query.name.$regex = '';\n    scope.products = [];\n  };\n\n  scope.removeProductFromCollection = function (i) {\n    scope.itemsToAdd.splice(i, 1);\n  };\n\n  scope.showTheList = false;\n  scope.showList = function () {\n    scope.showTheList = true;\n  };\n  scope.hideList = function () {\n    window.setTimeout(function () {\n      scope.showTheList = false;\n      scope.$apply();\n    }, 200);\n  };\n  scope.loadProducts = function (query) {\n    query = query || scope.query;\n\n    $marketcloud.products.list(query).then(function (response) {\n      scope.products = response.data.data.filter(function (item) {\n        return scope.itemsToAdd.map(function (i) {\n          return i.id;\n        }).indexOf(item.id) < 0;\n      });\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred. Please try again');\n    });\n  };\n\n  scope.loadProducts();\n\n  scope.saveCollection = function () {\n    for (var k in scope.customPropertiesData) {\n      scope.collection[k] = scope.customPropertiesData[k];\n    }\n    scope.collection.items = scope.itemsToAdd.map(function (item) {\n      return {\n        product_id: item.id\n      };\n    });\n    $marketcloud.collections.save(scope.collection).then(function (response) {\n      notie.alert(1, 'Collection saved', 1.5);\n      location.path('/collections');\n    }).catch(function (response) {\n\n      if (response.status === 400) {\n        notie.alert(2, 'The data you entered has some errors', 1.5);\n\n        var validation = response.data.errors[0];\n        $validation.showErrorMessage(validation, $models.Collection.schema, '[ng-model=\"collection.' + validation.invalidPropertyName + '\"]');\n      } else notie.alert(3, 'An error has occurred.', 2);\n    });\n  };\n}]);"
    },
    {
      "id": 57,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\contentTranslations.controller.js",
      "name": "./public/modules/data_dashboard/src/controllers/contentTranslations.controller.js",
      "index": 57,
      "index2": 55,
      "size": 3131,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/contentTranslations.controller.js"
        }
      ],
      "source": "'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n(function () {\n  'use strict';\n\n  angular.module('DataDashboard').controller('EditContentTranslationsController', EditContentTranslationsController);\n\n  EditContentTranslationsController.$inject = ['$scope', '$marketcloud', 'content', '$http', '$application', '$location', 'LocalesFactory'];\n\n  function EditContentTranslationsController(scope, $marketcloud, content, $http, $application, $location, locales) {\n    if ($application.getAvailableLocaleCodes().length === 0) {\n      notie.alert(2, 'This store has no additional locale. Please add a locale first.', 2);\n      return $location.path('/system/localization');\n    }\n\n    // Injecting resolve data into the controller\n    scope.content = content.data.data;\n\n    // This is fetched from the app's config\n    scope.availableLocales = [];\n\n    // mocking the retrieval of locales\n    scope.locales = locales;\n\n    scope.availableLocales = $application.get().locales.split(',').map(function (code) {\n      return scope.locales[code];\n    });\n\n    // Which locale we are currently editing\n    scope.currentLocale = scope.availableLocales[0];\n\n    // Init locales object\n    if (!scope.content.hasOwnProperty('locales')) {\n      scope.content.locales = {};\n    }\n\n    // Checking that the product has initialized every locale sub object\n    scope.availableLocales.forEach(function (locale) {\n      // Se il prodotto.locales non ha il locale, creo l'oggetto\n      if (!scope.content.locales.hasOwnProperty(locale.code)) {\n        scope.content.locales[locale.code] = {};\n      }\n    });\n\n    // Slugs functions\n    function getSlugFromString(v) {\n      return v.split(' ').map(function (item) {\n        return item.replace(/\\W/g, '');\n      }).map(function (item) {\n        return item.toLowerCase();\n      }).join('-');\n    }\n    scope.unsafeSlug = false;\n\n    scope.updateSlug = function () {\n      scope.content.locales[scope.currentLocale.code].slug = getSlugFromString(scope.content.locales[scope.currentLocale.code].name);\n    };\n\n    scope.getFlagClassName = function () {\n      return 'flag-icon-' + scope.currentLocale.code.slice(-2).toLocaleLowerCase();\n    };\n\n    scope.updateTranslations = function () {\n      var payload = {\n        locales: angular.copy(scope.content.locales)\n      };\n\n      $marketcloud.contents.update(scope.content.id, payload).then(function (response) {\n        notie.alert(1, 'All updates have been saved.', 2);\n      }).catch(function (error) {\n        notie.alert(3, 'An error has occurred, please try again', 2);\n      });\n    };\n\n    scope.filterNotNullProperties = function (item) {\n      var result = {};\n      for (var k in item) {\n        if (item[k]) {\n          result[k] = item[k];\n        }\n      }\n      return result;\n    };\n\n    scope.typeof = function (y) {\n      return typeof y === 'undefined' ? 'undefined' : _typeof(y);\n    };\n  }\n})();"
    },
    {
      "id": 58,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\contents\\content.edit.js",
      "name": "./public/modules/data_dashboard/src/controllers/contents/content.edit.js",
      "index": 58,
      "index2": 56,
      "size": 3466,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/contents/content.edit.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.controller('EditContentController', ['$scope', '$http', 'content', '$location', '$marketcloud', 'moment', '$utils', '$validation', '$models', function (scope, http, content, location, $marketcloud, $moment, $utils, $validation, $model) {\n  scope.content = content.data.data;\n\n  scope.products = [];\n  scope.itemsToAdd = [];\n\n  scope.selectedProducts = [];\n\n  if (scope.content.products && scope.content.products.length > 0) {\n    scope.selectedProducts = scope.content.products;\n  }\n\n  scope.content.date = $moment(scope.content.date);\n\n  // mapping non-core attributes into scope.customPropertiesData\n  var coreProperties = Models.Content.getPropertyNames();\n\n  coreProperties.push('id', 'locales', 'seo', 'application_id', 'images', 'slug', 'published', 'category', 'date', 'updated_at', 'created_at', 'type');\n\n  scope.customPropertiesData = {};\n\n  for (var k in scope.content) {\n    if (coreProperties.indexOf(k) === -1) {\n      scope.customPropertiesData[k] = scope.content[k];\n      delete scope.content[k];\n    }\n  }\n\n  scope.removeProduct = function (idx) {\n    scope.selectedProducts.splice(idx, 1);\n  };\n\n  scope.addProduct = function (product) {\n    product.quantity = 1;\n\n    scope.selectedProducts.push(product);\n\n    scope.query.name.$regex = '';\n    scope.products = [];\n  };\n\n  scope.showTheList = false;\n  scope.showList = function () {\n    scope.showTheList = true;\n  };\n\n  scope.hideList = function () {\n    window.setTimeout(function () {\n      scope.showTheList = false;\n      scope.$apply();\n    }, 200);\n  };\n\n  scope.prepareRegex = function () {\n    scope.query.name.$options = 'i';\n  };\n\n  scope.loadProducts = function (query) {\n    query = query || scope.query;\n\n    $marketcloud.products.list(query).then(function (response) {\n      scope.products = response.data.data.filter(function (item) {\n        return scope.itemsToAdd.map(function (i) {\n          return i.id;\n        }).indexOf(item.id) < 0;\n      });\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred. Please try again');\n    });\n  };\n\n  scope.unsafeSlug = false;\n  scope.updateSlug = function () {\n    scope.content.slug = $utils.getSlugFromString(scope.content.title);\n  };\n\n  scope.getImagesContainer = function () {\n    return scope.content.author.images;\n  };\n\n  scope.removeImage = function (i) {\n    scope.content.author.images.splice(i, 1);\n  };\n\n  scope.updateContent = function () {\n    var toSave = angular.copy(scope.content);\n\n    for (var k in scope.customPropertiesData) {\n      toSave[k] = scope.customPropertiesData[k];\n    }\n\n    var products = scope.selectedProducts.map(function (prod) {\n      return parseInt(prod.id);\n    });\n\n    toSave.items = products;\n\n    $marketcloud.contents.update(scope.content.id, toSave).then(function (response) {\n      notie.alert(1, 'Content updated with success', 1.5);\n    }).catch(function (response) {\n\n      if (response.status === 400) {\n        notie.alert(2, 'The data you entered has some errors', 1.5);\n\n        var validation = response.data.errors[0];\n        var selector = '[ng-model=\"content.' + validation.invalidPropertyName + '\"]';\n\n        if (angular.element(selector).length === 0) selector = '[validate-for=\"' + validation.invalidPropertyName + '\"]';\n\n        $validation.showErrorMessage(validation, $models.Content.schema, selector);\n      } else notie.alert(3, 'An error has occurred.', 2);\n    });\n  };\n}]);"
    },
    {
      "id": 59,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\contents\\content.new.js",
      "name": "./public/modules/data_dashboard/src/controllers/contents/content.new.js",
      "index": 59,
      "index2": 57,
      "size": 3331,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/contents/content.new.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.controller('ContentController', ['$scope', '$http', '$location', '$marketcloud', '$utils', '$validation', '$models', '$account', function (scope, http, location, $marketcloud, $utils, $validation, $models, $account) {\n\n  scope.content = {\n    title: '',\n    slug: '',\n    text: '',\n    published: false,\n    items: [],\n    author: {\n      name: $account.get('full_name'),\n      description: '',\n      images: [$account.get('image_url')]\n\n    },\n    seo: {\n      meta: {},\n      twitter: {},\n      facebook: {}\n    }\n  };\n\n  scope.products = [];\n  scope.itemsToAdd = [];\n\n  scope.selectedProducts = [];\n\n  scope.customPropertiesData = {};\n\n  // This method must be implemented in order to\n  // make the media manager work\n  scope.getImagesContainer = function () {\n    return scope.content.author.images;\n  };\n\n  scope.removeImage = function (i) {\n    scope.content.author.images.splice(i, 1);\n  };\n\n  // This function is invoked when a seo property\n  // changes.\n  scope.computeSeoTags = function () {};\n\n  scope.removeProduct = function (idx) {\n    scope.selectedProducts.splice(idx, 1);\n  };\n\n  scope.addProduct = function (product) {\n    product.quantity = 1;\n\n    scope.selectedProducts.push(product);\n\n    scope.query.name.$regex = '';\n    scope.products = [];\n  };\n\n  scope.showTheList = false;\n  scope.showList = function () {\n    scope.showTheList = true;\n  };\n\n  scope.hideList = function () {\n    window.setTimeout(function () {\n      scope.showTheList = false;\n      scope.$apply();\n    }, 200);\n  };\n\n  scope.prepareRegex = function () {\n    scope.query.name.$options = 'i';\n  };\n\n  scope.loadProducts = function (query) {\n    query = query || scope.query;\n\n    $marketcloud.products.list(query).then(function (response) {\n      scope.products = response.data.data.filter(function (item) {\n        return scope.itemsToAdd.map(function (i) {\n          return i.id;\n        }).indexOf(item.id) < 0;\n      });\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred. Please try again');\n    });\n  };\n\n  scope.unsafeSlug = false;\n  scope.updateSlug = function () {\n    scope.content.slug = $utils.getSlugFromString(scope.content.title);\n  };\n  scope.saveContent = function () {\n    for (var k in scope.customPropertiesData) {\n      scope.content[k] = scope.customPropertiesData[k];\n    }\n\n    var products = scope.selectedProducts.map(function (prod) {\n      return parseInt(prod.id);\n    });\n\n    if (products.length > 0) {\n      scope.content.items = products;\n    }\n\n    $validation.hideErrors();\n    $marketcloud.contents.save(scope.content).then(function (response) {\n      // title text author\n      notie.alert(1, 'Content saved', 2);\n      location.path('/contents');\n    }).catch(function (response) {\n\n      if (response.status === 400) {\n        notie.alert(2, 'The data you entered has some errors', 1.5);\n\n        var validation = response.data.errors[0];\n        var selector = '[ng-model=\"content.' + validation.invalidPropertyName + '\"]';\n\n        if (angular.element(selector).length === 0) selector = '[validate-for=\"' + validation.invalidPropertyName + '\"]';\n\n        $validation.showErrorMessage(validation, $models.Content.schema, selector);\n      } else notie.alert(3, 'An error has occurred.', 2);\n    });\n  };\n}]);"
    },
    {
      "id": 60,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\contents\\contents.list.js",
      "name": "./public/modules/data_dashboard/src/controllers/contents/contents.list.js",
      "index": 60,
      "index2": 58,
      "size": 2072,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/contents/contents.list.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.controller('ContentsController', ['$scope', '$http', 'contents', '$marketcloud', function (scope, http, resources, $marketcloud) {\n  // Pagination\n  scope.pagination = {\n    currentPage: resources.data.page,\n    numberOfPages: resources.data.pages,\n    nextPage: resources.data._links.next || null,\n    previousPage: resources.data._links.prev || null,\n    count: resources.data.count\n\n    // Query\n  };scope.query = {\n    per_page: 20\n\n    // Initial data resolved from the router\n  };scope.contents = resources.data.data;\n\n  scope.loadPage = function (p) {\n    return scope.loadData({ page: p });\n  };\n  scope.loadData = function (query) {\n    if (!query) {\n      query = scope.query;\n    }\n\n    $marketcloud.contents.list(query).then(function (response) {\n      scope.contents = response.data.data;\n\n      scope.pagination = {\n        currentPage: response.data.page,\n        numberOfPages: response.data.pages,\n        nextPage: response.data._links.next || null,\n        previousPage: response.data._links.prev || null,\n        count: response.data.count\n      };\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred. Please try again.', 1.5);\n    });\n  };\n  scope.setPublishing = function (content) {\n    return http({\n      method: 'PUT',\n      url: API_BASE_URL + '/contents/' + content.id,\n      data: {\n        published: content.published\n      },\n      headers: {\n        Authorization: window.public_key + ':' + window.token\n      }\n\n    }).then(function (response) {\n      notie.alert(1, 'Updated!', 1.5);\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred, please try again.', 1.5);\n    });\n  };\n\n  scope.deleteContent = function (content_id, index) {\n    $marketcloud.contents.delete(content_id).then(function (response) {\n      scope.loadData({\n        page: 1\n      });\n      notie.alert(1, 'Content deleted', 1.5);\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred.Please try again.', 1.5);\n    });\n  };\n}]);"
    },
    {
      "id": 61,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\contents\\groupedProducts.edit.js",
      "name": "./public/modules/data_dashboard/src/controllers/contents/groupedProducts.edit.js",
      "index": 61,
      "index2": 59,
      "size": 4486,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/contents/groupedProducts.edit.js"
        }
      ],
      "source": "'use strict';\n\nangular.module('DataDashboard').controller('EditGroupedProductController', ['$scope', '$marketcloud', 'product', '$http', function (scope, $marketcloud, product, $http) {\n  scope.customPropertiesData = {};\n\n  scope.itemsToAdd = [];\n\n  // Injecting resolve data into the controller\n  scope.product = product.data.data;\n\n  var product_ids = scope.product.items.map(function (product) {\n    return product.product_id;\n  });\n\n  $marketcloud.products.list({\n    id: product_ids.join(',')\n  }).then(function (response) {\n    var p_map = {};\n\n    scope.product.items.forEach(function (i) {\n      p_map[i.product_id] = i;\n    });\n\n    // We fetch the products data, then we must add the properties\n    // related to them being in the grouped product, such as the quantity\n    scope.itemsToAdd = response.data.data.map(function (prod) {\n      var p = angular.copy(prod);\n      p.quantity = p_map[p.id]['quantity'];\n      return p;\n    });\n    // scope.product.items = response.data.data;\n  }).catch(function (error) {\n    notie.alert(3, 'An error has occurred', 1.5);\n  });\n\n  // mapping non-core attributes into scope.customPropertiesData\n  var coreProperties = Models.Product.getPropertyNames();\n  coreProperties.push('product_id', 'variant_id', 'display_price', 'display_price_discount', 'items');\n  for (var k in scope.product) {\n    if (coreProperties.indexOf(k) < 0) {\n      scope.customPropertiesData[k] = scope.product[k];\n      delete scope.product[k];\n    }\n  }\n\n  function getSlugFromString(v) {\n    return v.split(' ').map(function (item) {\n      return item.replace(/\\W/g, '');\n    }).map(function (item) {\n      return item.toLowerCase();\n    }).join('-');\n  }\n  scope.unsafeSlug = false;\n\n  scope.updateSlug = function () {\n    scope.product.slug = getSlugFromString(scope.product.name);\n  };\n\n  // This method must be implemented in order to\n  // make the media manager work\n  scope.getImagesContainer = function () {\n    return scope.product.images;\n  };\n\n  scope.removeImage = function (i) {\n    scope.product.images.splice(i, 1);\n  };\n\n  scope.categories = [];\n  // Loading categories\n  /* $http({\r\n  \tmethod: 'GET',\r\n  \turl: API_BASE_URL+'/categories',\r\n  \theaders: {\r\n  \t\tAuthorization: window.public_key + ':' + window.token\r\n  \t}\r\n  }) */\n  $marketcloud.categories.list().success(function (response) {\n    scope.categories = response.data;\n  }).error(function () {\n    notie.alert(2, 'An error has occurred while loading categories', 2);\n  });\n\n  scope.brands = [];\n  // Loading brands\n\n  $marketcloud.brands.list().success(function (response) {\n    scope.brands = response.data;\n  }).error(function () {\n    notie.alert(2, 'An error has occurred while loading brands', 2);\n  });\n\n  scope.filterVariantProps = function (o) {\n    var p = {};\n    for (var k in o) {\n      // if its not an inherited property, then it's a variant property name\n      if (scope.product.variantsDefinition.hasOwnProperty(k)) {\n        p[k] = o[k];\n      }\n    }\n    return p;\n\n    // return o\n  };\n\n  scope.getVariantStyle = function (i) {\n    // var r = [{\"color\" : \"red\"},{\"color\" : \"green\"},{\"color\" : \"blue\"}, {\"color\" : \"pink\"}\n    // ]\n    var r = ['label-info', 'label-danger', 'label-warning', 'label-success'];\n    return r[i % r.length];\n  };\n  scope.getVariantStyle = function (i) {\n    var r = [{\n      'color': 'red'\n    }, {\n      'color': 'green'\n    }, {\n      'color': 'blue'\n    }, {\n      'color': 'pink'\n    }];\n    return r[i % r.length];\n  };\n\n  scope.newAttribute = {\n    name: null,\n    value: null,\n    type: null\n  };\n  scope.newAttribute.type = 'string';\n  scope.availableTypes = [{ name: 'String', value: 'string' }, { name: 'Number', value: 'number' }, { name: 'Boolean', value: 'boolean' }];\n\n  scope.filterNotNullProperties = function (item) {\n    var result = {};\n    for (var k in item) {\n      if (item[k]) {\n        result[k] = item[k];\n      }\n    }\n    return result;\n  };\n\n  scope.updateProduct = function () {\n    // let's re-assemble the product first.\n    for (var k in scope.customPropertiesData) {\n      scope.product[k] = scope.customPropertiesData[k];\n    }\n\n    scope.product.items = scope.itemsToAdd.map(function (item) {\n      return { product_id: item.id, quantity: item.quantity };\n    });\n\n    $marketcloud.products.update(scope.product.id, scope.product).success(function (response) {\n      notie.alert(1, 'Update Succeded', 1.5);\n    }).error(function (response) {\n      notie.alert(3, 'Update failed', 1.5);\n    });\n  };\n}]);"
    },
    {
      "id": 62,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\contents\\groupedProducts.new.js",
      "name": "./public/modules/data_dashboard/src/controllers/contents/groupedProducts.new.js",
      "index": 62,
      "index2": 60,
      "size": 5491,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/contents/groupedProducts.new.js"
        }
      ],
      "source": "'use strict';\n\nangular.module('DataDashboard').controller('NewGroupedProductController', ['$scope', '$http', '$location', '$marketcloud', function (scope, $http, location, $marketcloud) {\n  scope.categories = [];\n  scope.error = null;\n  scope.newCategory = {};\n  scope.brands = [];\n  scope.newBrand = {};\n\n  // This method must be implemented in order to\n  // make the media manager work\n  scope.getImagesContainer = function () {\n    return scope.product.images;\n  };\n\n  scope.removeImage = function (i) {\n    scope.product.images.splice(i, 1);\n  };\n\n  function getSlugFromString(v) {\n    return v.split(' ').map(function (item) {\n      return item.replace(/\\W/g, '');\n    }).map(function (item) {\n      return item.toLowerCase();\n    }).join('-');\n  }\n  scope.unsafeSlug = false;\n\n  scope.updateSlug = function () {\n    scope.product.slug = getSlugFromString(scope.product.name);\n  };\n\n  scope.loadCategories = function () {\n    $marketcloud.categories.list({}).success(function (response) {\n      scope.categories = response.data;\n    }).error(function () {\n      console.log('An error has occurred while loading categories');\n    });\n  };\n\n  // Initializing the categories array\n  scope.loadCategories();\n\n  scope.saveCategory = function () {\n    $marketcloud.categories.save(scope.newCategory).success(function (response) {\n      $('#newCategoryModal').modal('hide');\n      scope.categories.push(scope.newCategory);\n      scope.newCategory = {};\n    }).error(function (response) {\n      $('#newCategoryModal').hide();\n      notie.alert(3, 'An error has occurred. Category not saved', 1);\n    });\n  };\n\n  scope.loadBrands = function () {\n    $marketcloud.brands.list({}).success(function (response) {\n      scope.brands = response.data;\n    }).error(function () {\n      console.log('An error has occurred while loading brands');\n    });\n  };\n  // Initializing the brands array\n  scope.loadBrands();\n\n  scope.saveBrand = function () {\n    $marketcloud.brands.save(scope.newBrand).success(function (response) {\n      $('#newBrandModal').modal('hide');\n      scope.brands.push(scope.newBrand);\n      scope.newBrand = {};\n    }).error(function (response) {\n      $('#newBrandModal').hide();\n      notie.alert(3, 'An error has occurred. Brand not saved', 1);\n    });\n  };\n\n  scope.product = {\n    type: 'grouped_product',\n    price: 0,\n    name: '',\n    description: '',\n    stock_type: 'status',\n    stock_status: 'in_stock',\n    images: [],\n    has_variants: false,\n    published: true,\n    items: []\n\n  };\n\n  scope.productError = null;\n  scope.newCustomProperty = {};\n  scope.customPropertiesData = {};\n\n  // This contains validation Errors\n  scope.Forms = {};\n\n  scope.Forms.newCustomProperty = {\n    name: null,\n    value: null\n\n    // Array of new properties's names (strings)\n  };scope.customPropertiesNames = [];\n\n  scope.hideErrors = function () {\n    scope.error = null;\n    scope.errorField = null;\n  };\n\n  scope.saveProduct = function () {\n    for (var k in scope.product) {\n      if (scope.product[k] === null) {\n        delete scope.product[k];\n        console.log('Un null');\n      }\n    }\n\n    scope.hideErrors();\n\n    // Custom properties cannot be validated through Schematic.\n    var props_to_validate = {};\n    var known_props = Models.GroupedProduct.getPropertyNames();\n    for (var k in scope.product) {\n      if (known_props.indexOf(k) > -1) {\n        props_to_validate[k] = scope.product[k];\n      }\n    }\n    /* var validation = Models.GroupedProduct.validate(scope.product);\r\n    \t\tif (validation.valid === false) {\r\n    \tscope.errorField = validation.invalidPropertyName;\r\n    \t\t\tif (validation.failedValidator === 'required')\r\n    \t\tscope.error = 'The ' + scope.errorField + ' field is required';\r\n    \telse if (validation.failedValidator === 'min') {\r\n    \t\tif ('string' === typeof scope.product[validation.invalidPropertyName])\r\n    \t\t\tscope.error = 'The ' + scope.errorField + ' field must have at least ' + Models.Product.schema[validation.invalidPropertyName].min + ' characters';\r\n    \t\telse\r\n    \t\t\tscope.error = 'The ' + scope.errorField + ' field must be greater than or equal to ' + Models.Product.schema[validation.invalidPropertyName].min;\r\n    \t\t\t} else if (validation.failedValidator === 'max') {\r\n    \t\t\t\tif ('string' === typeof scope.product[validation.invalidPropertyName])\r\n    \t\t\tscope.error = 'The ' + scope.errorField + ' field must have less than ' + Models.Product.schema[validation.invalidPropertyName].max + ' characters';\r\n    \t\telse\r\n    \t\t\tscope.error = 'The ' + scope.errorField + ' field must be lesser than or equal to ' + Models.Product.schema[validation.invalidPropertyName].min;\r\n    \t} else {\r\n    \t\tscope.error = 'The ' + scope.errorField + ' field has an invalid value ('+props_to_validate[scope.errorField]+')';\r\n    \t}\r\n    \treturn;\r\n    } */\n\n    for (var k in scope.customPropertiesData) {\n      scope.product[k] = scope.customPropertiesData[k];\n    }\n\n    for (var key in scope.product) {\n      if (scope.product[key] === null) {\n        delete scope.product[key];\n      }\n    }\n    console.log('Saving this prod', scope.product);\n\n    scope.product.items = scope.product.items.map(function (item) {\n      return { product_id: item.id };\n    });\n\n    $marketcloud.products.save(scope.product).success(function (response) {\n      notie.alert(1, 'Product saved', 1.5);\n      location.path('/products');\n    }).error(function (response) {\n      notie.alert(2, 'An error has occurred. Product not saved', 1);\n    });\n  };\n}]);"
    },
    {
      "id": 63,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\coupons\\coupon.edit.js",
      "name": "./public/modules/data_dashboard/src/controllers/coupons/coupon.edit.js",
      "index": 63,
      "index2": 61,
      "size": 3360,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/coupons/coupon.edit.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.controller('EditCouponController', ['$scope', '$http', '$marketcloud', '$location', '$validation', '$models', 'coupon', function (scope, http, $marketcloud, location, $validation, $models, coupon) {\n  scope.coupon = coupon.data.data;\n\n  scope.save = function () {\n    $validation.hideErrors();\n    $marketcloud.coupons.update(scope.coupon.id, scope.coupon).then(function (response) {\n      notie.alert(1, 'Coupon updated', 1.5);\n    }).catch(function (response) {\n\n      if (response.status === 400) {\n        notie.alert(2, 'The data you entered has some errors', 1.5);\n\n        var validation = response.data.errors[0];\n        var selector = '[ng-model=\"coupon.' + validation.invalidPropertyName + '\"]';\n\n        if (angular.element(selector).length === 0) selector = '[validate-for=\"' + validation.invalidPropertyName + '\"]';\n\n        $validation.showErrorMessage(validation, $models.Coupon.schema, selector);\n      } else notie.alert(3, 'An error has occurred.', 2);\n    });\n  };\n\n  if ('expiration_date' in scope.coupon) {\n    scope.hasExpirationDate = true;\n  }\n\n  if ('usages_left' in scope.coupon) {\n    scope.limitedUsage = true;\n  }\n\n  scope.toggleCouponExpiration = function () {\n    scope.coupon.expiration_date = null;\n  };\n\n  scope.toggleCouponUsage = function () {\n    scope.coupon.usages_left = null;\n  };\n\n  scope.clearTargetId = function () {\n    scope.coupon.target_id = null;\n  };\n\n  scope.addCondition = function () {\n    scope.coupon.conditions.push(scope.newCondition);\n    scope.newCondition = {};\n  };\n  scope.addEffect = function () {\n    scope.coupon.effects.push(scope.newEffect);\n    scope.newEffect = {};\n  };\n\n  // Target management\n  // Stuff to add a product.\n  // This must be packaged into a component\n  scope.products = [];\n  scope.itemsToAdd = [];\n  // This is used as a reference after i pick a product\n  scope.targetProduct = null;\n  // If the coupon already has a target product\n  // we must load it\n  if (scope.coupon.target_type === 'PRODUCT_COUPON') {\n    $marketcloud.products.getById(scope.coupon.target_id).then(function (response) {\n      scope.targetProduct = response.data.data;\n    }).catch(function (response) {\n      notie.alert(2, 'An error has occurred', 2);\n    });\n  }\n\n  scope.query = {};\n\n  scope.prepareRegex = function () {\n    scope.query.name.$options = 'i';\n  };\n\n  scope.showTheList = false;\n  scope.showList = function () {\n    scope.showTheList = true;\n  };\n  scope.hideList = function () {\n    window.setTimeout(function () {\n      scope.showTheList = false;\n      scope.$apply();\n    }, 200);\n  };\n  scope.loadProducts = function (query) {\n    query = query || scope.query;\n\n    $marketcloud.products.list(query).then(function (response) {\n      scope.products = response.data.data.filter(function (item) {\n        return scope.itemsToAdd.map(function (i) {\n          return i.id;\n        }).indexOf(item.id) < 0;\n      });\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred. Please try again');\n    });\n  };\n\n  scope.selectProductAsTarget = function (product) {\n    scope.targetProduct = product;\n    scope.coupon.target_id = product.id;\n  };\n  scope.resetTargetProduct = function () {\n    scope.targetProduct = null;\n  };\n\n  scope.loadProducts();\n\n  scope.handleCategoryChange = function () {};\n}]);"
    },
    {
      "id": 64,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\coupons\\coupons.new.js",
      "name": "./public/modules/data_dashboard/src/controllers/coupons/coupons.new.js",
      "index": 64,
      "index2": 62,
      "size": 3202,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/coupons/coupons.new.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.controller('NewCouponController', ['$scope', '$http', '$marketcloud', '$location', '$validation', '$models', function (scope, http, $marketcloud, location, $validation, $models) {\n  scope.coupon = {\n    active: true,\n    discount_type: 'NET_REDUCTION'\n  };\n  scope.randomizeCode = function () {\n    scope.coupon.code = Math.random().toString(36).substr(2, 10).toUpperCase();\n  };\n\n  scope.updateCouponExpiration = function () {\n    if (scope.hasExpirationDate !== true) {\n      delete scope.coupon.expiration_date;\n    }\n  };\n\n  scope.clearTargetId = function () {\n    scope.coupon.target_id = null;\n  };\n\n  scope.updateCouponUsage = function () {\n    if (scope.limitedUsage !== true) {\n      delete scope.coupon.usages_left;\n    }\n  };\n\n  scope.save = function () {\n\n    for (var k in scope.coupon) {\n      if (scope.coupon[k] === null) {\n        delete scope.coupon[k];\n      }\n    }\n\n    $validation.hideErrors();\n\n    $marketcloud.coupons.save(scope.coupon).then(function (response) {\n      notie.alert(1, 'Coupon saved', 1.5);\n      location.path('/coupons');\n    }).catch(function (response) {\n\n      if (response.status === 400) {\n        notie.alert(2, 'The data you entered has some errors', 1.5);\n\n        var validation = response.data.errors[0];\n        var selector = '[ng-model=\"coupon.' + validation.invalidPropertyName + '\"]';\n\n        if (angular.element(selector).length === 0) selector = '[validate-for=\"' + validation.invalidPropertyName + '\"]';\n\n        $validation.showErrorMessage(validation, $models.Coupon.schema, selector);\n      } else notie.alert(3, 'An error has occurred.', 2);\n    });\n  };\n\n  scope.addCondition = function () {\n    scope.coupon.conditions.push(scope.newCondition);\n    scope.newCondition = {};\n  };\n  scope.addEffect = function () {\n    scope.coupon.effects.push(scope.newEffect);\n    scope.newEffect = {};\n  };\n\n  // Stuff to add a product.\n  // This must be packaged into a component\n  scope.products = [];\n  scope.itemsToAdd = [];\n  // This is used as a reference after i pick a product\n  scope.targetProduct = null;\n\n  scope.query = {};\n\n  scope.prepareRegex = function () {\n    scope.query.name.$options = 'i';\n  };\n\n  scope.showTheList = false;\n  scope.showList = function () {\n    scope.showTheList = true;\n  };\n  scope.hideList = function () {\n    window.setTimeout(function () {\n      scope.showTheList = false;\n      scope.$apply();\n    }, 200);\n  };\n  scope.loadProducts = function (query) {\n    query = query || scope.query;\n\n    $marketcloud.products.list(query).then(function (response) {\n      scope.products = response.data.data.filter(function (item) {\n        return scope.itemsToAdd.map(function (i) {\n          return i.id;\n        }).indexOf(item.id) < 0;\n      });\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred. Please try again');\n    });\n  };\n\n  scope.selectProductAsTarget = function (product) {\n    scope.targetProduct = product;\n    scope.coupon.target_id = product.id;\n  };\n  scope.resetTargetProduct = function () {\n    scope.targetProduct = null;\n  };\n\n  scope.loadProducts();\n\n  scope.handleCategoryChange = function () {};\n}]);"
    },
    {
      "id": 65,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\deploy.js",
      "name": "./public/modules/data_dashboard/src/controllers/deploy.js",
      "index": 65,
      "index2": 63,
      "size": 483,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/deploy.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.controller('DeployController', ['$scope', '$application', function (scope, $application) {\n\n\tscope.selectedTemplate = null;\n\n\tscope.getHerokuURL = function () {\n\t\tvar str = 'https://heroku.com/deploy';\n\t\tstr += '?template=' + scope.selectedTemplate;\n\t\tstr += '&env[MARKETCLOUD_PUBLIC_KEY]=' + $application.get().public_key;\n\t\tstr += '&env[MARKETCLOUD_SECRET_KEY]=' + $application.get().secret_key;\n\t\treturn str;\n\t};\n}]);"
    },
    {
      "id": 66,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\home.js",
      "name": "./public/modules/data_dashboard/src/controllers/home.js",
      "index": 66,
      "index2": 64,
      "size": 6140,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/home.js"
        }
      ],
      "source": "'use strict';\n/* globals angular */\n\nvar app = angular.module('DataDashboard');\n\napp.controller('HomeController', ['$scope', '$http', '$routeParams', 'analytics', 'moment', function (scope, http, params, analytics, moment) {\n  scope.activities = [];\n\n  var getResourceNameFromPath = function getResourceNameFromPath(p) {\n    var names = {\n      'orders': 'an order',\n      'products': 'a product',\n      'categories': 'a category',\n      'brands': 'a brand',\n      'users': 'a user',\n      'cart': 'a cart',\n      'promotions': 'a promotion',\n      'collection': 'a collection'\n\n    };\n    var resourcename = p.split('/')[2];\n\n    if (names.hasOwnProperty(resourcename)) {\n      return names[resourcename];\n    } else {\n      return resourcename;\n    }\n  };\n\n  // What i want to match\n  // new orders\n  // updates to orders\n  // Updates to inventory\n  scope.alerts = [];\n\n  // ORders used to display stats\n  scope.analytics = {\n    today: {\n      total: 0,\n      count: 0\n\n    },\n    yesterday: {\n      total: 0,\n      count: 0\n    },\n    this_week: {\n      total: 0,\n      count: 0\n    },\n    this_month: {\n      total: 0,\n      count: 0\n    }\n  };\n\n  var today = new Date();\n  today.setHours(0, 0, 0, 0);\n  today = today.getTime();\n\n  var yesterday = new Date();\n  yesterday.setDate(yesterday.getDate() - 1);\n  yesterday.setHours(0, 0, 0, 0);\n  yesterday = yesterday.getTime();\n\n  var oneWeekAgo = new Date();\n  oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n  oneWeekAgo.setHours(0, 0, 0, 0);\n  oneWeekAgo = oneWeekAgo.getTime();\n\n  var orders = analytics.data.data;\n\n  scope.ordersToManage = orders.filter(function (order) {\n    return ['processing', 'pending', 'on_hold'].indexOf(order.status) > -1;\n  }).slice(0, 10);\n\n  var salesVolumePerDay = {};\n\n  var numberOfOrdersPerDay = {};\n\n  scope.orders_data = [];\n  scope.orders_labels = [];\n\n  var last_30_days = [];\n  var last_30_days_labels = [];\n  for (var i = 1; i < 30; i++) {\n    var d = new Date();\n    d.setDate(d.getDate() - i);\n    var month = String(d.getMonth() + 1);\n    if (month.length < 2) {\n      month = '0' + month;\n    }\n    var day = d.getFullYear() + '-' + month + '-' + d.getDate();\n\n    last_30_days_labels.push(day);\n    last_30_days.push({\n      date: day,\n      value: 0\n    });\n    salesVolumePerDay[day] = 0;\n  }\n\n  orders.filter(function (x) {\n    // We consider only orders not canceled or refunded or failed for the analytics\n    var invalid_orders = ['failed', 'canceled', 'refunded'];\n    return invalid_orders.indexOf(x.status) < 0;\n  }).map(function (x) {\n    return {\n      created_at: x.created_at,\n      total: x.total\n    };\n  }).forEach(function (x) {\n    var d = new Date(x.created_at);\n    var month = String(d.getMonth() + 1);\n    if (month.length < 2) {\n      month = '0' + month;\n    }\n    var day = d.getFullYear() + '-' + month + '-' + d.getDate();\n\n    if (!salesVolumePerDay[day]) {\n      salesVolumePerDay[day] = 0;\n    }\n\n    salesVolumePerDay[day] += x.total;\n\n    if (!numberOfOrdersPerDay[day]) numberOfOrdersPerDay[day] = 0;\n\n    numberOfOrdersPerDay[day]++;\n  });\n\n  orders.filter(function (x) {\n    // We consider only orders not canceled or refunded or failed for the analytics\n    var invalid_orders = ['failed', 'canceled', 'refunded'];\n    return invalid_orders.indexOf(x.status) < 0;\n  }).map(function (x) {\n    return {\n      created_at: x.created_at,\n      total: x.total\n    };\n  }).forEach(function (x) {\n    if (x.created_at > today) {\n      scope.analytics.today.total = Math.round((scope.analytics.today.total + x.total) * 1000) / 1000;\n      scope.analytics.today.count++;\n\n      scope.analytics.this_month.total = Math.round((scope.analytics.this_month.total + x.total) * 1000) / 1000;\n      scope.analytics.this_month.count++;\n    } else if (x.created_at > yesterday) {\n      scope.analytics.yesterday.total = Math.round((scope.analytics.yesterday.total + x.total) * 1000) / 1000;\n      scope.analytics.yesterday.count++;\n\n      scope.analytics.this_month.total = Math.round((scope.analytics.this_month.total + x.total) * 1000) / 1000;\n      scope.analytics.this_month.count++;\n    } else if (x.created_at > oneWeekAgo) {\n      scope.analytics.this_week.total = Math.round((scope.analytics.this_week.total + x.total) * 1000) / 1000;\n      scope.analytics.this_week.count++;\n\n      scope.analytics.this_month.total = Math.round((scope.analytics.this_month.total + x.total) * 1000) / 1000;\n      scope.analytics.this_month.count++;\n    } else {\n      scope.analytics.this_month.total = Math.round((scope.analytics.this_month.total + x.total) * 1000) / 1000;\n      scope.analytics.this_month.count++;\n    }\n  });\n\n  /*\r\n   *\tHere we feed the Chart.js chart on the dashboard homepage\r\n   *\r\n   *\tThis chart shows orders volume for this month (last 30 days)\r\n   */\n  scope.orders_volume_data = [];\n  scope.orders_count_data = [];\n  scope.orders_volume_labels = [];\n\n  for (var k in salesVolumePerDay) {\n    scope.orders_volume_data.unshift(parseFloat(Number(salesVolumePerDay[k]).toFixed(2)));\n    scope.orders_count_data.unshift(numberOfOrdersPerDay[k]);\n    scope.orders_volume_labels.unshift(moment(k, 'YYYY-M-DD').format('MMM Do'));\n  }\n\n  scope.datasets = [scope.orders_volume_data, scope.orders_count_data];\n\n  scope.getMethodCSSClass = function (a) {\n    var cls = null;\n    switch (a.method) {\n      case 'GET':\n        cls = 'label-success';\n        break;\n      case 'POST':\n        cls = 'label-info';\n        break;\n      case 'PUT':\n        cls = 'label-warning';\n        break;\n      case 'PATCH':\n        cls = 'label-warning';\n        break;\n      case 'DELETE':\n        cls = 'label-danger';\n        break;\n      default:\n        cls = 'label-success';\n        break;\n\n    }\n    return cls;\n  };\n\n  scope.chartOptions = {\n    scaleLabel: \"<%= Number(value).toFixed(2).replace('.',',') %> \" + scope.application.currency_code\n  };\n\n  scope.chartOptions = {\n    scales: {\n      xAxes: [{\n        gridLines: {\n          display: false\n        }\n      }],\n      yAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: scope.application.currency_code\n        }\n      }]\n    }\n  };\n}]);"
    },
    {
      "id": 67,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\integrations.js",
      "name": "./public/modules/data_dashboard/src/controllers/integrations.js",
      "index": 67,
      "index2": 65,
      "size": 4482,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/integrations.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.controller('IntegrationsController', ['$scope', '$http', '$application', function ($scope, $http, $application) {\n  $scope.integrations = [{\n    name: 'braintree',\n    tags: ['payments'],\n    image: 'https://marketcloud.azureedge.net/storm-images/braintree-logo.jpg',\n    description: 'Accept cards and Paypal on web and mobile almost anywhere.',\n    links: {\n      'view': '/documentation/integrations/braintree'\n    }\n  }, {\n    name: 'stripe',\n    tags: ['payments'],\n    image: 'https://marketcloud.azureedge.net/storm-images/stripe.png',\n    description: 'Web and mobile payments. Built for developers.',\n    links: {\n      'view': '/documentation/integrations/stripe'\n    }\n  }, {\n    name: 'facebook',\n    tags: ['authentication'],\n    image: 'https://marketcloud.azureedge.net/storm-images/facebook.png',\n    description: 'Facebook auth integration',\n    links: {\n      'view': '/documentation/guides/facebook-login'\n    }\n  }];\n}]);\n\napp.controller('IntegrationStripeController', ['$scope', '$http', '$routeParams', 'StripeIntegration', '$application', function ($scope, $http, $routeParams, StripeIntegration, $application) {\n  /*\r\n   *  The integration states are\r\n   *\r\n   *  Not installed\r\n   *  Installed inactive\r\n   *  Installed active\r\n   *\r\n   *  Installed means that the oauth flow was completed and we have the data\r\n   *  StripeIntegration is the object we use to inject the integration state fetched from the api\r\n   *\r\n   *  If it's null, we conclude that it is not installed\r\n   */\n  if (StripeIntegration) {\n    $scope.isIntegrationInstalled = true;\n    $scope.StripeIntegration = StripeIntegration.data.data;\n  } else {\n    $scope.isIntegrationInstalled = false;\n  }\n\n  $scope.currentApplication = $application.get();\n\n  // TODO\n  // Lo switch deve essere visibile se e solo se l'integrazione Ã¨ installata. cosÃ¬ da\n  // non essere clicccabile altrimenti.\n\n  $scope.toggleIntegration = function () {\n    return $http({\n      method: 'PUT',\n      url: '/applications/' + $application.get().id + '/integrations/stripe',\n      data: {\n        isActive: $scope.StripeIntegration.isActive\n      }\n    }).then(function (response) {\n      notie.alert(1, 'Integration correctly updated', 1);\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred. Integration not updated', 1);\n    });\n  };\n}]);\n\napp.controller('IntegrationBraintreeController', ['$scope', '$http', '$routeParams', 'BraintreeIntegration', '$application', function ($scope, $http, $routeParams, BraintreeIntegration, $application) {\n  // This bool is used to show/hide credentials form\n  // This form is used to update the credentials\n  $scope.displayCredentialsForm = false;\n\n  $scope.currentApplication = $application.get();\n\n  if (BraintreeIntegration) {\n    $scope.isIntegrationInstalled = true;\n    $scope.braintreeConfiguration = BraintreeIntegration.data.data;\n    $scope.braintreeUpdate = angular.copy(BraintreeIntegration.data.data);\n  } else {\n    $scope.isIntegrationInstalled = false;\n  }\n\n  $scope.toggleCredentialsForm = function () {\n    $scope.displayCredentialsForm = !$scope.displayCredentialsForm;\n  };\n\n  $scope.showModal = function () {\n    $('#BraintreeCredentialsModal').modal('show');\n  };\n\n  $scope.toggleIntegration = function () {\n    return $http({\n      method: 'PUT',\n      url: '/applications/' + $application.get().id + '/integrations/braintree',\n      data: {\n        isActive: $scope.braintreeConfiguration.isActive\n      }\n    }).then(function (response) {\n      notie.alert(1, 'Integration correctly updated', 1);\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred. Integration not updated', 1);\n    });\n  };\n\n  $scope.saveBraintreeConfiguration = function () {\n    console.log(\"Sending\", $scope.braintreeUpdate);\n    $http({\n      method: 'PUT',\n      url: '/applications/' + $application.get().id + '/integrations/braintree',\n      data: $scope.braintreeUpdate\n    }).then(function (response) {\n      notie.alert(1, 'Integration correctly updated', 1);\n      $('#BraintreeCredentialsModal').modal('hide');\n      $scope.isIntegrationInstalled = true;\n      $scope.braintreeConfiguration = angular.copy({\n        environment: $scope.braintreeUpdate.environment,\n        isActive: $scope.braintreeUpdate.isActive\n      });\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred. Integration not updated', 1);\n    });\n  };\n}]);"
    },
    {
      "id": 68,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\invoices\\invoice.new.js",
      "name": "./public/modules/data_dashboard/src/controllers/invoices/invoice.new.js",
      "index": 68,
      "index2": 66,
      "size": 9043,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/invoices/invoice.new.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.controller('NewInvoiceController', ['$scope', '$http', '$marketcloud', '$application', '$location', 'parentOrder', 'orders', 'Countries', '$validation', '$models', function (scope, http, $marketcloud, $application, location, parentOrder, orders, countries, $validation, $models) {\n  scope.invoice = {\n    company: {\n      name: $application.get('company_name'),\n      email: $application.get('email_address'),\n      address: $application.get('company_address'),\n      country: $application.get('company_country'),\n      city: $application.get('company_city'),\n      state: $application.get('company_state'),\n      postal_code: $application.get('company_postalcode'),\n      vat: $application.get('company_taxid')\n\n    },\n    customer: {},\n    date_created: new Date(),\n    date_due: new Date(),\n    lineItems: [{\n      name: '',\n      description: '',\n      quantity: 0,\n      price: 0\n    }]\n  };\n\n  console.log(scope.invoice);\n\n  function setNextInvoiceNumber() {\n    $marketcloud.invoices.list().then(function (response) {\n      var applicationSettings = $application.get();\n      var lastNumber = response.data.data.map(function (invoice) {\n        return invoice.number;\n      }).map(function (number) {\n        if (number.indexOf && number.indexOf(applicationSettings.invoices_prefix) > -1) {\n          number = number.replace(applicationSettings.invoices_prefix, '');\n        }\n\n        if (!isNaN(number)) {\n          number = Number(number);\n        }\n        return number;\n      }).sort(function (a, b) {\n        return a - b;\n      }).pop();\n\n      console.log('LastNumber is ', lastNumber);\n\n      if (!isNaN(lastNumber)) {\n        lastNumber = Number(lastNumber);\n        scope.invoice.number = applicationSettings.invoices_prefix + String(lastNumber + 1);\n      }\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  function fillDataFromOrder(order) {\n    console.log('fillDataFromOrder', order);\n    scope.parentOrder = order;\n    scope.invoice = {\n      order_id: scope.parentOrder.id,\n      company: {\n        name: $application.get('company_name'),\n        email: $application.get('email_address'),\n        address: $application.get('company_address'),\n        country: $application.get('company_country'),\n        city: $application.get('company_city'),\n        state: $application.get('company_state'),\n        postal_code: $application.get('company_postalcode'),\n        vat: $application.get('company_taxid')\n      },\n      customer: {},\n      date_created: new Date(),\n      date_due: new Date(),\n      lineItems: scope.parentOrder.products.map(function (p) {\n        p.description = '';\n        return p;\n      })\n\n      // adding shipping to line items\n    };if (scope.parentOrder.hasOwnProperty('shipping')) {\n      scope.invoice.lineItems.push({\n        name: 'Shipping ' + scope.parentOrder.shipping.name,\n        description: scope.parentOrder.shipping.description,\n        quantity: 1,\n        price: scope.parentOrder.shipping_total\n      });\n    }\n\n    // adding payment method fee to line items\n    if (scope.parentOrder.hasOwnProperty('payment_method')) {\n      scope.invoice.lineItems.push({\n        name: 'Payment method ' + scope.parentOrder.payment_method.name,\n        description: scope.parentOrder.payment_method.description,\n        quantity: 1,\n        price: scope.parentOrder.payment_method_total\n      });\n    }\n\n    // adding coupons to line items\n    if (scope.parentOrder.hasOwnProperty('coupon')) {\n      scope.invoice.lineItems.push({\n        name: 'Coupon ' + scope.parentOrder.coupon.name,\n        description: scope.parentOrder.coupon.description,\n        quantity: 1,\n        price: 0 - Number(scope.parentOrder.coupon_total)\n      });\n    }\n\n    // adding promotions to line items\n    if (scope.parentOrder.hasOwnProperty('promotion')) {\n      scope.invoice.lineItems.push({\n        name: 'Promotion ' + scope.parentOrder.promotion.name,\n        description: scope.parentOrder.promotion.description,\n        quantity: 1,\n        price: 0 - Number(scope.parentOrder.promotion_total)\n      });\n    }\n\n    // We gather customer's invoicing data from the billing address.\n    for (var k in scope.parentOrder.billing_address) {\n      scope.invoice.customer[k] = scope.parentOrder.billing_address[k];\n    }\n  }\n\n  // If the parentOrder is populated, we prefill data\n  if (parentOrder && parentOrder.data) {\n    // Must check for 404s\n    fillDataFromOrder(parentOrder.data.data);\n  } else {\n    scope.parentOrder = null;\n  }\n\n  setNextInvoiceNumber();\n\n  scope.orders = orders.data.data;\n  scope.ordersQuery = {\n    per_page: 5,\n    page: 1\n  };\n  scope.showTheList = false;\n  scope.showList = function () {\n    scope.showTheList = true;\n  };\n  scope.hideList = function () {\n    window.setTimeout(function () {\n      scope.showTheList = false;\n      scope.$apply();\n    }, 200);\n  };\n  scope.loadNextOrders = function () {\n    scope.showTheList = true;\n    scope.ordersQuery.page += 1;\n\n    $marketcloud.orders.list(scope.ordersQuery).then(function (response) {\n      scope.orders = response.data.data;\n    }).catch(function (error) {\n      notie.alert(3);\n    });\n  };\n  scope.loadPreviousOrders = function () {\n    scope.showTheList = true;\n\n    if (scope.ordersQuery.page <= 1) {\n      return;\n    }\n\n    scope.ordersQuery.page -= 1;\n\n    $marketcloud.orders.list(scope.ordersQuery).then(function (response) {\n      scope.orders = response.data.data;\n    }).catch(function (error) {\n      notie.alert(3);\n    });\n  };\n  scope.selectOrder = function (order) {\n    scope.showTheList = false;\n    scope.invoice.order_id = order.id;\n\n    fillDataFromOrder(order);\n  };\n\n  scope.countries = countries;\n  scope.customerStates = [];\n  scope.companyStates = [];\n\n  scope.getInvoiceTotal = function () {\n    return scope.invoice.lineItems.map(function (item) {\n      return item.price * item.quantity;\n    }).reduce(function (a, b) {\n      return a + b;\n    }).toFixed(2);\n  };\n\n  scope.updateCompanyStates = function () {\n    http({\n      method: 'GET',\n      url: '/countries/' + scope.invoice.company.country.toLowerCase()\n    }).then(function (response) {\n      scope.companyStates = response.data;\n    }).catch(function (error) {\n      var type = null;\n      if (error.data && error.data.errors && error.data.errors[0]) {\n        type = error.data.errors[0].type;\n      }\n\n      if (type === 'StatesListNotAvailable') {\n        scope.companyStates = [];\n      }\n      /* else {\r\n        // Commenting this error because it seems to be disorientating for users\r\n        notie.alert(3, 'An error has occurred. Please try again.', 1.5)\r\n      } */\n    });\n  };\n\n  // Immediatly invoking the function in order to load states\n  // but only if the value is already assigned.\n  if (scope.invoice.company.country) {\n    scope.updateCompanyStates();\n  }\n\n  scope.updateCustomerStates = function () {\n    if (!scope.invoice.customer.country) {\n      return;\n    }\n\n    http({\n      method: 'GET',\n      url: '/countries/' + scope.invoice.customer.country.toLowerCase()\n    }).then(function (response) {\n      scope.customerStates = response.data;\n    }).catch(function (error) {\n      var type = null;\n      if (error.data && error.data.errors && error.data.errors[0]) {\n        type = error.data.errors[0].type;\n      }\n\n      if (type === 'StatesListNotAvailable') {\n        scope.customerStates = [];\n      } /* else {\r\n         // Commenting this error because it seems to be disorientating for users\r\n         notie.alert(3, 'An error has occurred. Please try again.', 1.5)\r\n        } */\n    });\n  };\n\n  // Immediatly invoking the function in order to load states\n  // but only if the value is already assigned.\n  if (scope.invoice.customer.country) {\n    scope.updateCustomerStates();\n  }\n\n  scope.saveInvoice = function (goToOrder) {\n    goToOrder = goToOrder || false;\n\n    $validation.hideErrors();\n    console.log('Salvo questo', angular.copy(scope.invoice));\n    $marketcloud.invoices.save(scope.invoice).then(function (response) {\n      notie.alert(1, 'Invoice saved', 1.5);\n      if (goToOrder === true) {\n        return location.path('/orders/' + scope.invoice.order_id + '/view');\n      }\n      location.path('/invoices');\n    }).catch(function (response) {\n      if (response.status === 400) {\n        notie.alert(2, 'The data you entered has some errors', 1.5);\n\n        var validation = response.data.errors[0];\n        var selector = '[ng-model=\"invoice.' + validation.invalidPropertyName + '\"]';\n\n        if (angular.element(selector).length === 0) {\n          selector = '[validate-for=\"' + validation.invalidPropertyName + '\"]';\n        }\n\n        $validation.showErrorMessage(validation, $models.Invoice.schema, selector);\n      } else {\n        notie.alert(3, 'An error has occurred. Please try again', 2);\n      }\n    });\n  };\n\n  scope.addLineItem = function () {\n    scope.invoice.lineItems.push({\n      name: '',\n      description: '',\n      quantity: null,\n      price: null\n    });\n  };\n}]);"
    },
    {
      "id": 69,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\invoices\\invoices.edit.js",
      "name": "./public/modules/data_dashboard/src/controllers/invoices/invoices.edit.js",
      "index": 69,
      "index2": 67,
      "size": 3957,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/invoices/invoices.edit.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.controller('EditInvoiceController', ['$scope', '$http', '$marketcloud', '$location', 'invoice', 'Countries', '$validation', '$models', function (scope, http, $marketcloud, location, invoice, countries, $validation, $models) {\n  scope.invoice = invoice.data.data;\n  console.log('Prima di fottere le date', angular.copy(scope.invoice));\n  // Angular wants the input[date] to be valid date objects :@\n  scope.invoice.date_due = moment(scope.invoice.date_due);\n  scope.invoice.date_created = moment(scope.invoice.date_created);\n\n  console.log('Dopo di fottere le date', angular.copy(scope.invoice));\n\n  scope.countries = countries;\n  scope.customerStates = [];\n  scope.companyStates = [];\n\n  scope.alert = function (m) {\n    window.alert(m);\n  };\n\n  scope.getInvoiceTotal = function () {\n    return scope.invoice.lineItems.map(function (item) {\n      return item.price * item.quantity;\n    }).reduce(function (a, b) {\n      return a + b;\n    }).toFixed(2);\n  };\n\n  scope.updateCompanyStates = function () {\n    http({\n      method: 'GET',\n      // url : '/modules/shared/geography/countries/'+scope.invoice.company.country.toLowerCase()+'.json'\n      url: '/countries/' + scope.invoice.company.country.toLowerCase()\n    }).then(function (response) {\n      scope.companyStates = response.data;\n    }).catch(function (error) {\n      console.log(error);\n      var type = null;\n      if (error.data && error.data.errors && error.data.errors[0]) {\n        type = error.data.errors[0].type;\n      }\n\n      if (type === 'StatesListNotAvailable') {\n        scope.companyStates = [];\n      } else {\n        notie.alert(3, 'An error has occurred. Please try again.', 1.5);\n      }\n    });\n  };\n\n  scope.updateCustomerStates = function () {\n    if (!scope.invoice.customer.country) {\n      return;\n    }\n\n    http({\n      method: 'GET',\n      url: '/countries/' + scope.invoice.customer.country.toLowerCase()\n    }).then(function (response) {\n      scope.customerStates = response.data;\n    }).catch(function (error) {\n      var type = null;\n      if (error.data && error.data.errors && error.data.errors[0]) {\n        type = error.data.errors[0].type;\n      }\n\n      if (type === 'StatesListNotAvailable') {\n        scope.customerStates = [];\n      } else {\n        notie.alert(3, 'An error has occurred. Please try again.', 1.5);\n      }\n    });\n  };\n\n  scope.updateCustomerStates();\n  scope.updateCompanyStates();\n  scope.debug = function () {\n    console.log(scope.invoice);\n  };\n\n  scope.saveInvoice = function () {\n    if (typeof scope.invoice.date_created.toDate === 'function') {\n      scope.invoice.date_created = scope.invoice.date_created.toDate();\n      scope.invoice.date_created.setHours(12);\n    }\n    if (typeof scope.invoice.date_due.toDate === 'function') {\n      scope.invoice.date_due = scope.invoice.date_due.toDate();\n      scope.invoice.date_due.setHours(12);\n    }\n    console.log('Salvo', angular.copy(scope.invoice));\n    $validation.hideErrors();\n    $marketcloud.invoices.update(scope.invoice.id, scope.invoice).then(function (response) {\n      notie.alert(1, 'Invoice saved', 1.5);\n      location.path('/invoices');\n    }).catch(function (response) {\n      if (response.status === 400) {\n        notie.alert(2, 'The data you entered has some errors', 1.5);\n\n        var validation = response.data.errors[0];\n        var selector = '[ng-model=\"invoice.' + validation.invalidPropertyName + '\"]';\n\n        if (angular.element(selector).length === 0) {\n          selector = '[validate-for=\"' + validation.invalidPropertyName + '\"]';\n        }\n\n        $validation.showErrorMessage(validation, $models.Invoice.schema, selector);\n      } else {\n        notie.alert(3, 'An error has occurred.', 2);\n      }\n    });\n  };\n\n  scope.addLineItem = function () {\n    scope.invoice.lineItems.push({\n      name: '',\n      description: '',\n      quantity: null,\n      price: null\n    });\n  };\n}]);"
    },
    {
      "id": 70,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\localization.controller.js",
      "name": "./public/modules/data_dashboard/src/controllers/localization.controller.js",
      "index": 70,
      "index2": 68,
      "size": 6491,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/localization.controller.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.controller('LocalizationController', ['$scope', '$http', 'Currencies', 'Timezones', 'LocalesFactory', '$application', function (scope, http, currencies, timezones, locales, $application) {\n  scope.application = $application.get();\n\n  scope.currencies = currencies;\n\n  for (var k in scope.currencies) {\n    scope.currencies[k].name_plus_code = scope.currencies[k].name + \" (\" + scope.currencies[k].code + \")\";\n  }\n  scope.activeCurrencies = [];\n  // string '[{code,rate},{code,rate},{code,rate}]'\n  // array  [{code,rate},{code,rate},{code,rate}]\n  //\n\n  if (typeof $application.get().currencies !== 'string') {\n    $application.get().currencies = '[]';\n  }\n  var saved_currencies = JSON.parse($application.get().currencies);\n\n  // scope.currencies.forEach(function(currency){\n  for (var k in scope.currencies) {\n    var currency = scope.currencies[k];\n    saved_currencies.forEach(function (saved_currency) {\n      if (saved_currency.code === currency.code) {\n        var new_currency_obj = angular.copy(currency);\n        new_currency_obj.rate = saved_currency.rate;\n        scope.activeCurrencies.push(new_currency_obj);\n      }\n    });\n  }\n  // })\n\n  /*\r\n   *  Adds a currency and updates app's settings\r\n   */\n  scope.addCurrency = function (currency) {\n    if (scope.activeCurrencies.map(function (c) {\n      return c.code;\n    }).indexOf(currency.code) > -1) {\n      return;\n    }\n    currency.rate = 1;\n    scope.activeCurrencies.push(currency);\n\n    // saving the new settings configuration\n    scope.updateSettings();\n  };\n\n  /*\r\n   *  Removes a currency and updates app's settings\r\n   */\n  scope.removeCurrency = function (i) {\n    scope.activeCurrencies.splice(i, 1);\n\n    // saving the new settings configuration\n    scope.updateSettings();\n  };\n\n  /*\r\n    There are better APIs for currency exchange, but they are not free.\r\n    Fixer only has a small subset of currencies.\r\n    This is free for 1000 reqs/month\r\n      https://currencylayer.com/product\r\n    This starts from 12$/month and also free for 1000 res/month\r\n    https://openexchangerates.org/signup\r\n      We ended up using Yahoo Finance through Yahoo Query Console.\r\n    It's a bit hacky but its working for now and it is the\r\n    only free service with any exchange rate.\r\n    very gouda.\r\n      Yahoo Finance is DEAD 8 Nov 2017\r\n  */\n  /*\r\n      function buildURL(from_currency_code, to_currency_code) {\r\n        return 'https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20csv%20where%20url%3D%22http%3A%2F%2Ffinance.yahoo.com%2Fd%2Fquotes.csv%3Fe%3D.csv%26f%3Dnl1d1t1%26s%3D' + from_currency_code + to_currency_code + '%3DX%22%3B&format=json&callback='\r\n      }\r\n  \r\n      scope.applyExchangeRate = function(currencyToApply) {\r\n        http({\r\n            method: 'GET',\r\n            url: buildURL($application.get().currency_code, currencyToApply.code)\r\n          }).then(function(response) {\r\n            currencyToApply.rate = Number(response.data.query.results.row.col1)\r\n          })\r\n          .catch(function(err) {\r\n            notie.alert(2, \"Sorry, we couldn't find exchange rates for for \" + currencyToApply.name, 2)\r\n          })\r\n      }*/\n\n  function buildURL(from_currency_code, to_currency_code) {\n    return 'https://api.fixer.io/latest?symbols=' + to_currency_code + '&base=' + from_currency_code;\n  }\n\n  scope.applyExchangeRate = function (currencyToApply) {\n    http({\n      method: 'GET',\n      url: buildURL($application.get().currency_code, currencyToApply.code)\n    }).then(function (response) {\n      console.log(\"LA RISPOSONA DI FIXER\", response);\n      console.log(\"Io \");\n      currencyToApply.rate = Number(response.data.rates[currencyToApply.code]);\n    }).catch(function (err) {\n      notie.alert(2, \"Sorry, we couldn't find exchange rates for for \" + currencyToApply.name, 2);\n    });\n  };\n\n  scope.applyAllExchangeRates = function () {\n    scope.activeCurrencies.forEach(function (currencyToApply) {\n      if (scope.exchangeRates.hasOwnProperty(currencyToApply.code)) {\n        currencyToApply.rate = scope.exchangeRates[currencyToApply.code];\n      }\n    });\n  };\n\n  // This is for sorting the locales by name\n  function compare(a, b) {\n    if (a.name < b.name) {\n      return -1;\n    } else if (a.name > b.name) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n  // Locales are provided by the factory as an object with the code as key\n  // For sorting them, we need an array.\n  scope.locales = Object.keys(locales).map(function (k) {\n    return locales[k];\n  }).sort(compare);\n\n  if (scope.application.locales === '') {\n    scope.activeLocales = [];\n  } else {\n    scope.activeLocales = scope.application.locales.split(',').map(function (code) {\n      return locales[code];\n    });\n  }\n\n  /*\r\n   *  Adds a locale to the app and saves\r\n   */\n  scope.addLocale = function (locale) {\n    if (scope.activeLocales.map(function (l) {\n      return l.code;\n    }).indexOf(locale.code) > -1) {\n      return;\n    }\n\n    scope.activeLocales.push(locale);\n\n    // saving the new settings configuration\n    scope.updateSettings();\n  };\n\n  scope.getFlagClassName = function (locale) {\n    return 'flag-icon-' + locale.code.slice(-2).toLocaleLowerCase();\n  };\n\n  /*\r\n   *  Removes a locale to the app and saves\r\n   */\n  scope.removeLocale = function (i) {\n    scope.activeLocales.splice(i, 1);\n\n    // saving the new settings configuration\n    scope.updateSettings();\n  };\n\n  // Let's re-pack the active locales in a single string\n  function activeLocalesToString() {\n    return scope.activeLocales.map(function (locale) {\n      return locale.code;\n    }).join(',');\n  }\n\n  function activeCurrenciesToString() {\n    return JSON.stringify(scope.activeCurrencies.map(function (c) {\n      return {\n        code: c.code,\n        rate: c.rate\n      };\n    }));\n  }\n\n  scope.updateSettings = function () {\n    var payload = {\n      locales: activeLocalesToString(),\n      currencies: activeCurrenciesToString()\n    };\n\n    http({\n      method: 'PUT',\n      url: '/applications/' + scope.application.id,\n      data: payload\n    }).then(function (response) {\n      notie.alert(1, 'Application successfully updated', 1);\n      console.log('Setto i locales a ', response.data.data.locales);\n      $application.set('locales', response.data.data.locales);\n      $application.set('currencies', response.data.data.currencies);\n    }).catch(function (err) {\n      notie.alert(3, 'An error has occurred.');\n    });\n  };\n}]);"
    },
    {
      "id": 71,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\media.list.js",
      "name": "./public/modules/data_dashboard/src/controllers/media.list.js",
      "index": 71,
      "index2": 69,
      "size": 3721,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/media.list.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.controller('MediaListController', ['$scope', '$http', 'media', '$marketcloud', '$q', function (scope, http, resources, $marketcloud, $q) {\n  // Pagination\n  scope.pagination = {\n    currentPage: resources.data.page,\n    numberOfPages: resources.data.pages,\n    nextPage: resources.data._links.next || null,\n    previousPage: resources.data._links.prev || null,\n    count: resources.data.count\n  };\n\n  scope.inspectFile = function (file) {\n    scope.inspectedFile = file;\n    $(\"#inspectFileModal\").modal(\"show\");\n  };\n\n  scope.formatFileSize = function (file) {\n    if (!file) return \"\";\n\n    var size = Number(file.size);\n    var formatted = size + \"b\";\n\n    var kb = 1000;\n    var mb = kb * 1000;\n    var gb = mb * 1000;\n\n    if (size > kb && size < mb) {\n      // Kilobytes\n      size = (size / kb).toFixed(2);\n      return String(size) + \" KB\";\n    } else if (size > mb && size < gb) {\n      // Megabytes\n      size = (size / mb).toFixed(2);\n      return String(size) + \" MB\";\n    } else {\n      size = (size / gb).toFixed(2);\n      return String(size) + \" GB\";\n    }\n  };\n\n  // Query\n  scope.query = {\n    per_page: 20\n  };\n\n  scope.prepareRegex = function () {\n    scope.query.name.$options = 'i';\n  };\n  scope.toggleAll = function () {\n    scope.media.forEach(function (p) {\n      p.selected = scope.selectAll;\n    });\n  };\n\n  scope.getSelectedItems = function () {\n    return scope.media.filter(function (p) {\n      return p.selected === true;\n    });\n  };\n\n  scope.bulkDelete = function () {\n    notie.confirm('Delete ' + scope.getSelectedItems().length + ' items?', 'Delete', 'Cancel', function () {\n      var defer = $q.defer();\n\n      var promises = [];\n\n      scope.getSelectedItems().forEach(function (item) {\n        promises.push($marketcloud.media.delete(item.id));\n      });\n\n      $q.all(promises).then(function () {\n        notie.alert(1, 'All items have been deleted', 1.5);\n        scope.loadPage(scope.currentPage);\n      });\n\n      return defer.promise;\n    });\n  };\n\n  // Initial data resolved from the router\n  scope.media = resources.data.data;\n\n  // This method must be implemented in order to\n  // make the media manager work\n  scope.getImagesContainer = function () {\n    return scope.media;\n  };\n\n  scope.loadPage = function (page) {\n    scope.query.page = page;\n    return scope.loadData({\n      page: page\n    });\n  };\n\n  scope.loadData = function (query) {\n    if (!query) {\n      query = scope.query;\n    }\n\n    return $marketcloud.media.list(query).then(function (response) {\n      scope.pagination = {\n        currentPage: response.data.page,\n        numberOfPages: response.data.pages,\n        nextPage: response.data._links.next || null,\n        previousPage: response.data._links.prev || null,\n        count: response.data.count\n      };\n\n      scope.media = response.data.data;\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred. Please try again.', 1.5);\n    });\n  };\n\n  scope.updateInspectedFile = function () {\n    console.log(\"Saving this\", scope.inspectedFile);\n    $marketcloud.media.update(scope.inspectedFile.id, { name: scope.inspectedFile.name }).then(function (response) {\n      notie.alert(1, 'File updated', 1.5);\n    }).catch(function (error) {\n      notie.alert(3, 'An error has occurred. Please retry.', 1.5);\n    });\n  };\n\n  scope.deleteMedia = function (media_id, index) {\n    $marketcloud.media.delete(media_id).then(function (response) {\n      scope.loadData({\n        page: scope.currentPage\n      });\n      notie.alert(1, 'Media deleted', 1.5);\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred.Please try again.', 1.5);\n    });\n  };\n}]);"
    },
    {
      "id": 72,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\media_manager.controller.js",
      "name": "./public/modules/data_dashboard/src/controllers/media_manager.controller.js",
      "index": 72,
      "index2": 70,
      "size": 7765,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/media_manager.controller.js"
        }
      ],
      "source": "'use strict';\n\nvar MediaManagerControllerDependencies = ['$scope', 'FileUploader', '$http', '$element', '$attrs', '$exceptionHandler', '$marketcloud'];\n\nvar MediaManagerController = function MediaManagerController(scope, FileUploader, $http, $element, $attrs, $exceptionHandler, $marketcloud) {\n  var ctrl = null;\n  this.$onInit = function () {\n    // Reference to the controller\n    ctrl = this;\n\n    // List of image urls\n    ctrl.images = ctrl.images || [];\n\n    // List of image objects\n    // ctrl.media = ctrl.media || [];\n\n    scope.closeOnUploadComplete = $attrs.closeOnUploadComplete;\n\n    /* Component configuration from attributes */\n    // The classes used to style the button\n    scope.buttonClass = $attrs.buttonClass;\n\n    // The text displayed on the button\n    scope.buttonText = $attrs.buttonText;\n\n    // The icon displayed on the button\n    scope.buttonIcon = $attrs.buttonIcon || null;\n\n    var tabs = $attrs.tabs || 'library,from_disk,from_url';\n\n    // This will hold an array of tab names\n    // The component will show only those tabs\n    // whose name is in this array\n    //\n    // The first tab will be the active one.\n    // TODO to improve this, we can add an attribute \"activeTab\"\n\n    scope.tabs = tabs.split(',');\n\n    // This is the name of the parent function which will return a reference to the image container\n    // scope.getImagesContainer = $attrs.getImagesContainer || 'getImagesContainer';\n  };\n\n  /* Uploader configuration */\n  scope.uploader = new FileUploader({\n    url: window.API_BASE_URL + '/media',\n    arrayKey: '',\n    headers: {\n      'Authorization': window.public_key + ':' + window.token\n    },\n    filters: []\n  });\n\n  // When closeDialog is called from within the component\n  // we notify the parent component/controller by calling the on-close-dialog\n  // callback\n  scope.closeDialog = function () {\n    ctrl.onCloseDialog();\n  };\n\n  scope.openDialog = function () {\n    ctrl.onOpenDialog();\n  };\n\n  scope.uploadImages = function () {\n    ctrl.onUploadImages();\n  };\n\n  scope.image = {};\n  scope.media_files = [];\n  scope.loadingMediaFiles = false;\n\n  // Used to keep filters and pagination state\n  scope.query = {};\n\n  // Initializing the pagination object to null\n  // This allows for convenient check on view pagination === null => dont show pagination\n  scope.pagination = null;\n\n  scope.loadMedias = function (query) {\n    scope.media_files = [];\n    scope.loadingMediaFiles = true;\n    /* $http({\r\n        method: 'GET',\r\n        url: window.API_BASE_URL + '/media',\r\n        headers: {\r\n          Authorization: window.public_key\r\n        }\r\n      }) */\n    $marketcloud.media.list(query || {}).then(function (response) {\n      scope.loadingMediaFiles = false;\n      scope.media_files = response.data.data;\n\n      scope.pagination = {\n        currentPage: response.data.page,\n        numberOfPages: response.data.pages,\n        nextPage: response.data._links.next || null,\n        previousPage: response.data._links.prev || null,\n        count: response.data.count\n      };\n    }).catch(function (response) {\n      scope.loadingMediaFiles = false;\n      notie.alert(2, 'An error has occurred, please retry.', 1.5);\n    });\n  };\n\n  scope.loadPage = function (page_number) {\n    scope.query.page = page_number;\n    return scope.loadData();\n  };\n\n  scope.loadMore = function () {\n    var pageToFetch = scope.media_files.length / 20 + 1;\n    $marketcloud.media.list({ page: pageToFetch }).then(function (response) {\n      scope.loadingMediaFiles = false;\n\n      scope.media_files = scope.media_files.concat(response.data.data);\n    }).catch(function (response) {\n      scope.loadingMediaFiles = false;\n      notie.alert(2, 'An error has occurred, please retry.', 1.5);\n    });\n  };\n  scope.loadData = function (query) {\n    scope.media_files = [];\n    scope.loadingMediaFiles = true;\n\n    if (!query) {\n      query = scope.query || {};\n    }\n\n    $marketcloud.media.list(query).then(function (response) {\n      scope.loadingMediaFiles = false;\n      scope.media_files = response.data.data;\n\n      scope.pagination = {\n        currentPage: response.data.page,\n        numberOfPages: response.data.pages,\n        nextPage: response.data._links.next || null,\n        previousPage: response.data._links.prev || null,\n        count: response.data.count\n      };\n    }).catch(function (response) {\n      scope.loadingMediaFiles = false;\n      notie.alert(3, 'An error has occurred. Please try again.', 1.5);\n    });\n  };\n\n  // Calling it right now because we want to initialize the media library\n  if (scope.media_files.length === 0) {\n    scope.loadMedias();\n  }\n\n  scope.showProgressBar = false;\n  scope.uploadingImages = false;\n\n  scope.howManySelectedMedia = function () {\n    return ctrl.images.length;\n  };\n\n  scope.addSelectedFromLibrary = function () {\n    var modal = $element.find('#MediaManagerModal');\n    $(modal).modal('hide');\n    /*$('#MediaManagerModal').modal('hide')*/\n  };\n\n  scope.isImageSelected = function (image) {\n    return ctrl.images.indexOf(image.url) > -1;\n  };\n  scope.selectImage = function (image) {\n    if (image.selected === true) {\n      image.selected = false;\n      removeImage(image);\n    } else {\n      image.selected = true;\n      ctrl.images.push(image.url);\n    }\n  };\n\n  var removeImage = function removeImage(image) {\n    // var pos = scope.$parent[scope.getImagesContainer]().indexOf(image.url);\n    var pos = ctrl.images.indexOf(image.url);\n    if (pos > -1) {\n      ctrl.images.splice(pos, 1);\n    }\n\n    // Rimuovo il media\n    /* for (var i =0; i< ctrl.media.length;i++) {\r\n      if (ctrl.media[i].url === image.url)\r\n        ctrl.media.splice(i,1);\r\n    } */\n  };\n\n  scope.uploader.onCompleteAll = function () {\n    scope.loadMedias();\n    scope.showProgressBar = false;\n    scope.uploadingImages = false;\n    scope.uploader.clearQueue();\n\n    // Checking if we need to close the dialog\n    if (scope.closeOnUploadComplete === 'true') {\n      scope.closeDialog();\n      /*$('#MediaManagerModal').modal('hide')*/\n      var modal = $element.find('#MediaManagerModal');\n      $(modal).modal('hide');\n    }\n\n    if (ctrl.onUploadComplete) {\n      ctrl.onUploadComplete();\n    }\n  };\n\n  scope.uploader.onProgressAll = function (progress) {};\n\n  scope.uploader.onErrorItem = function (item, response, status, headers) {\n    var err = new Error('Error uploading an item');\n    err.response = response;\n    err.status = status;\n    err.headers = headers;\n    $exceptionHandler(err);\n  };\n\n  scope.chooseFileFromStorage = function () {\n    $('#chooseFileFromStorageButton').trigger('click');\n  };\n\n  scope.uploadSelectedImages = function () {\n    scope.showProgressBar = true;\n    scope.uploadingImages = true;\n    scope.uploader.uploadAll();\n  };\n\n  scope.addImageFromUrl = function () {\n    ctrl.images.push(scope.image.url);\n    // scope.$parent[scope.getImagesContainer]().push(scope.image.url);\n    scope.image.url = null;\n  };\n\n  scope.showMediaManagerModal = function () {\n    /*$('#MediaManagerModal').modal('show')*/\n    var modal = $element.find('#MediaManagerModal');\n    $(modal).modal('show');\n\n    // Notifying the parent\n    scope.openDialog();\n  };\n};\n\nMediaManagerController.$inject = MediaManagerControllerDependencies;\n\nangular.module('DataDashboard').controller('MediaManagerController', MediaManagerController);\n\nangular.module('DataDashboard').component('mediaManager', {\n  templateUrl: '/modules/data_dashboard/templates/modals/media_manager.html',\n  controller: 'MediaManagerController',\n  bindings: {\n    onCloseDialog: '&',\n    onOpenDialog: '&',\n    onUploadComplete: '&',\n    // imagesContainer: '=',\n    images: '=?',\n    media: '=?',\n    buttonClass: '@',\n    buttonIcon: '@',\n    buttonText: '@',\n    closeOnUploadComplete: '@'\n  }\n});"
    },
    {
      "id": 73,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\notifications\\notifications.edit.js",
      "name": "./public/modules/data_dashboard/src/controllers/notifications/notifications.edit.js",
      "index": 73,
      "index2": 71,
      "size": 2547,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/notifications/notifications.edit.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.controller('EditNotificationController', ['$scope', '$http', 'notification', '$location', '$marketcloud', 'NotificationsPresetsFactory', function (scope, http, notification, $location, $marketcloud, NotificationsPresets) {\n  scope.events = {\n    'invoices.create': 'An invoice is created',\n    'orders.create': 'An order is created',\n    'users.create': 'A new user is created',\n    'users.recoverPassword': 'A user wants to recover the password',\n    'orders.update.processing': 'An order is paid',\n    'orders.update.completed': 'An order is shipped'\n\n    // name => label\n    // This object is used to map template variable names\n    // to more user friendly names\n  };scope.templateVariablesLabels = {\n    title: 'Title',\n    introduction: 'introduction',\n    productLabel: 'Product Label',\n    priceLabel: 'Price Label',\n    customerInformationLabel: 'Customer information label',\n    shippingAddressLabel: 'Shipping address label',\n    billingAddressLabel: 'Billing address label',\n    tracking_code_introduction: 'Shipment tracking introduction',\n    redirect_url: 'Redirect URL',\n    buttonLabel: 'Button Label'\n  };\n\n  scope.presets = NotificationsPresets;\n\n  scope.eventKeys = Object.keys(scope.events).map(function (e) {\n    return scope.events[e];\n  });\n\n  scope.updateNotificationPreset = function () {\n    if (scope.presets.hasOwnProperty(scope.notification.event)) {\n      var e = scope.notification.event;\n      for (var k in scope.presets[e]) {\n        scope.notification[k] = scope.presets[e][k];\n      }\n    }\n  };\n\n  scope.notification = notification.data.data;\n\n  // Notifications created before templates were available might need some more work\n  if (!scope.notification.template) {\n    scope.notification.template = angular.copy(scope.presets[scope.notification.event].template);\n  }\n\n  // In the same way, some notification might have only a subset of template values.\n  for (var tplKey in scope.presets[scope.notification.event].template) {\n    if (!(tplKey in scope.notification.template)) {\n      scope.notification.template[tplKey] = scope.presets[scope.notification.event].template[tplKey];\n    }\n  }\n\n  scope.save = function () {\n    $marketcloud.notifications.update(scope.notification.id, scope.notification).then(function (response) {\n      notie.alert(1, 'Item successfully updated!', 1.5);\n      $location.path('/notifications');\n    }).catch(function (error) {\n      notie.alert(3, 'An error has occurred, please try again', 1.5);\n    });\n  };\n}]);"
    },
    {
      "id": 74,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\notifications\\notifications.js",
      "name": "./public/modules/data_dashboard/src/controllers/notifications/notifications.js",
      "index": 74,
      "index2": 72,
      "size": 920,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/notifications/notifications.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.controller('NotificationsController', ['$scope', '$http', '$marketcloud', 'notifications', function (scope, http, $marketcloud, notifications) {\n  scope.notifications = notifications.data.data;\n\n  scope.delete = function (notification, index) {\n    $marketcloud.notifications.delete(notification.id).then(function (response) {\n      notie.alert(1, 'Notification deleted', 1.5);\n      scope.notifications.splice(index, 1);\n    }).catch(function (error) {\n      notie.alert(3, 'An error has occurred, please try again.', 1.5);\n    });\n  };\n\n  scope.toggleNotification = function (notification) {\n    $marketcloud.notifications.update(notification.id, notification).then(function (response) {\n      notie.alert(1, 'Update successful', 1.5);\n    }).catch(function (error) {\n      notie.alert(3, 'An error has occurred, please try again.', 1.5);\n    });\n  };\n}]);"
    },
    {
      "id": 75,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\notifications\\notifications.new.js",
      "name": "./public/modules/data_dashboard/src/controllers/notifications/notifications.new.js",
      "index": 75,
      "index2": 73,
      "size": 2135,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/notifications/notifications.new.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.controller('NewNotificationController', ['$scope', '$http', '$location', '$marketcloud', 'NotificationsPresetsFactory', function (scope, http, $location, $marketcloud, NotificationsPresets) {\n  scope.events = {\n    'invoices.create': 'An invoice is created',\n    'orders.create': 'An order is created',\n    'users.create': 'A new user is created',\n    'users.recoverPassword': 'A user wants to recover the password',\n    'orders.update.processing': 'An order is paid',\n    'orders.update.completed': 'An order is shipped'\n  };\n\n  scope.notification = {\n    event: null,\n    name: null,\n    description: null,\n    subject: null,\n    sendCopyToOwner: false,\n    active: false\n  };\n\n  scope.query = {};\n  scope.prepareRegex = function () {\n    scope.query.name.$options = 'i';\n  };\n\n  scope.presets = NotificationsPresets;\n\n  // name => label\n  // This object is used to map template variable names\n  // to more user friendly names\n  scope.templateVariablesLabels = {\n    title: 'Title',\n    introduction: 'introduction',\n    productLabel: 'Product Label',\n    priceLabel: 'Price Label',\n    customerInformationLabel: 'Customer information label',\n    shippingAddressLabel: 'Shipping address label',\n    billingAddressLabel: 'Billing address label',\n    tracking_code_introduction: 'Shipment tracking introduction',\n    redirect_url: 'Redirect URL',\n    buttonLabel: 'Button Label'\n  };\n\n  scope.updateNotificationPreset = function () {\n    if (scope.presets.hasOwnProperty(scope.notification.event)) {\n      var e = scope.notification.event;\n      for (var k in scope.presets[e]) {\n        scope.notification[k] = scope.presets[e][k];\n      }\n    }\n  };\n\n  scope.eventKeys = Object.keys(scope.events).map(function (e) {\n    return scope.events[e];\n  });\n\n  scope.save = function () {\n    $marketcloud.notifications.save(scope.notification).then(function (response) {\n      notie.alert(1, 'Notification saved', 1.5);\n      $location.path('/notifications');\n    }).catch(function (error) {\n      notie.alert(3, 'An error has occurred, please try again', 1.5);\n    });\n  };\n}]);"
    },
    {
      "id": 76,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\notifications\\notifications.preview.js",
      "name": "./public/modules/data_dashboard/src/controllers/notifications/notifications.preview.js",
      "index": 76,
      "index2": 74,
      "size": 532,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/notifications/notifications.preview.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.controller('PreviewNotificationController', ['$scope', '$http', 'notification', '$location', '$marketcloud', function (scope, http, notification, $location, $marketcloud) {\n      scope.notification = JSON.parse(notification);\n\n      scope.sampleData = {};\n\n      scope.sampleData['orders.update.completed'] = {};\n\n      scope.sampleData['orders.update.processing'] = {};\n\n      scope.sampleData['orders.created'] = {};\n\n      scope.sampleData['users.created'] = {};\n}]);"
    },
    {
      "id": 77,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\notifications\\notifications.translations.js",
      "name": "./public/modules/data_dashboard/src/controllers/notifications/notifications.translations.js",
      "index": 77,
      "index2": 75,
      "size": 3755,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/notifications/notifications.translations.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.controller('TranslateNotificationController', ['$scope', '$http', 'notification', '$marketcloud', 'LocalesFactory', '$application', '$location', 'NotificationsPresetsFactory', function (scope, http, notification, $marketcloud, locales, $application, $location, NotificationsPresets) {\n  if ($application.getAvailableLocaleCodes().length === 0) {\n    notie.alert(2, 'This store has no additional locale. Please add a locale first.', 2);\n    return $location.path('/system/localization');\n  }\n  scope.presets = NotificationsPresets;\n  scope.notification = notification.data.data;\n  // This is fetched from the app's config\n  scope.availableLocales = [];\n  // mocking the retrieval of locales\n  scope.locales = locales;\n  // name => label\n  // This object is used to map template variable names\n  // to more user friendly names\n  scope.templateVariablesLabels = {\n    title: 'Title',\n    introduction: 'introduction',\n    productLabel: 'Product Label',\n    priceLabel: 'Price Label',\n    customerInformationLabel: 'Customer information label',\n    shippingAddressLabel: 'Shipping address label',\n    billingAddressLabel: 'Billing address label',\n    tracking_code_introduction: 'Shipment tracking introduction',\n    redirect_url: 'Redirect URL',\n    buttonLabel: 'Button Label'\n  };\n  scope.availableLocales = $application.get().locales.split(',').map(function (code) {\n    return scope.locales[code];\n  });\n  // Which locale we are currently editing\n  scope.currentLocale = scope.availableLocales[0];\n  // Init locales object\n  if (!scope.notification.hasOwnProperty('locales')) {\n    scope.notification.locales = {};\n  }\n  // Checking that the product has initialized every locale sub object\n  scope.availableLocales.forEach(function (locale) {\n    // Se il prodotto.locales non ha il locale, creo l'oggetto\n    if (!scope.notification.locales.hasOwnProperty(locale.code)) {\n      scope.notification.locales[locale.code] = {};\n    }\n  });\n  scope.getFlagClassName = function () {\n    return 'flag-icon-' + scope.currentLocale.code.slice(-2).toLocaleLowerCase();\n  };\n  scope.events = {\n    'invoices.create': 'An order is created',\n    'orders.create': 'An order is created',\n    // 'orders.update.canceled'     : 'An order is canceled',\n    'users.create': 'A new user is created',\n    'orders.update.processing': 'An order is paid',\n    'orders.update.completed': 'An order is shipped'\n  };\n  scope.eventKeys = Object.keys(scope.events).map(function (e) {\n    return scope.events[e];\n  });\n  scope.updateNotificationPreset = function () {\n    if (scope.presets.hasOwnProperty(scope.notification.event)) {\n      var e = scope.notification.event;\n      for (var k in scope.presets[e]) {\n        scope.notification[k] = scope.presets[e][k];\n      }\n    }\n  };\n  // Notifications created before templates were available might need some more work\n  if (!scope.notification.template) {\n    scope.notification.template = angular.copy(scope.presets[scope.notification.event]);\n  }\n  // In the same way, some notification might have only a subset of template values.\n  for (var tplKey in scope.presets[scope.notification.event].template) {\n    if (!(tplKey in scope.notification.template)) {\n      scope.notification.template[tplKey] = scope.presets[scope.notification.event].template[tplKey];\n    }\n  }\n  scope.updateTranslations = function () {\n    var payload = {\n      locales: angular.copy(scope.notification.locales)\n    };\n    $marketcloud.notifications.update(scope.notification.id, payload).then(function (response) {\n      notie.alert(1, 'All updates have been saved.', 2);\n    }).catch(function (error) {\n      notie.alert(3, 'An error has occurred, please try again', 2);\n    });\n  };\n}]);"
    },
    {
      "id": 78,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\orders\\orders.list.js",
      "name": "./public/modules/data_dashboard/src/controllers/orders/orders.list.js",
      "index": 78,
      "index2": 76,
      "size": 12817,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/orders/orders.list.js"
        }
      ],
      "source": "'use strict';\n/* global angular: true  */\n/* global API_BASE_URL: true  */\n/* global notie: true  */\n/* global alert: true  */\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar app = angular.module('DataDashboard');\napp.controller('OrdersController', ['$q', '$scope', '$http', '$location', 'ordersResponse', '$marketcloud', '$route', '$utils', function ($q, scope, http, $location, resources, $marketcloud, $route, $utils) {\n  // Pagination\n  scope.pagination = {\n    currentPage: resources.data.page,\n    numberOfPages: resources.data.pages,\n    nextPage: resources.data._links.next || null,\n    previousPage: resources.data._links.prev || null,\n    count: resources.data.count\n\n    // Query\n  };scope.query = {\n    page: 1,\n    per_page: 20\n\n    // Parsing URL parameters, if provided\n\n    // Applying Url query\n  };var urlQuery = {};\n  try {\n    urlQuery = JSON.parse($route.current.params.query);\n  } catch (e) {\n    console.log(\"Non ho potuto parsare il JSON di questa stringa \", $route.current.params.query);\n    urlQuery = {};\n  }\n\n  console.log(\"Sono il controller ed inizializzo la query usando query URL Params \", urlQuery);\n  for (var k in urlQuery) {\n    scope.query[k] = urlQuery[k];\n  }\n\n  // Initial data resolved from the router\n  scope.orders = resources.data.data;\n\n  // This computes a \"paid\" flag on each order\n  // it is calculated checking each payment status\n  function setPaidFlag(order) {\n    // Old api set payment instead of payments\n    if (order.hasOwnProperty('payment')) {\n      order.paid = true;\n    } else if (order.hasOwnProperty('payments')) {\n      order.paid = order.payments.filter(function (p) {\n        return p.successful;\n      }).length > 0;\n    } else {\n      order.paid = false;\n    }\n  }\n\n  // Setting the paid flag\n  scope.orders.forEach(setPaidFlag);\n\n  // Util\n  scope.timestampToDate = function (t) {\n    var a = new Date(t);\n    var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    return a.getDate() + ' ' + months[a.getMonth()] + ' ' + a.getFullYear();\n  };\n\n  /*\r\n    BULK EDIT\r\n  */\n  scope.toggleAll = function () {\n    scope.orders.forEach(function (o) {\n      o.selected = scope.selectAll;\n    });\n  };\n  scope.getSelectedItems = function () {\n    return scope.orders.filter(function (o) {\n      return o.selected === true;\n    });\n  };\n  scope.bulkExport = function () {\n\n    // If there are no selected items, we export the whole current view\n    if (scope.getSelectedItems().length === 0) return scope.downloadCSV(scope.orders);\n\n    scope.downloadCSV(scope.getSelectedItems());\n  };\n\n  scope.bulkJSONExport = function () {\n    // If there are no selected items, we export the whole current view\n    if (scope.getSelectedItems().length === 0) return $utils.exportAsJSON(scope.orders);\n\n    $utils.exportAsJSON(scope.getSelectedItems());\n  };\n\n  scope.bulkUpdateStatus = function (status) {\n\n    if (!status) status = scope.bulkStatusChange;\n\n    var defer = $q.defer();\n\n    var promises = [];\n\n    scope.getSelectedItems().forEach(function (order) {\n      promises.push($marketcloud.orders.update(order.id, {\n        status: status\n      }));\n    });\n\n    $q.all(promises).then(function () {\n      notie.alert(1, 'All orders have been updated', 1.5);\n      scope.loadPage(scope.pagination.currentPage);\n    });\n\n    return defer.promise;\n  };\n\n  scope.bulkDelete = function () {\n    /*notie.confirm('Delete ' + scope.getSelectedItems().length + ' orders?', 'Delete', 'Cancel', function() {*/\n    window.Alert.confirm({\n      title: 'Delete ' + scope.getSelectedItems().length + ' orders?',\n      message: 'Deleted orders cannot be recovered. Do you want to continue?',\n      onConfirm: function onConfirm() {\n\n        var defer = $q.defer();\n\n        var promises = [];\n\n        scope.getSelectedItems().forEach(function (order) {\n          promises.push($marketcloud.orders.delete(order.id));\n        });\n\n        $q.all(promises).then(function () {\n          notie.alert(1, 'All orders have been deleted', 1.5);\n          scope.loadPage(scope.pagination.currentPage);\n        });\n\n        return defer.promise;\n      }\n    });\n  };\n\n  function jsonToCsv(json) {\n    // Questo non va bene, i fields devono essere l'unione di\n    // campi dell'ordine e campi dei prodotti\n    // perchÃ¨ csv Ã¨ un formato di merda\n    var order_fields = ['id', 'created_at', 'status', 'total', 'items_total', 'shipping_total', 'taxes_total',\n    // shipping address\n    'shipping_address_email', 'shipping_address_full_name', 'shipping_address_country', 'shipping_address_city', 'shipping_address_address1', 'shipping_address_state', 'shipping_address_postal_code',\n    // billing address\n    'billing_address_email', 'billing_address_full_name', 'billing_address_country', 'billing_address_city', 'billing_address_address1', 'billing_address_state', 'billing_address_postal_code',\n    // Products\n    'product_name', 'product_id', 'product_price', 'product_price_discount', 'product_weight', 'product_depth', 'product_width', 'product_height', 'variant_name_1', 'variant_value_1', 'variant_name_2', 'variant_value_2', 'variant_name_3', 'variant_value_3', 'variant_name_4', 'variant_value_4', 'variant_name_5', 'variant_value_5'];\n\n    // var fields = Object.keys(json[0]);\n    var fields = order_fields;\n\n    var csv = json.map(function (row) {\n      return fields.map(function (fieldName) {\n        return JSON.stringify(row[fieldName] || '');\n      });\n    });\n    csv.unshift(fields); // add header column\n    return csv.join('\\r\\n');\n  }\n\n  scope.downloadCSV = function (array_to_download) {\n    // Here we will push order lines and product lines\n    var to_transform = [];\n\n    // For each order we add\n    // order id\n    array_to_download.forEach(function (order) {\n      var order_data = {\n        'items_total': order.items_total,\n        'shipping_total': order.shipping_total,\n        'taxes_total': order.taxes_total,\n        'total': order.total,\n        'created_at': new Date(order.created_at),\n        'status': order.status,\n        'id': order.id\n\n        // Adding flattened shipping address\n      };for (var ks in order.shipping_address) {\n        order_data['shipping_address_' + ks] = order.shipping_address[ks];\n      }\n      for (var kb in order.billing_address) {\n        order_data['billing_address_' + kb] = order.billing_address[kb];\n      }\n\n      to_transform.push(order_data);\n\n      // Ora per ogni prodotto aggiungo una riga, prima perÃ² devo estendere le chiavi dell'ordine\n      var product_props = ['name', 'id', 'price', 'price_discount', 'weight', 'depth', 'width', 'height'];\n      order.products.forEach(function (product) {\n        // Prima prendiamo i dati del parent\n        // Poi, se ha varianti\n        // prendiamo i dati di variante che sovrascrivono quelli del parent\n        // (ad esempio un price diverso perchÃ¨ la maglietta verde costa diverso)\n        // e poi prendiamo le proprietÃ  strutturali della variante e le assegnamo\n        // alloggetto in forma di variant_name_1 variant_value_1\n\n        var prod_data = {};\n        product_props.forEach(function (prop) {\n          prod_data['product_' + prop] = product[prop];\n        });\n        // Ho aggiunto le proprietÃ  di base, ora devo aggiungere le varianti\n        // solo se il prodotto le ha.\n\n        if (product.has_variants === true) {\n          // Gli attributi base, possono essere sovrascritti\n          product_props.forEach(function (prop) {\n            if (product.variant.hasOwnProperty(prop)) {\n              prod_data['product_' + prop] = product.variant[prop];\n            }\n          });\n          // Gli attributi varianti\n          var variants_counter = 1;\n          for (var variant_name in product.variantsDefinition) {\n            prod_data['variant_name_' + variants_counter] = variant_name;\n            prod_data['variant_value_' + variants_counter] = product.variant[variant_name];\n            variants_counter++;\n          }\n        }\n\n        to_transform.push(prod_data);\n      });\n    });\n\n    buildDownload(to_transform);\n  };\n\n  function buildDownload(data) {\n    var encodedUri = encodeURI('data:text/csv;charset=utf-8,' + jsonToCsv(data));\n    var link = document.createElement('a');\n    link.setAttribute('href', encodedUri);\n    link.setAttribute('download', 'exported_orders.csv');\n    document.body.appendChild(link); // Required for FF\n\n    link.click(); // This will download the data file named \"my_data.csv\".\n  }\n\n  scope.nullOrUndefined = function (value) {\n    return value === null || typeof value === 'undefined';\n  };\n\n  scope.loadPage = function (page_number) {\n    scope.query.page = Number(page_number);\n    return scope.loadData(scope.query);\n  };\n\n  scope.loadData = function (query) {\n    if (!query) {\n      query = scope.query;\n    }\n\n    return $marketcloud.orders.list(query).then(function (response) {\n      scope.pagination = {\n        currentPage: response.data.page,\n        numberOfPages: response.data.pages,\n        nextPage: response.data._links.next || null,\n        previousPage: response.data._links.prev || null,\n        count: response.data.count\n      };\n\n      scope.orders = response.data.data;\n\n      scope.orders.forEach(setPaidFlag);\n\n      // This little trick allows us to get back to the latest state of the view when we hit a back button.\n      window.history.pushState(scope.query, \"List orders\", '#/orders?query=' + angular.$$encodeUriSegment(JSON.stringify(scope.query)));\n    }).catch(function (error) {\n      console.log(error);\n      notie.alert(3, 'An error has occurred. Please try again.', 1.5);\n    });\n  };\n\n  scope.deleteOrder = function (order) {\n    notie.confirm('Delete order?<p>Deleting the order, inventory quantities will be re-assigned.</p>', 'Delete', 'Cancel', function () {\n      $marketcloud.orders.delete(order.id).then(function () {\n        notie.alert(1, 'Order deleted succesfully', 1);\n        scope.loadPage(scope.pagination.currentPage);\n      }).catch(function () {\n        notie.alert(3, 'An error has occurred, order not deleted.', 1);\n      });\n    });\n  };\n\n  /* FILTERS */\n  scope.filters = [];\n\n  var notFilters = ['per_page', 'page', 'sort_by', 'sort_order'];\n\n  function isOperator(key) {\n    return notFilters.indexOf(key) >= 0;\n  };\n\n  for (var k in scope.query) {\n    if (!isOperator(k)) {\n      console.log(k + \" is not an operator\");\n      scope.filters.push({\n        name: k,\n        value: scope.query[k]\n      });\n    }\n  }\n\n  scope.applyFilters = function () {\n\n    scope.filters.forEach(function (filter) {\n      scope.query[filter.name] = filter.value;\n    });\n    scope.loadData();\n  };\n\n  scope.saveNewFilterAndApply = function () {\n\n    scope.addFilter(scope.newFilter);\n\n    scope.newFilter = {\n      name: '',\n      value: null\n    };\n    $('#singleFilterModal').modal('hide');\n  };\n\n  scope.addFilter = function (key, value) {\n\n    if (\"object\" === (typeof key === 'undefined' ? 'undefined' : _typeof(key))) this.filters.push(key);else if (\"string\" === typeof key) this.filters.push({\n      name: key,\n      value: value\n    });else throw new Error(\"addFilter(Filter: f) or addFilter(String: fName, Any: fValue)\");\n\n    scope.applyFilters();\n  };\n\n  /*\r\n   *  @param {Number} index The position of the filter to remove\r\n   *  @param {Boolean} applyToQuery Wether to call applyFilters() or not\r\n   */\n  scope.removeFilter = function (index, applyToQuery) {\n    if (typeof applyToQuery === 'undefined') {\n      applyToQuery = true;\n    }\n\n    var filterToRemove = scope.filters.splice(index, 1);\n\n    filterToRemove = filterToRemove[0];\n\n    delete scope.query[filterToRemove.name];\n\n    if (applyToQuery === true) {\n      scope.applyFilters();\n    }\n  };\n\n  // Removes a filter given its name in the filters array\n  scope.removeFilterByName = function (name) {\n    scope.filters = scope.filters.filter(function (filter) {\n      return filter.name !== name;\n    });\n\n    delete scope.query[name];\n\n    scope.applyFilters();\n  };\n\n  scope.removeFilterByPosition = function (pos) {\n    scope.filters.splice(pos, 1);\n    scope.applyFilters();\n  };\n\n  scope.setQueryParam = function (key, value) {\n    scope.query[key] = value;\n    scope.loadData();\n  };\n\n  scope.deleteQueryParam = function (key) {\n    delete scope.query[key];\n    scope.loadData();\n  };\n\n  scope.sortingAttributes = ['id', 'status', 'created_at', 'total', 'items_total', 'shipping_total', 'taxes_total', 'coupon_total', 'promotion_total'];\n\n  scope.applySorting = function () {\n    scope.loadData();\n    //$(\"#sortingModal\").modal('hide');\n  };\n}]);"
    },
    {
      "id": 79,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\orders\\orders.new.js",
      "name": "./public/modules/data_dashboard/src/controllers/orders/orders.new.js",
      "index": 79,
      "index2": 77,
      "size": 968,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/orders/orders.new.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.controller('NewOrderController', ['$scope', '$marketcloud', function (scope, marketcloud) {\n  scope.order = {\n    items: []\n  };\n\n  scope.products = [{ name: 'Scolapasta', price: 12 }, { name: 'Cucchiaio', price: 1 }, { name: 'Forchetta', price: 2 }];\n\n  scope.saveOrder = function () {\n    console.log('Saving this order', scope.order);\n  };\n\n  // Shows/hide modal for products\n  scope.toggleProductsModal = function () {\n    console.log('Showing products modal');\n    $('#itemsModal').modal('show');\n  };\n\n  // loads some products from backend\n  scope.loadInventory = function (query) {\n    console.log('Loading inventory', query);\n  };\n\n  // Adds a line item to the order\n  scope.addItemToOrder = function (item) {\n    console.log('Item added to order', item);\n  };\n\n  // loads some addresses from backend\n  scope.loadAddresses = function (query) {\n    console.log('Loading addresses', query);\n  };\n}]);"
    },
    {
      "id": 80,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\orders\\orders.view.js",
      "name": "./public/modules/data_dashboard/src/controllers/orders/orders.view.js",
      "index": 80,
      "index2": 78,
      "size": 19314,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/orders/orders.view.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.controller('OrderController', ['$scope', '$http', 'order', 'shippingMethods', '$marketcloud', 'paymentMethods', 'Countries', function (scope, http, order, shippingMethods, $marketcloud, paymentMethods, countries) {\n  scope.paymentMethods = paymentMethods.data.data;\n  scope.countries = countries;\n  // Data fetched by the resolve\n  scope.order = order.data.data;\n  scope.products = [];\n  scope.itemsToAdd = [];\n\n  scope.addressToEdit = {};\n\n  // List of shipping methods\n  // @property Array<Object>\n  scope.shippingMethods = shippingMethods.data.data;\n\n  // New shipment\n  scope.newShipment = {\n    tracking_code: null,\n    tracking_link: null,\n    date: new Date(),\n    delivery_date: new Date(),\n    method: null,\n    description: null\n  };\n  scope.saveShipmentAndFullfill = false;\n\n  // New payment\n  scope.newPayment = {\n    method: 'Manual',\n    description: null,\n    amount: scope.order.total\n  };\n  scope.savePaymentAndSetToProcessing = false;\n\n  scope.payments = [];\n\n  scope.showEditAddressDialog = function (addressToEdit) {\n    scope.addressToEdit = addressToEdit;\n    $('#editAddressModal').modal('show');\n  };\n\n  scope.onUpdateOrder = function () {\n    $marketcloud.orders.update(scope.order.id, scope.order).then(function (res) {\n      notie.alert(1, 'Order successfully updated', 1.5);\n      scope.order = res.data.data;\n      scope.addingProduct = false;\n      scope.editingOrder = false;\n    });\n  };\n\n  scope.editOrder = function () {\n    scope.editingOrder = true;\n  };\n\n  scope.onRemoveItemFromOrder = function (idx) {\n    console.log(idx);\n    var product = scope.order.products[idx];\n    notie.confirm('Are you sure you want to remove ' + product.name + '?', 'Yes, remove.', ' No.', function () {\n      scope.$apply(function () {\n        scope.order.items.splice(idx, 1);\n        scope.order.products.splice(idx, 1);\n      });\n    });\n  };\n\n  scope.query = {};\n\n  scope.onAddProduct = function () {\n    scope.addingProduct = true;\n  };\n\n  scope.onCloseAddingProduct = function () {\n    scope.addingProduct = false;\n  };\n\n  scope.prepareRegex = function () {\n    scope.query.name.$options = 'i';\n  };\n\n  scope.loadProducts = function (query) {\n    query = query || scope.query;\n\n    $marketcloud.products.list(query).then(function (response) {\n      scope.products = response.data.data.filter(function (item) {\n        return scope.itemsToAdd.map(function (i) {\n          return i.id;\n        }).indexOf(item.id) < 0;\n      });\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred. Please try again');\n    });\n  };\n\n  scope.addProduct = function (product) {\n    product.quantity = 1;\n\n    if (product.has_variants) {\n      product.selectedVariant = {};\n      Object.keys(product.variantsDefinition).forEach(function (k) {\n        product.selectedVariant[k] = product.variantsDefinition[k][0];\n      });\n    }\n\n    scope.order.items.push({\n      product_id: product.id,\n      quantity: product.quantity,\n      variant_id: product.has_variants ? 1 : null\n    });\n    scope.order.products.push(product);\n    scope.query.name.$regex = '';\n    scope.products = [];\n  };\n\n  scope.showTheList = false;\n  scope.showList = function () {\n    scope.showTheList = true;\n  };\n  scope.hideList = function () {\n    window.setTimeout(function () {\n      scope.showTheList = false;\n      scope.$apply();\n    }, 200);\n  };\n\n  scope.saveAddress = function () {\n    $marketcloud.orders.update(scope.order.id, {\n      billing_address: scope.order.billing_address,\n      shipping_address: scope.order.shipping_address\n    }).then(function () {\n      notie.alert(1, 'Order successfully updated', 1.5);\n      $('#editAddressModal').modal('hide');\n    }).catch(function () {\n      notie.alert(2, 'An error has occurred, order not updated', 1.5);\n      $('#editAddressModal').modal('hide');\n    });\n  };\n  /* scope.order = null;\r\n    scope.loadingData = true; */\n\n  // Checking shipment dates\n  function assignDataToShipments() {\n    if (Array.isArray(scope.order.shipments)) {\n      scope.order.shipments = scope.order.shipments.map(function (shipment) {\n        if (shipment.date) {\n          shipment.date = moment(shipment.date);\n        }\n        if (shipment.delivery_date) {\n          shipment.delivery_date = moment(shipment.delivery_date);\n        }\n\n        if (shipment.method) {\n          scope.shippingMethods.forEach(function (method) {\n            if (shipment.method.id === method.id) {\n              shipment.method = method;\n            }\n          });\n        }\n\n        return shipment;\n      });\n    }\n  }\n\n  assignDataToShipments();\n\n  scope.refundedProducts = [];\n\n  if (scope.order.refunds) {\n    scope.order.refunds.forEach(function (refund) {\n      refund.line_items.forEach(function (item) {\n        scope.refundedProducts.push(item);\n      });\n    });\n  }\n\n  function getLineItemPrice(lineItem) {\n    if (lineItem.variant) {\n      if (lineItem.variant.price_discount) {\n        return lineItem.variant.price_discount * lineItem.quantity;\n      } else {\n        return lineItem.variant.price * lineItem.quantity;\n      }\n    } else {\n      if (lineItem.price_discount) {\n        return lineItem.price_discount * lineItem.quantity;\n      } else {\n        return lineItem.price * lineItem.quantity;\n      }\n    }\n  }\n\n  function getLineItemTaxes(lineItem) {\n    var price = getLineItemPrice(lineItem);\n    var tax_rate = lineItem.applied_tax_rate;\n\n    return tax_rate / 100 * price * lineItem.quantity;\n  }\n\n  scope.showRefundModal = function () {\n    scope.newRefund = {\n      created_at: new Date(),\n      reason: '',\n      line_items: [],\n      items_total: 0,\n      taxes_total: 0,\n      total: 0,\n      restock_refunded_items: false\n    };\n\n    scope.newRefund.line_items = scope.order.products.map(function (product) {\n      var p = angular.copy(product);\n      p.quantityInOrder = product.quantity;\n\n      p.product_id = product.id;\n\n      p.variant_id = 0;\n\n      if (p.hasOwnProperty('variant')) {\n        p.variant_id = p.variant.id;\n      }\n\n      return p;\n    });\n\n    scope.updateNewRefund();\n\n    $('#RefundModal').modal('show');\n  };\n\n  scope.saveRefund = function () {\n    scope.refundErrorMessage = '';\n\n    scope.newRefund.line_items = scope.newRefund.line_items.filter(function (item) {\n      return item.quantity > 0;\n    });\n\n    if (scope.newRefund.total <= 0) {\n      scope.refundErrorMessage = 'Refund total must be greater than zero.';\n      return;\n    }\n\n    $marketcloud.refunds.save(scope.order.id, scope.newRefund).then(function (response) {\n      $('#RefundModal').modal('hide');\n      window.Alert.success({\n        message: 'Refund saved successfully!'\n      });\n    }).catch(function (response) {\n      scope.refundErrorMessage = 'Unable to create refund. Please review the inserted data.';\n    });\n  };\n\n  scope.updateNewRefund = function () {\n    scope.newRefund.items_total = 0;\n    scope.newRefund.taxes_total = 0;\n\n    scope.newRefund.line_items.forEach(function (item) {\n      scope.newRefund.items_total += getLineItemPrice(item);\n      scope.newRefund.taxes_total += getLineItemTaxes(item);\n    });\n\n    scope.newRefund.total = scope.newRefund.items_total + scope.newRefund.taxes_total;\n    console.log('updateNewRefund ' + scope.newRefund.total);\n  };\n\n  scope.getVariantStyle = function (i) {\n    var r = [{\n      'color': '#c0392b'\n    }, {\n      'color': '#27ae60'\n    }, {\n      'color': '#2c3e50'\n    }, {\n      'color': '#d35400'\n    }];\n    return r[i % r.length];\n  };\n  scope.getVariantClass = function (i) {\n    var classes = ['label-empty-info', 'label-empty-success', 'label-empty-warning', 'label-empty-danger'];\n    return 'label solid ' + classes[i % classes.length];\n  };\n  scope.getSelectedVariantValues = function (p) {\n    var temp = {};\n    Object.keys(p.variantsDefinition).forEach(function (k) {\n      temp[k] = p.variant[k];\n    });\n    return temp;\n  };\n\n  scope.getSelectedVariantKeysAndValues = function (p) {\n    var temp = {};\n    Object.keys(p.variantsDefinition).forEach(function (k) {\n      temp[k] = k + ': ' + String(p.variant[k]);\n    });\n    return temp;\n  };\n\n  scope.updateSelectedVariantForProduct = function (idx, key, value) {\n    var selectedVariantData = scope.order.products[idx].selectedVariant;\n\n    var productVariants = scope.order.products[idx].variants;\n\n    var selectedVariant = findObjectWithKeyValue(productVariants, selectedVariantData);\n\n    scope.order.items[idx].variant_id = selectedVariant.variant_id;\n  };\n\n  var findObjectWithKeyValue = function findObjectWithKeyValue(array, object) {\n    var current = array;\n    var result;\n\n    Object.keys(object).forEach(function (k) {\n      var value = object[k];\n\n      current = current.filter(function (val) {\n        return val[k] === value;\n      });\n\n      if (current.length === 1) {\n        result = current[0];\n      }\n    });\n\n    return result;\n  };\n\n  // delete scope.order['items']\n\n  scope.updateStatus = function (status) {\n    scope.order.status = status;\n    $marketcloud.orders.update(scope.order.id, {\n      status: scope.order.status\n    }).then(function (response) {\n      notie.alert(1, 'Order successfully updated', 1);\n    }).catch(function (response) {\n      notie.alert(2, 'An error has occurred. Please try again.', 1);\n    });\n  };\n\n  // Util\n  scope.timestampToDate = function (t, showHours) {\n    var a = new Date(t);\n    var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    var the_date = a.getDate() + ' ' + months[a.getMonth()] + ' ' + a.getFullYear();\n\n    if (showHours === true) {\n      the_date += ' at ' + a.getHours() + ':' + a.getMinutes();\n    }\n\n    return the_date;\n  };\n\n  function syntaxHighlight(json) {\n    if (typeof json !== 'string') {\n      json = JSON.stringify(json, null, 2);\n    }\n\n    json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(new RegExp('\\n', 'g'), '<br>').replace(new RegExp('\\t'), '&nbsp;&nbsp;');\n    return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {\n      var cls = 'number';\n      if (/^\"/.test(match)) {\n        if (/:$/.test(match)) {\n          cls = 'key';\n        } else {\n          cls = 'string';\n        }\n      } else if (/true|false/.test(match)) {\n        cls = 'boolean';\n      } else if (/null/.test(match)) {\n        cls = 'null';\n      }\n      return '<span class=\"' + cls + '\">' + match + '</span>';\n    });\n  }\n  scope.inspectObject = function (p) {\n    scope.json = syntaxHighlight(p);\n    $('#JsonInspector').modal('show');\n  };\n\n  scope.round = function (numb) {\n    return Math.round(numb * 1000) / 1000;\n  };\n\n  scope.fullfill = function () {\n    // Sets the order to completed\n    notie.confirm('This will set the order as completed, and eventually send notifications. Confirm?', 'Confirm', 'Cancel', function () {\n      $marketcloud.orders.update(scope.order.id, {\n        status: 'completed'\n      }).then(function (response) {\n        scope.order.status = 'completed';\n        notie.alert(1, 'Order successfully updated', 1);\n      }).catch(function (response) {\n        notie.alert(2, 'An error has occurred. Please try again.', 1);\n      });\n    });\n  };\n\n  scope.setToProcessing = function () {\n    // Sets the order to processing\n    window.Alert.confirm({\n      title: 'Confirm order status update?',\n      message: 'This will set the order status to \"processing\", and eventually send notifications to the customer. Confirm?',\n      onConfirm: function onConfirm() {\n        $marketcloud.orders.update(scope.order.id, {\n          status: 'processing'\n        }).then(function (response) {\n          scope.order.status = 'processing';\n          window.Alert.success({\n            message: 'Order successfully updated'\n          });\n        }).catch(function (response) {\n          window.Alert.error({});\n        });\n      }\n    });\n    /*      notie.confirm('This will set the order status to \"processing\", and eventually send notifications to the customer. Confirm?',\r\n            'Confirm',\r\n            'Cancel',\r\n            function() {\r\n              $marketcloud.orders.update(scope.order.id, {\r\n                  status: 'processing'\r\n                })\r\n                .then(function(response) {\r\n                  scope.order.status = 'processing'\r\n                  notie.alert(1, 'Order successfully updated', 1)\r\n                })\r\n                .catch(function(response) {\r\n                  notie.alert(2, 'An error has occurred. Please try again.', 1)\r\n                })\r\n            }) */\n  };\n\n  scope.updateShipmentUrl = function () {\n    var trackingCode = scope.newShipment.tracking_code;\n    var shipmetUrlStructures = {\n      gls: 'http://online.gls-slovenia.com/tt_page.php?tt_value=' + trackingCode,\n      postaSlovenije: 'http://sledenje.posta.si/Default.aspx?tn=' + trackingCode + '&guid=577712B3-9D04&lang=sl'\n    };\n\n    if (scope.shipmentURIPreset) {\n      if (scope.shipmentURIPreset === 'gls') {\n        scope.newShipment.tracking_link = shipmetUrlStructures.gls;\n      } else if (scope.shipmentURIPreset === 'postaSlovenije') {\n        scope.newShipment.tracking_link = shipmetUrlStructures.postaSlovenije;\n      }\n    } else {\n      scope.newShipment.tracking_link = '';\n      scope.newShipment.tracking_code = '';\n    }\n  };\n\n  scope.saveShipment = function () {\n    // Removing all validation feedback from the shipment\n    $('#shipmentModal .has-error').removeClass('has-error');\n    $('#shipmentModal .error').remove();\n\n    // Validating the new shipment\n    if (scope.newShipment.method === null) {\n      if (scope.order.shipping) {\n        scope.newShipment.method = scope.order.shipping;\n      } else {\n        $('select[ng-model=\"newShipment.method\"]').parent().addClass('has-error');\n        $('select[ng-model=\"newShipment.method\"]').parent().append($('<div class=\"text-danger\">This field is required</div>'));\n        return;\n      }\n    }\n\n    if (scope.newShipment.date) {\n      scope.newShipment.date = new Date(scope.newShipment.date);\n    }\n\n    if (scope.newShipment.delivery_date) {\n      scope.newShipment.delivery_date = new Date(scope.newShipment.delivery_date);\n    }\n\n    var shipmentToSave = angular.copy(scope.newShipment);\n\n    // Saving the new shipment\n    http({\n      method: 'POST',\n      url: window.API_BASE_URL + '/orders/' + scope.order.id + '/shipments',\n      data: shipmentToSave,\n      headers: {\n        Authorization: window.public_key + ':' + window.token\n      }\n    }).then(function (response) {\n      // Resetting the shipment\n      scope.newShipment = {\n        tracking_code: null,\n        tracking_link: null,\n        date: new Date(),\n        delivery_date: new Date(),\n        method: null,\n        description: null\n      };\n      if (scope.order.shipments) {\n        scope.order.shipments.push(shipmentToSave);\n      } else {\n        scope.order.shipments = [shipmentToSave];\n      }\n\n      $('#shipmentModal').modal('hide');\n\n      if (scope.saveShipmentAndFullfill === true) {\n        scope.fullfill();\n      }\n\n      assignDataToShipments();\n    }).catch(function (response) {\n      // $('#shipmentModal').modal('hide')\n      notie.alert(2, 'An error has occurred, please check your input', 1.5);\n    });\n  };\n\n  scope.updateShipment = function () {\n    // Removing all validation feedback from the shipment\n    $('#esitShipmentModal .has-error').removeClass('has-error');\n    $('#editShipmentModal .error').remove();\n\n    // Validating the new shipment\n    if (scope.shipmentToEdit.method === null) {\n      $('select[ng-model=\"shipmentToEdit.method\"]').parent().addClass('has-error');\n      $('select[ng-model=\"shipmentToEdit.method\"]').parent().append($('<div class=\"text-danger\">This field is required</div>'));\n      return;\n    }\n\n    var shipmentToSave = angular.copy(scope.shipmentToEdit);\n\n    if (shipmentToSave.date && shipmentToSave.date.toDate) {\n      shipmentToSave.date = shipmentToSave.date.toDate();\n      // scope.shipmentToEdit.date = new Date(scope.shipmentToEdit.date)\n    }\n\n    if (shipmentToSave.delivery_date && shipmentToSave.delivery_date.toDate) {\n      // scope.shipmentToEdit.delivery_date = new Date(scope.shipmentToEdit.delivery_date)\n      shipmentToSave.delivery_date = shipmentToSave.delivery_date.toDate();\n    }\n\n    http({\n      method: 'PUT',\n      url: window.API_BASE_URL + '/orders/' + scope.order.id + '/shipments/' + scope.shipmentToEditIndex,\n      data: shipmentToSave,\n      headers: {\n        Authorization: window.public_key + ':' + window.token\n      }\n    }).then(function (response) {\n      scope.shipmentToEdit = {};\n      $('#editShipmentModal').modal('hide');\n      notie.alert(1, 'Shipment updated', 1.5);\n    }).catch(function (error) {\n      console.log(error);\n      notie.alert(2, 'An error has occurred, please check your input', 1.5);\n    });\n  };\n\n  scope.showShipmentModal = function () {\n    $('#shipmentModal').modal('show');\n  };\n\n  scope.showEditShipmentModal = function (shipment, index) {\n    scope.shipmentToEdit = shipment;\n    scope.shipmentToEditIndex = index;\n\n    $('#editShipmentModal').modal('show');\n  };\n\n  scope.showPaymentModal = function () {\n    $('#paymentModal').modal('show');\n  };\n\n  scope.orderToCSV = function () {};\n\n  scope.createPDFInvoice = function () {\n    if (!scope.order.invoice_id) {\n      return console.log('Order withouth invoice');\n    }\n\n    http({\n      method: 'POST',\n      url: window.API_BASE_URL + '/invoices/' + scope.order.invoice_id + '/pdf',\n      headers: {\n        Authorization: window.public_key + ':' + window.token\n      }\n    }).then(function (response) {\n      var invoiceUrl = response.data.data.url;\n      Object.assign(document.createElement('a'), { target: '_blank', href: invoiceUrl }).click();\n    }).catch(function (error) {\n      alert('error');\n      console.log(error);\n    });\n  };\n\n  scope.createPDFCreditNote = function (refund) {\n    http({\n      method: 'POST',\n      url: window.API_BASE_URL + '/orders/' + scope.order.id + '/refunds/' + refund.id + '/pdf',\n      headers: {\n        Authorization: window.public_key + ':' + window.token\n      }\n    }).then(function (response) {\n      var refundUrl = response.data.data.url;\n      Object.assign(document.createElement('a'), { target: '_blank', href: refundUrl }).click();\n    }).catch(function (error) {\n      alert('error');\n      console.log(error);\n    });\n  };\n\n  scope.savePayment = function () {\n    http({\n      method: 'POST',\n      url: window.API_BASE_URL + '/orders/' + scope.order.id + '/payments',\n      data: scope.newPayment,\n      headers: {\n        Authorization: window.public_key + ':' + window.token\n      }\n    }).then(function (response) {\n      $('#paymentModal').modal('hide');\n      notie.alert(1, 'Payment saved', 1.5);\n      // var orderPayments = response.data.data.payments\n      scope.order.payments = response.data.data.payments;\n\n      scope.newPayment = {};\n\n      if (scope.savePaymentAndSetToProcessing === true) {\n        scope.setToProcessing();\n      }\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred, please try again.', 1.5);\n      $('#paymentModal').modal('hide');\n    });\n  };\n}]);"
    },
    {
      "id": 81,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\productTranslations.controller.js",
      "name": "./public/modules/data_dashboard/src/controllers/productTranslations.controller.js",
      "index": 81,
      "index2": 79,
      "size": 6914,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/productTranslations.controller.js"
        }
      ],
      "source": "'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n(function () {\n  'use strict';\n\n  angular.module('DataDashboard').controller('EditProductTranslationsController', EditProductTranslationsController);\n\n  EditProductTranslationsController.$inject = ['$scope', '$marketcloud', 'product', '$http', '$application', '$location', 'LocalesFactory'];\n\n  function EditProductTranslationsController(scope, $marketcloud, product, $http, $application, $location, locales) {\n    // If the current application does not have additional locales\n    // we redirect the user to the locales settings.\n    //\n    // We might want to prompt the user and ask them\n    // Go to settings or stay in the previous page?\n    if ($application.getAvailableLocaleCodes().length === 0) {\n      notie.alert(2, 'This store has no additional locale. Please add a locale first.', 2);\n      return $location.path('/system/localization');\n    }\n\n    // Injecting resolve data into the controller\n    scope.product = product.data.data;\n\n    // This is fetched from the app's config\n    scope.availableLocales = [];\n\n    // mocking the retrieval of locales\n    // THese are ALL the locals available in the world\n    scope.locales = locales;\n\n    // available locales\n    // Fetched from app settings,\n    // THese are the locals that the store owner wants for this app.\n    scope.availableLocales = [];\n\n    scope.availableLocales = $application.get().locales.split(',').map(function (code) {\n      return scope.locales[code];\n    });\n\n    // Which locale we are currently editing\n    // We already know that we have at least 1 locale\n    scope.currentLocale = scope.availableLocales[0];\n\n    // This will hold custom properties for further processing\n    scope.customPropertiesData = {};\n\n    // mapping non-core attributes into scope.customPropertiesData\n    var coreProperties = Models.Product.getPropertyNames();\n\n    // Should we be able to edit the slug? this is a on/off\n    scope.unsafeSlug = false;\n\n    coreProperties.push('id', 'variants', 'variantsDefinition', 'display_price_discount', 'display_price', 'has_variants', // for legacy reasons\n    'type', 'media', 'tax_id', 'locales', 'seo', 'requires_shipping', 'product_id', 'variant_id', 'application_id');\n\n    for (var k in scope.product) {\n      if (coreProperties.indexOf(k) < 0) {\n        scope.customPropertiesData[k] = scope.product[k];\n        delete scope.product[k];\n      }\n    }\n\n    // Handling variants\n    // The locale will look like this\n    /*\r\n      {\r\n        locales : {\r\n          \"it-IT\" : {\r\n            ..\r\n            variants : {\r\n              colors : {\r\n                label : \"colori\",\r\n                values: {\r\n                  \"red\"  : \"rosso\",\r\n                  \"yellow\" : \"giallo\"\r\n                  ...\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    */\n\n    if (product.type === 'product_with_variants') {\n      for (var localeName in scope.product.locales) {\n        var locale = scope.product.locales[localeName];\n        if (!locale.hasOwnProperty('variants')) {\n          // Let's initialize the variants in the locale!\n          locale.variants = {};\n\n          for (v_name in scope.product.variantsDefinition) {\n            // We want to initialize the values translation table\n            var variant_values_translations = {};\n            var variant_values = scope.product.variantsDefinition[v_name];\n            variant_values.forEach(function (v) {\n              variant_values_translations[v] = '';\n            });\n            locale.variants[v_name] = {\n              label: '',\n              values: variant_values_translations\n            };\n          }\n        }\n      }\n    }\n\n    // Init locales object\n    if (!scope.product.hasOwnProperty('locales')) {\n      scope.product.locales = {};\n    }\n\n    scope.customPropertiesDataLocales = {};\n\n    // Checking that the product has initialized every locale sub object\n    scope.availableLocales.forEach(function (locale) {\n      // Se il prodotto.locales non ha il locale, creo l'oggetto\n      if (!scope.product.locales.hasOwnProperty(locale.code)) {\n        scope.product.locales[locale.code] = {};\n      }\n\n      // Initializing the container for custom properties translations\n      scope.customPropertiesDataLocales[locale.code] = {};\n\n      for (var k in scope.customPropertiesData) {\n        scope.customPropertiesDataLocales[locale.code][k] = getTranslatedValueForCustomProperty(k, locale);\n      }\n\n      function getTranslatedValueForCustomProperty(k, locale) {\n        if (typeof scope.product.locales[locale.code][k] !== 'undefined') {\n          return scope.product.locales[locale.code][k];\n        }\n\n        return {\n          value: scope.customPropertiesData[k],\n          label: k\n        };\n      }\n    });\n\n    scope.getFlagClassName = function () {\n      return 'flag-icon-' + scope.currentLocale.code.slice(-2).toLocaleLowerCase();\n    };\n\n    scope.isRichText = function (str) {\n      if (typeof str !== 'string') return false;\n\n      var doc = new DOMParser().parseFromString(str, \"text/html\");\n      return [].slice.call(doc.body.childNodes).some(function (node) {\n        return node.nodeType === 1;\n      });\n    };\n\n    function getSlugFromString(v) {\n      return v.split(' ').map(function (item) {\n        return item.replace(/\\W/g, '');\n      }).map(function (item) {\n        return item.toLowerCase();\n      }).join('-');\n    }\n\n    scope.updateSlug = function () {\n      scope.product.locales[scope.currentLocale.code].slug = getSlugFromString(scope.product.locales[scope.currentLocale.code].name);\n    };\n\n    scope.updateTranslations = function () {\n      var payload = {\n        locales: angular.copy(scope.product.locales)\n      };\n\n      for (var locale in scope.customPropertiesDataLocales) {\n        // Custom properties of locale \"l\"\n        var customPropertiesForSingleLocale = scope.customPropertiesDataLocales[locale];\n\n        for (var k in customPropertiesForSingleLocale) {\n          payload.locales[locale][k] = customPropertiesForSingleLocale[k];\n        }\n      }\n\n      $marketcloud.products.update(scope.product.id, payload).then(function (response) {\n        notie.alert(1, 'All updates have been saved.', 2);\n      }).catch(function (error) {\n        notie.alert(3, 'An error has occurred, please try again', 2);\n      });\n    };\n\n    scope.filterNotNullProperties = function (item) {\n      var result = {};\n      for (var k in item) {\n        if (item[k]) {\n          result[k] = item[k];\n        }\n      }\n      return result;\n    };\n\n    scope.typeof = function (y) {\n      return typeof y === 'undefined' ? 'undefined' : _typeof(y);\n    };\n  }\n})();"
    },
    {
      "id": 82,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\products\\bundledProduct.edit.js",
      "name": "./public/modules/data_dashboard/src/controllers/products/bundledProduct.edit.js",
      "index": 82,
      "index2": 80,
      "size": 7303,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/products/bundledProduct.edit.js"
        }
      ],
      "source": "'use strict';\n\nangular.module('DataDashboard').controller('EditBundledProductController', ['$scope', '$marketcloud', 'product', '$http', function (scope, $marketcloud, product, $http) {\n  scope.customPropertiesData = {};\n  scope.itemsToAdd = [];\n  // Injecting resolve data into the controller\n  scope.product = product.data.data;\n  // scope.product.included_products = scope.product.included_products\n\n  if (!scope.product.hasOwnProperty()) {\n    var product_ids = [];\n  }\n\n  scope.product.included_products.forEach(function (product, idx) {\n    if (product.has_variants) {\n      var tempProd = product.variants.find(function (item) {\n        return product.selected_variant_id === item.variant_id;\n      });\n      product.selectedVariant = {};\n      console.log(product);\n      Object.keys(product.variantsDefinition).forEach(function (k) {\n        product.selectedVariant[k] = tempProd[k];\n      });\n    }\n  });\n\n  // Lists is not currenty used\n  // scope.product.lists.forEach(function (list) {\n  //   var this_list_ids = list.items.map(function (item) {\n  //     return item.product_id\n  //   })\n  //   product_ids = product_ids.concat(this_list_ids)\n  // })\n\n  scope.addProductsCardConfig = {\n    additionalFields: []\n  };\n  scope.addNewList = function () {\n    scope.product.lists.unshift({\n      name: '',\n      required: false,\n      items: []\n    });\n  };\n\n  scope.removeList = function (index) {\n    scope.product.lists.splice(index, 1);\n  };\n\n  scope.showAddProductsToListModal = function (list) {\n    scope.currentList = list;\n    $('#addProductsToListModal').modal('show');\n  };\n\n  $marketcloud.products.list({\n    id: product_ids.join(',')\n  }).then(function (response) {\n    var p_map = {};\n\n    response.data.data.forEach(function (i) {\n      p_map[i.id] = i;\n    });\n\n    // We fetch the products data, then we must add the properties\n    // related to them being in the bundled product\n    scope.product.lists.map(function (opt) {\n      opt.items = opt.items.map(function (item) {\n        return p_map[item.product_id];\n      });\n      return opt;\n    });\n  }).catch(function (error) {\n    notie.alert(3, 'An error has occurred', 1.5);\n  });\n\n  // mapping non-core attributes into scope.customPropertiesData\n  // var coreProperties = Models.Product.getPropertyNames()\n  // coreProperties.push('product_id', 'variant_id', 'display_price', 'display_price_discount', 'lists')\n  // for (var k in scope.product) {\n  //   if (coreProperties.indexOf(k) < 0) {\n  //     scope.customPropertiesData[k] = scope.product[k]\n  //     delete scope.product[k]\n  //   }\n  // }\n\n  function getSlugFromString(v) {\n    return v.split(' ').map(function (item) {\n      return item.replace(/\\W/g, '');\n    }).map(function (item) {\n      return item.toLowerCase();\n    }).join('-');\n  }\n  scope.unsafeSlug = false;\n\n  scope.updateSlug = function () {\n    scope.product.slug = getSlugFromString(scope.product.name);\n  };\n\n  // This method must be implemented in order to\n  // make the media manager work\n  scope.getImagesContainer = function () {\n    return scope.product.images;\n  };\n\n  scope.removeImage = function (i) {\n    scope.product.images.splice(i, 1);\n  };\n\n  scope.categories = [];\n\n  $marketcloud.categories.list().then(function (response) {\n    scope.categories = response.data.data;\n  }).catch(function () {\n    notie.alert(2, 'An error has occurred while loading categories', 1.5);\n  });\n\n  scope.brands = [];\n  // Loading brands\n\n  $marketcloud.brands.list().then(function (response) {\n    scope.brands = response.data.data;\n  }).catch(function () {\n    notie.alert(2, 'An error has occurred while loading brands', 1.5);\n  });\n\n  scope.newAttribute = {\n    name: null,\n    value: null,\n    type: null\n  };\n  scope.newAttribute.type = 'string';\n  scope.availableTypes = [{ name: 'String', value: 'string' }, { name: 'Number', value: 'number' }, { name: 'Boolean', value: 'boolean' }];\n\n  scope.filterNotNullProperties = function (item) {\n    var result = {};\n    for (var k in item) {\n      if (item[k]) {\n        result[k] = item[k];\n      }\n    }\n    return result;\n  };\n\n  scope.updateSelectedVariantForProduct = function (idx, key, value) {\n    var selectedVariantData = scope.product.included_products[idx].selectedVariant;\n    var productVariants = scope.product.included_products[idx].variants;\n\n    var selectedVariant = findObjectWithKeyValue(productVariants, selectedVariantData);\n\n    scope.product.included_items[idx].variant_id = selectedVariant.variant_id;\n  };\n\n  var findObjectWithKeyValue = function findObjectWithKeyValue(array, object) {\n    var current = array;\n    var result;\n\n    Object.keys(object).forEach(function (k) {\n      var value = object[k];\n\n      current = current.filter(function (val) {\n        return val[k] === value;\n      });\n\n      if (current.length === 1) {\n        result = current[0];\n      }\n    });\n\n    return result;\n  };\n\n  scope.prepareRegex = function () {\n    scope.query.name.$options = 'i';\n  };\n\n  scope.loadProducts = function (query) {\n    query = query || scope.query;\n\n    $marketcloud.products.list(query).then(function (response) {\n      scope.products = response.data.data;\n      scope.products.filter(function (item) {\n        return scope.itemsToAdd.map(function (i) {\n          return i.id;\n        }).indexOf(item.id) < 0;\n      });\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred. Please try again');\n    });\n  };\n\n  scope.removeProduct = function (idx) {\n    scope.product.included_products.splice(idx, 1);\n    scope.product.included_items.splice(idx, 1);\n  };\n\n  scope.addProduct = function (product) {\n    if (product.type !== 'bundled_product') {\n      product.quantity = 1;\n\n      var newProduct = {\n        product_id: product.id,\n        quantity: product.quantity\n      };\n\n      if (product.has_variants) {\n        newProduct.variant_id = 1;\n      }\n\n      scope.product.included_items.push(newProduct);\n\n      if (product.has_variants) {\n        product.selectedVariant = {};\n        Object.keys(product.variantsDefinition).forEach(function (k) {\n          product.selectedVariant[k] = product.variantsDefinition[k][0];\n        });\n      }\n\n      scope.product.included_products.push(product);\n    } else {\n      notie.alert(3, 'You can not include a bundled product in a bundled product.');\n    }\n\n    scope.query.name.$regex = '';\n    scope.products = [];\n  };\n\n  scope.updateProduct = function () {\n    var update = angular.copy(scope.product);\n\n    delete update.included_products;\n    delete update.selectedVariant;\n    // let's re-assemble the product first.\n    for (var k in scope.customPropertiesData) {\n      update[k] = scope.customPropertiesData[k];\n    }\n\n    update.lists.forEach(function (list) {\n      list.items = list.items.map(function (item) {\n        return { product_id: item.id };\n      });\n    });\n\n    $marketcloud.products.update(update.id, update).then(function (response) {\n      notie.alert(1, 'Update Succeded', 1.5);\n    }).catch(function (response) {\n      notie.alert(3, 'Update failed', 1.5);\n    });\n  };\n\n  scope.showTheList = false;\n  scope.showList = function () {\n    scope.showTheList = true;\n  };\n  scope.hideList = function () {\n    window.setTimeout(function () {\n      scope.showTheList = false;\n      scope.$apply();\n    }, 200);\n  };\n}]);"
    },
    {
      "id": 83,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\products\\bundledProduct.new.js",
      "name": "./public/modules/data_dashboard/src/controllers/products/bundledProduct.new.js",
      "index": 83,
      "index2": 81,
      "size": 7348,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/products/bundledProduct.new.js"
        }
      ],
      "source": "'use strict';\n\nangular.module('DataDashboard').controller('NewBundledProductController', ['$scope', '$http', '$location', '$marketcloud', function (scope, $http, location, $marketcloud) {\n  scope.categories = [];\n  scope.catch = null;\n  scope.newCategory = {};\n  scope.brands = [];\n  scope.newBrand = {};\n  scope.itemsToAdd = [];\n  scope.selectedProducts = [];\n\n  // This method must be implemented in order to\n  // make the media manager work\n  scope.getImagesContainer = function () {\n    return scope.product.images;\n  };\n\n  scope.removeImage = function (i) {\n    scope.product.images.splice(i, 1);\n  };\n\n  function getSlugFromString(v) {\n    return v.split(' ').map(function (item) {\n      return item.replace(/\\W/g, '');\n    }).map(function (item) {\n      return item.toLowerCase();\n    }).join('-');\n  }\n  scope.unsafeSlug = false;\n\n  scope.updateSlug = function () {\n    scope.product.slug = getSlugFromString(scope.product.name);\n  };\n\n  scope.addEmptyVariant = function () {\n    console.log('ads');\n  };\n\n  scope.loadCategories = function () {\n    $marketcloud.categories.list({}).then(function (response) {\n      scope.categories = response.data.data;\n    }).catch(function () {\n      console.log('An error has occurred while loading categories');\n    });\n  };\n\n  // Initializing the categories array\n  scope.loadCategories();\n\n  scope.saveCategory = function () {\n    $marketcloud.categories.save(scope.newCategory).then(function (response) {\n      $('#newCategoryModal').modal('hide');\n      scope.categories.push(scope.newCategory);\n      scope.newCategory = {};\n    }).catch(function (response) {\n      $('#newCategoryModal').hide();\n      notie.alert(3, 'An error has occurred. Category not saved', 1);\n    });\n  };\n\n  scope.loadBrands = function () {\n    $marketcloud.brands.list({}).then(function (response) {\n      scope.brands = response.data.data;\n    }).catch(function () {\n      notie.alert(2, 'An error has occurred while loading brands', 1.5);\n    });\n  };\n  // Initializing the brands array\n  scope.loadBrands();\n\n  scope.saveBrand = function () {\n    $marketcloud.brands.save(scope.newBrand).then(function (response) {\n      $('#newBrandModal').modal('hide');\n      scope.brands.push(scope.newBrand);\n      scope.newBrand = {};\n    }).catch(function (response) {\n      $('#newBrandModal').hide();\n      notie.alert(3, 'An error has occurred. Brand not saved', 1);\n    });\n  };\n\n  scope.addProductsCardConfig = {\n    additionalFields: []\n  };\n  scope.addNewList = function () {\n    scope.product.lists.unshift({\n      name: '',\n      required: false,\n      items: []\n    });\n  };\n\n  scope.removeList = function (index) {\n    scope.product.lists.splice(index, 1);\n  };\n\n  scope.showAddProductsToListModal = function (list) {\n    scope.currentList = list;\n    $('#addProductsToListModal').modal('show');\n  };\n\n  scope.product = {\n    type: 'bundled_product',\n    name: '',\n    description: '',\n    stock_type: 'status',\n    stock_status: 'in_stock',\n    included_items: [],\n    images: [],\n    media: [],\n    has_variants: false,\n    published: true,\n    lists: []\n  };\n\n  scope.productError = null;\n  scope.newCustomProperty = {};\n  scope.customPropertiesData = {};\n\n  // This contains validation Errors\n  scope.Forms = {};\n\n  scope.Forms.newCustomProperty = {\n    name: null,\n    value: null\n\n    // Array of new properties's names (strings)\n  };scope.customPropertiesNames = [];\n\n  scope.hideErrors = function () {\n    scope.catch = null;\n    scope.catchField = null;\n  };\n\n  scope.saveProduct = function (skipSaving) {\n    console.log(scope.product);\n    for (var k in scope.product) {\n      if (scope.product[k] === null) {\n        delete scope.product[k];\n      }\n    }\n\n    scope.hideErrors();\n\n    // Custom properties cannot be validated through Schematic.\n    var props_to_validate = {};\n    var known_props = Models.GroupedProduct.getPropertyNames();\n    for (var k in scope.product) {\n      if (known_props.indexOf(k) > -1) {\n        props_to_validate[k] = scope.product[k];\n      }\n    }\n\n    for (var k in scope.customPropertiesData) {\n      scope.product[k] = scope.customPropertiesData[k];\n    }\n\n    for (var key in scope.product) {\n      if (scope.product[key] === null) {\n        delete scope.product[key];\n      }\n    }\n\n    var to_save = angular.copy(scope.product);\n\n    for (var k in to_save.lists) {\n      to_save.lists[k].items = to_save.lists[k].items.map(function (item) {\n        return { product_id: item.id };\n      });\n    }\n\n    if (skipSaving === true) {\n      return;\n    }\n    $marketcloud.products.save(to_save).then(function (response) {\n      notie.alert(1, 'Product saved', 1.5);\n      location.path('/products');\n    }).catch(function (response) {\n      notie.alert(2, 'An error has occurred. Product not saved', 1);\n    });\n  };\n\n  scope.prepareRegex = function () {\n    scope.query.name.$options = 'i';\n  };\n\n  scope.loadProducts = function (query) {\n    query = query || scope.query;\n\n    $marketcloud.products.list(query).then(function (response) {\n      scope.products = response.data.data.filter(function (item) {\n        return scope.itemsToAdd.map(function (i) {\n          return i.id;\n        }).indexOf(item.id) < 0;\n      });\n    }).catch(function (response) {\n      console.log(response);\n      notie.alert(3, 'An error has occurred. Please try again');\n    });\n  };\n\n  scope.updateSelectedVariantForProduct = function (idx, key, value) {\n    var selectedVariantData = scope.selectedProducts[idx].selectedVariant;\n\n    var productVariants = scope.selectedProducts[idx].variants;\n\n    var selectedVariant = findObjectWithKeyValue(productVariants, selectedVariantData);\n\n    scope.product.included_items[idx].variant_id = selectedVariant.variant_id;\n  };\n\n  var findObjectWithKeyValue = function findObjectWithKeyValue(array, object) {\n    var current = array;\n    var result;\n\n    Object.keys(object).forEach(function (k) {\n      var value = object[k];\n\n      current = current.filter(function (val) {\n        return val[k] === value;\n      });\n\n      if (current.length === 1) {\n        result = current[0];\n      }\n    });\n\n    return result;\n  };\n\n  scope.removeProduct = function (idx) {\n    scope.product.included_products.splice(idx, 1);\n    scope.product.included_items.splice(idx, 1);\n    console.log(scope.product);\n  };\n\n  scope.addProduct = function (product) {\n    if (product.type !== 'bundled_product') {\n      product.quantity = 1;\n      var newProduct = {\n        product_id: product.id,\n        quantity: product.quantity\n      };\n\n      if (product.has_variants) {\n        newProduct.variant_id = 1;\n      }\n\n      scope.product.included_items.push(newProduct);\n\n      if (product.has_variants) {\n        product.selectedVariant = {};\n        Object.keys(product.variantsDefinition).forEach(function (k) {\n          product.selectedVariant[k] = product.variantsDefinition[k][0];\n        });\n      }\n\n      scope.selectedProducts.push(product);\n    } else {\n      notie.alert(3, 'You can not include a bundled product in a bundled product.');\n    }\n    scope.query.name.$regex = '';\n    scope.products = [];\n  };\n\n  scope.showTheList = false;\n  scope.showList = function () {\n    scope.showTheList = true;\n  };\n  scope.hideList = function () {\n    window.setTimeout(function () {\n      scope.showTheList = false;\n      scope.$apply();\n    }, 200);\n  };\n}]);"
    },
    {
      "id": 84,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\products\\configurableProduct.edit.js",
      "name": "./public/modules/data_dashboard/src/controllers/products/configurableProduct.edit.js",
      "index": 84,
      "index2": 82,
      "size": 4133,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/products/configurableProduct.edit.js"
        }
      ],
      "source": "'use strict';\n\nangular.module('DataDashboard').controller('EditConfigurableProductController', ['$scope', '$marketcloud', 'product', '$http', function (scope, $marketcloud, product, $http) {\n  scope.customPropertiesData = {};\n\n  // Injecting resolve data into the controller\n  scope.product = product.data.data;\n\n  if (!scope.product.hasOwnProperty()) {\n    var product_ids = [];\n  }\n\n  scope.product.options.forEach(function (option) {\n    var this_option_ids = option.items.map(function (item) {\n      return item.product_id;\n    });\n    product_ids = product_ids.concat(this_option_ids);\n  });\n\n  scope.addProductsCardConfig = {\n    additionalFields: []\n  };\n  scope.addNewOption = function () {\n    scope.product.options.unshift({\n      name: '',\n      required: false,\n      items: []\n    });\n  };\n\n  scope.removeOption = function (index) {\n    scope.product.options.splice(index, 1);\n  };\n\n  scope.showAddProductsToOptionModal = function (option) {\n    scope.currentOption = option;\n    $('#addProductsToOptionModal').modal('show');\n  };\n\n  $marketcloud.products.list({\n    id: product_ids.join(',')\n  }).then(function (response) {\n    var p_map = {};\n\n    response.data.data.forEach(function (i) {\n      p_map[i.id] = i;\n    });\n\n    // We fetch the products data, then we must add the properties\n    // related to them being in the bundled product\n    scope.product.options.map(function (opt) {\n      opt.items = opt.items.map(function (item) {\n        return p_map[item.product_id];\n      });\n      return opt;\n    });\n  }).catch(function (error) {\n    notie.alert(3, 'An error has occurred', 1.5);\n  });\n\n  // mapping non-core attributes into scope.customPropertiesData\n  var coreProperties = Models.Product.getPropertyNames();\n  coreProperties.push('product_id', 'variant_id', 'display_price', 'display_price_discount', 'options');\n  for (var k in scope.product) {\n    if (coreProperties.indexOf(k) < 0) {\n      scope.customPropertiesData[k] = scope.product[k];\n      delete scope.product[k];\n    }\n  }\n\n  function getSlugFromString(v) {\n    return v.split(' ').map(function (item) {\n      return item.replace(/\\W/g, '');\n    }).map(function (item) {\n      return item.toLowerCase();\n    }).join('-');\n  }\n  scope.unsafeSlug = false;\n\n  scope.updateSlug = function () {\n    scope.product.slug = getSlugFromString(scope.product.name);\n  };\n\n  // This method must be implemented in order to\n  // make the media manager work\n  scope.getImagesContainer = function () {\n    return scope.product.images;\n  };\n\n  scope.removeImage = function (i) {\n    scope.product.images.splice(i, 1);\n  };\n\n  scope.categories = [];\n\n  $marketcloud.categories.list().then(function (response) {\n    scope.categories = response.data.data;\n  }).catch(function () {\n    notie.alert(2, 'An error has occurred while loading categories', 1.5);\n  });\n\n  scope.brands = [];\n  // Loading brands\n\n  $marketcloud.brands.list().then(function (response) {\n    scope.brands = response.data.data;\n  }).catch(function () {\n    notie.alert(2, 'An error has occurred while loading brands', 1.5);\n  });\n\n  scope.newAttribute = {\n    name: null,\n    value: null,\n    type: null\n  };\n  scope.newAttribute.type = 'string';\n  scope.availableTypes = [{ name: 'String', value: 'string' }, { name: 'Number', value: 'number' }, { name: 'Boolean', value: 'boolean' }];\n\n  scope.filterNotNullProperties = function (item) {\n    var result = {};\n    for (var k in item) {\n      if (item[k]) {\n        result[k] = item[k];\n      }\n    }\n    return result;\n  };\n\n  scope.updateProduct = function () {\n    var update = angular.copy(scope.product);\n    // let's re-assemble the product first.\n    for (var k in scope.customPropertiesData) {\n      update[k] = scope.customPropertiesData[k];\n    }\n\n    update.options.forEach(function (option) {\n      option.items = option.items.map(function (item) {\n        return { product_id: item.id };\n      });\n    });\n\n    $marketcloud.products.update(update.id, update).then(function (response) {\n      notie.alert(1, 'Update Succeded', 1.5);\n    }).catch(function (response) {\n      notie.alert(3, 'Update failed', 1.5);\n    });\n  };\n}]);"
    },
    {
      "id": 85,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\products\\configurableProduct.new.js",
      "name": "./public/modules/data_dashboard/src/controllers/products/configurableProduct.new.js",
      "index": 85,
      "index2": 83,
      "size": 4652,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/products/configurableProduct.new.js"
        }
      ],
      "source": "'use strict';\n\nangular.module('DataDashboard').controller('NewConfigurableProductController', ['$scope', '$http', '$location', '$marketcloud', function (scope, $http, location, $marketcloud) {\n  scope.categories = [];\n  scope.catch = null;\n  scope.newCategory = {};\n  scope.brands = [];\n  scope.newBrand = {};\n\n  // This method must be implemented in order to\n  // make the media manager work\n  scope.getImagesContainer = function () {\n    return scope.product.images;\n  };\n\n  scope.removeImage = function (i) {\n    scope.product.images.splice(i, 1);\n  };\n\n  function getSlugFromString(v) {\n    return v.split(' ').map(function (item) {\n      return item.replace(/\\W/g, '');\n    }).map(function (item) {\n      return item.toLowerCase();\n    }).join('-');\n  }\n  scope.unsafeSlug = false;\n\n  scope.updateSlug = function () {\n    scope.product.slug = getSlugFromString(scope.product.name);\n  };\n\n  scope.loadCategories = function () {\n    $marketcloud.categories.list({}).then(function (response) {\n      scope.categories = response.data.data;\n    }).catch(function () {\n      console.log('An error has occurred while loading categories');\n    });\n  };\n\n  // Initializing the categories array\n  scope.loadCategories();\n\n  scope.saveCategory = function () {\n    $marketcloud.categories.save(scope.newCategory).then(function (response) {\n      $('#newCategoryModal').modal('hide');\n      scope.categories.push(scope.newCategory);\n      scope.newCategory = {};\n    }).catch(function (response) {\n      $('#newCategoryModal').hide();\n      notie.alert(3, 'An error has occurred. Category not saved', 1);\n    });\n  };\n\n  scope.loadBrands = function () {\n    $marketcloud.brands.list({}).then(function (response) {\n      scope.brands = response.data.data;\n    }).catch(function () {\n      notie.alert(2, 'An error has occurred while loading brands', 1.5);\n    });\n  };\n  // Initializing the brands array\n  scope.loadBrands();\n\n  scope.saveBrand = function () {\n    $marketcloud.brands.save(scope.newBrand).then(function (response) {\n      $('#newBrandModal').modal('hide');\n      scope.brands.push(scope.newBrand);\n      scope.newBrand = {};\n    }).catch(function (response) {\n      $('#newBrandModal').hide();\n      notie.alert(3, 'An error has occurred. Brand not saved', 1);\n    });\n  };\n\n  scope.addProductsCardConfig = {\n    additionalFields: []\n  };\n  scope.addNewOption = function () {\n    scope.product.options.unshift({\n      name: '',\n      required: false,\n      items: []\n    });\n  };\n\n  scope.removeOption = function (index) {\n    scope.product.options.splice(index, 1);\n  };\n\n  scope.showAddProductsToOptionModal = function (option) {\n    scope.currentOption = option;\n    $('#addProductsToOptionModal').modal('show');\n  };\n\n  scope.product = {\n    type: 'configurable_product',\n    name: '',\n    description: '',\n    stock_type: 'status',\n    stock_status: 'in_stock',\n    images: [],\n    media: [],\n    has_variants: false,\n    published: true,\n    options: []\n\n  };\n\n  scope.productError = null;\n  scope.newCustomProperty = {};\n  scope.customPropertiesData = {};\n\n  // This contains validation Errors\n  scope.Forms = {};\n\n  scope.Forms.newCustomProperty = {\n    name: null,\n    value: null\n\n    // Array of new properties's names (strings)\n  };scope.customPropertiesNames = [];\n\n  scope.hideErrors = function () {\n    scope.catch = null;\n    scope.catchField = null;\n  };\n\n  scope.saveProduct = function (skipSaving) {\n    for (var k in scope.product) {\n      if (scope.product[k] === null) {\n        delete scope.product[k];\n      }\n    }\n\n    scope.hideErrors();\n\n    // Custom properties cannot be validated through Schematic.\n    var props_to_validate = {};\n    var known_props = Models.GroupedProduct.getPropertyNames();\n    for (var k in scope.product) {\n      if (known_props.indexOf(k) > -1) {\n        props_to_validate[k] = scope.product[k];\n      }\n    }\n\n    for (var k in scope.customPropertiesData) {\n      scope.product[k] = scope.customPropertiesData[k];\n    }\n\n    for (var key in scope.product) {\n      if (scope.product[key] === null) {\n        delete scope.product[key];\n      }\n    }\n\n    var to_save = angular.copy(scope.product);\n\n    for (var k in to_save.options) {\n      to_save.options[k].items = to_save.options[k].items.map(function (item) {\n        return { product_id: item.id };\n      });\n    }\n\n    if (skipSaving === true) {\n      return;\n    }\n    $marketcloud.products.save(to_save).then(function (response) {\n      notie.alert(1, 'Product saved', 1.5);\n      location.path('/products');\n    }).catch(function (response) {\n      notie.alert(2, 'An error has occurred. Product not saved', 1);\n    });\n  };\n}]);"
    },
    {
      "id": 86,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\products\\products.list.js",
      "name": "./public/modules/data_dashboard/src/controllers/products/products.list.js",
      "index": 86,
      "index2": 84,
      "size": 20089,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/products/products.list.js"
        }
      ],
      "source": "'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nangular.module('DataDashboard').controller('ListProductsController', ['$scope', '$location', '$marketcloud', '$http', '$q', 'products', '$route', '$rootScope', 'StormConfiguration', '$utils', '$models', function (scope, $location, $marketcloud, http, $q, resources, $route, $rootScope, StormConfiguration, $utils, $models) {\n  'use strict';\n\n  // This array will hold our data\n\n  scope.products = [];\n\n  // Bulk control\n  // Here we place selected prodocuts for bulk actions\n  scope.selected = [];\n\n  // BUlk operations buttons\n  scope.showBulkControls = false;\n\n  // Keeping track of which resources are selected\n  scope.selections = {};\n\n  // The main resource\n  scope.products = resources.data.data;\n\n  // The columns we are showing\n  // Loading from config or initializing\n  scope.showing_attributes = StormConfiguration.get('products_list_showing_attributes') || [];\n\n  // Attributes not togglable in view\n  scope.reserved_attributes = ['name', 'type', 'price', 'inventory', 'published'];\n\n  // Initializing pagination\n  scope.pagination = {\n    currentPage: resources.data.page,\n    numberOfPages: resources.data.pages,\n    nextPage: resources.data._links.next || null,\n    previousPage: resources.data._links.prev || null,\n    count: resources.data.count\n\n    // The query object to filter results from the api\n  };scope.query = {\n    per_page: 20,\n    page: scope.pagination.currentPage\n\n    // Parsing URL parameters, if provided\n    // Applying Url query\n  };var urlQuery = {};\n  try {\n    urlQuery = JSON.parse($route.current.params.query);\n  } catch (e) {\n    urlQuery = {};\n  }\n\n  for (var k in urlQuery) {\n    scope.query[k] = urlQuery[k];\n  }\n\n  /************************************************************\r\n   *                         COLUMNS\r\n   **************************************************************/\n\n  // We assign to available_attributes\n  // those keys of products\n  scope.available_attributes = [];\n\n  // Building the available_attributes array\n  scope.products.forEach(function (p) {\n    // Attributes to add to available_attributes\n    var new_attributes = Object.keys(p).filter(function (key) {\n      // It must not be in reserved list\n      return scope.reserved_attributes.indexOf(key) === -1;\n    }).filter(function (key) {\n      // must be something we can render\n      var types = ['number', 'string', 'boolean'];\n      return types.indexOf(_typeof(p[key])) > -1;\n    }).filter(function (key) {\n      // must not be a duplicate\n      return scope.available_attributes.indexOf(key) === -1;\n    });\n    scope.available_attributes = scope.available_attributes.concat(new_attributes);\n  });\n\n  /*\r\n      For legacy reasons, some products may have overwritten the type property\r\n      so we infer it again here\r\n   */\n\n  scope.products.forEach(function (product) {\n    if (product.type === 'simple_product' || product.type === 'product_with_variants' || product.type === 'bundled_product') {\n      return;\n    }\n\n    if (product.hasOwnProperty('variants') && product.hasOwnProperty('variantsDefinition')) {\n      product.type = 'product_with_variants';\n    } else {\n      product.type = 'simple_product';\n    }\n  });\n\n  /*\r\n   *    Shows or hides a column by name\r\n   *    @param {String} name The name of the column to show/hide\r\n   */\n  scope.toggleColumn = function (name) {\n    var i = scope.showing_attributes.indexOf(name);\n    if (i > -1) {\n      scope.showing_attributes.splice(i, 1);\n    } else {\n      scope.showing_attributes.push(name);\n    }\n\n    StormConfiguration.set('products_list_showing_attributes', scope.showing_attributes);\n  };\n\n  scope.filterColumnNamesPattern = '';\n  scope.filterColumnNames = function (item) {\n    return item.indexOf(scope.filterColumnNamesPattern) > -1;\n  };\n\n  /************************************************************\r\n   *                         FILTERS\r\n   **************************************************************/\n\n  // We want to be able to filter also by reserved attributes\n  scope.filterAttributes = scope.reserved_attributes.concat(scope.available_attributes);\n\n  scope.applyFilters = function (filters) {\n    filters.forEach(function (filter) {\n      scope.query[filter.name] = filter.value;\n    });\n    scope.loadData();\n  };\n\n  scope.applySorting = function () {\n    scope.loadData();\n    $(\"#sortingModal\").modal('hide');\n  };\n\n  scope.sortByColumn = function (columnName) {\n\n    var order = null;\n\n    if (scope.query.sort_order === 'DESC') order = 'ASC';else order = 'DESC';\n\n    scope.query.sort_by = columnName;\n\n    scope.query.sort_order = order;\n\n    scope.loadData();\n  };\n\n  /************************************************************\r\n   *                         MULTIPLE/BULK SELECTION\r\n   **************************************************************/\n\n  // Holding query fields\n  // When listing data this oobject is sent\n\n  scope.isItemSelected = function (item) {\n    return scope.selected.indexOf(item.id) > -1;\n  };\n\n  scope.toggleItemSelection = function (item) {\n    // If is not selected, we select it\n    if (!scope.isItemSelected(item)) {\n      return scope.selected.push(item.id);\n    }\n\n    // If selected we find it and remove it\n    for (var i = scope.selected.length - 1; i >= 0; i--) {\n      if (scope.selected[i] === item.id) {\n        scope.selected.splice(i, 1);\n      }\n    }\n  };\n\n  scope.toggleAll = function () {\n    if (scope.selectAll === false) {\n      scope.selected = [];\n    } else {\n      scope.selected = scope.products.map(function (product) {\n        return product.id;\n      });\n    }\n  };\n\n  scope.$watch('selected', function (newValue, oldValue) {\n    // Have to recaulcate scope.selections\n    var tmp = {};\n    scope.selected.forEach(function (id) {\n      tmp[id] = true;\n    });\n    scope.selections = tmp;\n  });\n\n  scope.getSelectedItems = function () {\n    return scope.products.filter(function (p) {\n      return scope.isItemSelected(p);\n    });\n  };\n\n  scope.bulkSetPublishing = function (flag) {\n    // flag must be boolean\n\n    var defer = $q.defer();\n\n    var promises = [];\n\n    scope.getSelectedItems().forEach(function (product) {\n      promises.push($marketcloud.products.update(product.id, {\n        published: flag\n      }));\n    });\n\n    $q.all(promises).then(function () {\n      notie.alert(1, 'All products have been updated', 1.5);\n      scope.loadPage(scope.pagination.currentPage);\n    });\n\n    return defer.promise;\n  };\n\n  scope.bulkDelete = function () {\n    notie.confirm('Delete ' + scope.getSelectedItems().length + ' products?', 'Delete', 'Cancel', function () {\n      var defer = $q.defer();\n\n      var promises = [];\n\n      scope.getSelectedItems().forEach(function (product) {\n        promises.push($marketcloud.products.delete(product.id));\n      });\n\n      $q.all(promises).then(function () {\n        notie.alert(1, 'All products have been deleted', 1.5);\n        scope.loadPage(scope.pagination.currentPage);\n      });\n\n      return defer.promise;\n    });\n  };\n\n  scope.bulkJSONExport = function () {\n    // If there are no selected items, we export the whole current view\n    if (scope.getSelectedItems().length === 0) return $utils.exportAsJSON(scope.products);\n\n    $utils.exportAsJSON(scope.getSelectedItems());\n  };\n\n  scope.bulkCSVExport = function () {\n    var _data = scope.getSelectedItems();\n\n    // If there are no selected items, we export the whole current view\n    if (_data.length === 0) _data = scope.products;\n\n    var bucket = [];\n\n    _data.forEach(function (product) {\n      if (\"simple_product\" === product.type) {\n        bucket.push(product);\n      } else if (\"product_with_variants\" === product.type) {\n\n        var productWithoutVariants = angular.copy(product);\n        delete productWithoutVariants.variants;\n        bucket.push(productWithoutVariants);\n\n        var variantNames = [];\n\n        product.variants.forEach(function (i) {\n          i.type = \"variant\";\n          bucket.push(i);\n        });\n      } else {\n        bucket.push(product);\n      }\n    });\n\n    _data = bucket;\n\n    console.log(\"Prima di flatten\", angular.copy(_data));\n\n    _data = _data.map($utils.flatten);\n\n    console.log(\"Dopo di flatten\", angular.copy(_data));\n\n    var _csv = $utils.JSONToCSV(_data);\n\n    console.log(\"IL CSV\", angular.copy(_csv));\n    return $utils.exportAsCSV(_csv);\n  };\n\n  /************************************************************\r\n   *                         IMPORT/EXPORT\r\n   **************************************************************/\n  scope.importProducts = function () {\n    notie.alert(4, 'Contact us at info@marketcloud.studio404.net with import subject', 1.5);\n  };\n\n  // Shows the file selector dialog\n  scope.chooseJSONFile = function () {\n    scope.importMode = 'JSON';\n    document.querySelector(\"#JSONFileInput\").click();\n  };\n  scope.chooseCSVFile = function () {\n    scope.importMode = 'CSV';\n    document.querySelector(\"#CSVFileInput\").click();\n  };\n\n  // Updates the local copy of file contents\n  scope.JSONFileChanged = function () {\n\n    var file = document.getElementById(\"JSONFileInput\").files[0];\n\n    //Resetting the file input so we can re-try uploads\n    // of the same file and still detect changes\n    document.getElementById(\"JSONFileInput\").value = \"\";\n\n    if (file) {\n      var reader = new FileReader();\n      reader.readAsText(file, \"UTF-8\");\n      reader.onload = function (evt) {\n\n        // TODO add try catch to manage invalid json\n        try {\n          var jsonLines = JSON.parse(evt.target.result);\n        } catch (e) {\n          return Alert.error({\n            message: 'Invalid JSON file, please check file syntax'\n          });\n        }\n\n        scope.importJSON(jsonLines);\n      };\n      reader.onerror = function (evt) {\n        notie.alert(3, \"error reading file\", 2);\n      };\n    }\n  };\n\n  scope.CSVFileChanged = function () {\n\n    var file = document.getElementById(\"CSVFileInput\").files[0];\n\n    //Resetting the file input so we can re-try uploads\n    // of the same file and still detect changes\n    document.getElementById(\"CSVFileInput\").value = \"\";\n\n    if (file) {\n      var reader = new FileReader();\n      reader.readAsText(file, \"UTF-8\");\n      reader.onload = function (evt) {\n\n        // TODO add try catch to manage invalid json\n        var csvFileContent = evt.target.result;\n\n        var productsToImport = $utils.CSVToJSON(csvFileContent);\n\n        // Sacrifice brevity in the name of clarity for the greater good\n        // We flatten jsons before exporting to CSV so now we must unflatten them\n        productsToImport = productsToImport.map($utils.unflatten);\n\n        scope.importJSON(productsToImport);\n\n        // JSON is an array\n      };\n      reader.onerror = function (evt) {\n        notie.alert(3, \"error reading file\", 2);\n      };\n    }\n  };\n\n  // Upload json content\n  scope.uploadJSON = function () {\n    // Importing as json this file\n    var jsonLines = JSON.parse(scope.fileContent);\n    console.log(\"jsonLines Ã¨ \", jsonLines);\n    scope.importJSON(jsonLines);\n  };\n\n  // Upload ccsv content\n  scope.uploadCSV = function () {\n    // Importing as json this file\n    // TODO CSV TO JSON\n    //var jsonLines = JSON.parse(scope.fileContent);\n    //scope.importJSON(jsonLines);\n    console.log(\"To implement...\");\n  };\n\n  // Import json\n  scope.importJSON = function (lines) {\n    var productsToImport = [];\n    var invalidItemIndex = null;\n    var invalidItems = [];\n\n    for (var i = 0; i < lines.length; i++) {\n      var line = lines[i];\n      if (line.type === \"simple_product\") {\n\n        var validation = $models.Product.validate(line);\n        if (false === validation.valid) {\n          //notie.alert(3,\"Please check your JSON, element number \"+String(i+1)+\" is invalid.\",2);\n          Alert.error({\n            message: 'Please check your import file. Element number ' + String(i + 1) + ' is invalid.'\n          });\n          invalidItems.push(line);\n          break;\n        }\n        productsToImport.push(line);\n      } else if (line.type === \"product_with_variants\") {\n\n        var validation = $models.ProductWithVariants.validate(line);\n        if (false === validation.valid) {\n          //notie.alert(3,\"Please check your JSON, element number \"+String(i+1)+\" is invalid.\",2);\n          Alert.error({\n            message: 'Please check your import file. Element number ' + String(i + 1) + ' is invalid.'\n          });\n          invalidItems.push(line);\n          break;\n        } else {\n          productsToImport.push(line);\n        }\n      } else if (line.type === \"variant\") {\n        if (!productsToImport[productsToImport.length - 1].variants) productsToImport[productsToImport.length - 1].variants = [];\n\n        var validation = $models.Variant.validate(line);\n        if (false === validation.valid) {\n          //notie.alert(3,\"Please check your CSV, line \"+i+\" is invalid.\",2);\n          Alert.error({\n            message: 'Please check your import file. Element number ' + String(i + 1) + ' is invalid.'\n          });\n          invalidItems.push(line);\n\n          break;\n        } else {\n          productsToImport[productsToImport.length - 1].variants.push(line);\n        }\n      } else {\n        notie.alert(3, \"Invalid data\", 2);\n      }\n    }\n\n    if (0 === invalidItems.length) {\n      // No invalid items, we can proceed\n      console.log(\"Ecco cosa importare\", productsToImport);\n      importData(productsToImport);\n    } else {\n      console.log(\"validation\", validation);\n      console.log(\"Import aborted due to invalid items\", invalidItems);\n    }\n  };\n\n  function importData(items) {\n    console.log(\"GOING TO IMPORT \" + items.length + \" PRODUCTS FROM FILE\");\n    var defer = $q.defer();\n    var promises = [];\n\n    var failures = [];\n\n    function push(r) {\n      promises.push(r);\n    }\n    function noop(r) {\n      failures.push(r);\n    }\n\n    function noop2(i) {\n      failures.push(i);\n      return function (error) {};\n    }\n\n    items.forEach(function (product) {\n      if (\"simple_product\" === product.type) promises.push($marketcloud.products.save(product).then(push).catch(function (error) {\n        failures.push(product);\n      }));\n\n      if (\"product_with_variants\" === product.type) {\n\n        var productWithoutVariants = angular.copy(product);\n        delete productWithoutVariants.variants;\n\n        var newPromise = $q(function (resolve, reject) {\n\n          return $marketcloud.products.save(productWithoutVariants).then(function (response) {\n            var product_id = response.data.data.id;\n            return $marketcloud.variants.save(product_id, product.variants);\n          }).then(resolve).catch(reject);\n        });\n\n        promises.push(newPromise.then(push).catch(function (error) {\n          failures.push(product);\n        }));\n      }\n    });\n\n    $q.all(promises).then(function (data) {\n\n      if (failures.length > 0) {\n        console.log(\"FAILURES\", failures);\n        var msg = '<p>Not every item was imported. Import failed for ' + failures.length + ' items:</p><ul>';\n\n        failures.forEach(function (item) {\n          msg += '<li class=\"text-left\">' + item.name + '</lI>';\n        });\n        msg += '</ul>';\n        Alert.warning({\n          message: msg\n        });\n      } else {\n        Alert.success({\n          message: 'All items were imported'\n        });\n      }\n      scope.loadPage(1);\n    }).catch(function () {\n      console.log(\"ALL FINISHED WITH ERROR\");\n      console.log(\"Failures\", failures);\n      notie.alert(2, \"Import succeded partially, Only the first \");\n      scope.loadPage(1);\n    });\n\n    return defer.promise;\n  }\n\n  /************************************************************\r\n   *                        DUPLICATE\r\n   **************************************************************/\n  scope.cloneProduct = function (product_to_duplicate) {\n    var product_to_save = angular.copy(product_to_duplicate);\n    delete product_to_save.id;\n    delete product_to_save.product_id;\n    delete product_to_save.variant_id;\n    delete product_to_save._id;\n\n    product_to_save.name += ' (Copy)';\n    product_to_save.published = false;\n\n    switch (product_to_save.stock_type) {\n      case 'track':\n        delete product_to_save['stock_status'];\n        break;\n      case 'status':\n        delete product_to_save['stock_level'];\n        break;\n      case 'infinite':\n        delete product_to_save['stock_level'];\n        delete product_to_save['stock_status'];\n        break;\n    }\n\n    // NOTE this uses client side info. it is a utility\n    //\n    delete product_to_save.variants;\n\n    $marketcloud.products.save(product_to_save).then(function (response) {\n      console.log(\"RESPONSATI\", response);\n      if (product_to_save.has_variants === true || product_to_save.type === 'product_with_variants') {\n        return http({\n          method: 'POST',\n          url: API_BASE_URL + '/products/' + response.data.data.id + '/variants',\n          data: product_to_duplicate.variants,\n          headers: {\n            Authorization: window.public_key + ':' + window.token\n          }\n        });\n      }\n    }).then(function (response) {\n      scope.loadPage(scope.pagination.currentPage);\n      notie.alert(1, 'Product successfully cloned', 1.5);\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred. Please try again.', 1.5);\n    });\n  };\n\n  /************************************************************\r\n   *                         QUERY OPERATIONS\r\n   **************************************************************/\n  scope.setPublishing = function (prod) {\n    $marketcloud.products.update(prod.id, {\n      published: prod.published\n    }).then(function (response) {\n      notie.alert(1, 'Updated!', 1.5);\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred, please try again.', 1.5);\n    });\n  };\n\n  scope.alterColumnNames = function (name) {\n    if (name === 'stock_level') {\n      return 'Inventory';\n    } else {\n      return name;\n    }\n  };\n\n  scope.prepareRegex = function () {\n    scope.query.name.$options = 'i';\n  };\n\n  scope.loadData = function (query) {\n\n    if (scope.query.q === '') {\n      delete scope.query.q;\n    }\n\n    if (query) {\n      if (\"object\" !== (typeof query === 'undefined' ? 'undefined' : _typeof(query))) throw new TypeError(\"loadData(query) query must be an object of filters\");\n\n      for (var k in query) {\n        scope.query[k] = query[k];\n      }\n    }\n\n    return $marketcloud.products.list(scope.query).then(function (response) {\n      scope.pagination = {\n        currentPage: response.data.page,\n        numberOfPages: response.data.pages,\n        nextPage: response.data._links.next || null,\n        previousPage: response.data._links.prev || null,\n        count: response.data.count\n\n        // This little trick allows us to get back to the latest state of the view when we hit a back button.\n        // We don't use $location because it has a weird behaviour appending #/#/path\n      };window.history.pushState(scope.query, \"List products\", '#/products?query=' + angular.$$encodeUriSegment(JSON.stringify(scope.query)));\n\n      scope.products = response.data.data;\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred. Please try again', 1.5);\n    });\n  };\n\n  scope.loadPage = function (page_number) {\n    scope.query.page = Number(page_number);\n    scope.loadData();\n  };\n\n  scope.deleteProduct = function (prod_id, index) {\n    http({\n      method: 'DELETE',\n      url: API_BASE_URL + '/products/' + prod_id,\n      headers: {\n\n        Authorization: window.public_key + ':' + window.token\n      }\n\n    }).then(function (response) {\n      scope.loadPage(scope.pagination.currentPage);\n      notie.alert(1, 'Product deleted', 1.5);\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred.Please try again.', 1.5);\n    });\n  };\n}]);"
    },
    {
      "id": 87,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\products\\productsWithVariants.edit.js",
      "name": "./public/modules/data_dashboard/src/controllers/products/productsWithVariants.edit.js",
      "index": 87,
      "index2": 85,
      "size": 7116,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/products/productsWithVariants.edit.js"
        }
      ],
      "source": "'use strict';\n\nangular.module('DataDashboard').controller('EditProductWithVariantsController', ['$scope', '$marketcloud', 'product', '$http', '$utils', function (scope, $marketcloud, product, $http, $utils) {\n  scope.customPropertiesData = {};\n\n  // Injecting resolve data into the controller\n  scope.product = product.data.data;\n\n  scope.selectedCategories = [];\n\n  if (scope.product.categories && scope.product.categories.length) {\n    var cats = scope.product.categories.split(',');\n\n    var promises = [];\n    cats.forEach(function (categoryId) {\n      promises.push($marketcloud.categories.list({\n        id: categoryId\n      }));\n    });\n\n    Promise.all(promises).then(function (response) {\n      response.forEach(function (res) {\n        if (res.data.data[0]) {\n          var category = {\n            category_id: res.data.data[0].id,\n            text: res.data.data[0].path\n          };\n          scope.selectedCategories.push(category);\n        }\n      });\n    });\n  }\n\n  // Listening to category selector events\n  scope.$on('selectedCategory', function (event, data) {\n    var categoryId = data.category_id;\n\n    if (scope.selectedCategories.map(function (cat) {\n      return cat.category_id;\n    }).indexOf(categoryId) === -1) {\n      scope.selectedCategories.push(data);\n    }\n  });\n\n  // mapping non-core attributes into scope.customPropertiesData\n  var coreProperties = Models.Product.getPropertyNames();\n  coreProperties.push('id', 'currencies', 'display_price', 'display_price_discount', 'has_variants', 'type', 'media', 'tax_id', 'locales', 'seo', 'requires_shipping', 'variants', 'variantsDefinition', 'product_id', 'variant_id', 'application_id');\n\n  for (var k in scope.product) {\n    if (coreProperties.indexOf(k) < 0) {\n      scope.customPropertiesData[k] = scope.product[k];\n      delete scope.product[k];\n    }\n  }\n\n  scope.unsafeSlug = false;\n\n  scope.updateSlug = function () {\n    scope.product.slug = $utils.getSlugFromString(scope.product.name);\n  };\n\n  // This method must be implemented in order to\n  // make the media manager work\n  scope.getImagesContainer = function () {\n    return scope.product.images;\n  };\n\n  scope.removeImage = function (i) {\n    scope.product.images.splice(i, 1);\n  };\n\n  scope.setMainCategoryToLast = function () {\n\n    if (scope.selectedCategories.length > 0) {\n      scope.product.category_id = scope.selectedCategories[scope.selectedCategories.length - 1].category_id;\n    } else {\n      scope.product.category_id = null;\n    }\n  };\n\n  scope.categories = [];\n  // Loading categories\n  $marketcloud.categories.list().then(function (response) {\n    scope.categories = response.data.data;\n  }).catch(function () {\n    console.error('An error has occurred while loading categories');\n  });\n\n  scope.brands = [];\n  // Loading brands\n\n  $marketcloud.brands.list().then(function (response) {\n    scope.brands = response.data.data;\n  }).catch(function () {\n    console.error('An error has occurred while loading brands');\n  });\n\n  scope.filterVariantProps = function (o) {\n    var p = {};\n    for (var k in o) {\n      // if its not an inherited property, then it's a variant property name\n      if (scope.product.variantsDefinition.hasOwnProperty(k)) {\n        p[k] = o[k];\n      }\n    }\n    return p;\n\n    // return o\n  };\n\n  scope.getVariantStyle = function (i) {\n    // var r = [{\"color\" : \"red\"},{\"color\" : \"green\"},{\"color\" : \"blue\"}, {\"color\" : \"pink\"}\n    // ]\n    var r = ['label-info', 'label-danger', 'label-warning', 'label-success'];\n    return r[i % r.length];\n  };\n  scope.getVariantStyle = function (i) {\n    var r = [{\n      'color': 'red'\n    }, {\n      'color': 'green'\n    }, {\n      'color': 'blue'\n    }, {\n      'color': 'pink'\n    }];\n    return r[i % r.length];\n  };\n\n  scope.newAttribute = {\n    name: null,\n    value: null,\n    type: null\n  };\n  scope.newAttribute.type = 'string';\n  scope.availableTypes = [{\n    name: 'String',\n    value: 'string'\n  }, {\n    name: 'Number',\n    value: 'number'\n  }, {\n    name: 'Boolean',\n    value: 'boolean'\n  }];\n\n  scope.filterNotNullProperties = function (item) {\n    var result = {};\n    for (var k in item) {\n      if (item[k]) {\n        result[k] = item[k];\n      }\n    }\n    return result;\n  };\n\n  scope.newVariant = {};\n  scope.saveNewVariant = function () {\n    var variantToSave = angular.copy(scope.product);\n    // Removing useless stuff in the variant\n    delete variantToSave['variants'];\n    delete variantToSave['type'];\n    delete variantToSave['variantsDefinition'];\n    delete variantToSave['is_master'];\n    delete variantToSave['has_variants'];\n    delete variantToSave['published'];\n\n    for (var k in scope.newVariant) {\n      if (scope.product.variantsDefinition[k].indexOf(scope.newVariant[k]) < 0) {\n        scope.product.variantsDefinition[k].push(scope.newVariant[k]);\n      }\n      variantToSave[k] = scope.newVariant[k];\n    }\n\n    // Devo aggiornare products perchÃ¨ variants definition Ã¨ cambiato\n    // poi salvo la variante\n\n    scope.updateProduct().then(function (response) {\n      return $http({\n        method: 'POST',\n        url: API_BASE_URL + '/products/' + scope.product.id + '/variants',\n        data: variantToSave,\n        headers: {\n          Authorization: window.public_key + ':' + window.token\n        }\n      });\n    }).then(function (response) {\n      notie.alert(1, 'Variant successfully created', 1);\n      scope.product = response.data.data;\n      $('#addVariantModal').modal('hide');\n    }).catch(function (response) {\n      notie.alert(2, 'An error has occurred. Variants not saved', 1);\n    });\n  };\n\n  scope.deleteVariant = function (variant, i) {\n    return $http({\n      method: 'DELETE',\n      url: API_BASE_URL + '/products/' + scope.product.id + '/variants/' + variant.id,\n      headers: {\n        Authorization: window.public_key + ':' + window.token\n      }\n    }).then(function (response) {\n      notie.alert(1, 'Variant deleted', 1.5);\n      scope.product.variants.splice(i, 1);\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred, please try again.', 1.5);\n    });\n  };\n\n  scope.updateProduct = function () {\n    var payload = angular.copy(scope.product);\n\n    // let's re-assemble the product first.\n    for (var k in scope.customPropertiesData) {\n      payload[k] = scope.customPropertiesData[k];\n    }\n\n    var categories = '';\n    scope.selectedCategories.forEach(function (category, idx) {\n      categories += category.category_id;\n\n      if (idx < scope.selectedCategories.length - 1) {\n        categories += ',';\n      }\n    });\n\n    payload.categories = categories;\n\n    switch (payload.stock_type) {\n      case 'infinite':\n        delete payload.stock_level;\n        delete payload.stock_status;\n        break;\n\n      case 'status':\n        delete payload.stock_level;\n        break;\n\n      case 'track':\n        delete payload.stock_status;\n        break;\n    }\n\n    return $marketcloud.products.update(payload.id, payload).then(function (response) {\n      notie.alert(1, 'Update Succeded', 1.5);\n    }).catch(function (response) {\n      notie.alert(3, 'Update failed', 1.5);\n    });\n  };\n}]);"
    },
    {
      "id": 88,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\products\\productsWithVariants.new.js",
      "name": "./public/modules/data_dashboard/src/controllers/products/productsWithVariants.new.js",
      "index": 88,
      "index2": 86,
      "size": 17367,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/products/productsWithVariants.new.js"
        }
      ],
      "source": "'use strict';\n\nangular.module('DataDashboard').controller('NewProductWithVariantsController', ['$scope', '$http', '$location', '$marketcloud', '$utils', function (scope, $http, location, $marketcloud, $utils) {\n\n  scope.categories = [];\n  scope.error = null;\n  scope.newCategory = {};\n  scope.brands = [];\n  scope.newBrand = {};\n  scope.selectedCategories = [];\n\n  // Temporary storage for variants\n  // while theyre being built\n  scope.addedVariants = {};\n\n  // Listening to category selector events\n  scope.$on('selectedCategory', function (event, data) {\n    var categoryId = data.category_id;\n\n    if (scope.selectedCategories.map(function (cat) {\n      return cat.category_id;\n    }).indexOf(categoryId) === -1) {\n      scope.selectedCategories.push(data);\n    }\n  });\n  // mapping non-core attributes into scope.customPropertiesData\n  var coreProperties = Models.Product.getPropertyNames();\n  coreProperties.push('id', 'display_price', 'display_price_discount', 'has_variants', 'type', 'media', 'tax_id', 'locales', 'seo', 'requires_shipping', 'variants', 'variantsDefinition', 'product_id', 'variant_id', 'application_id');\n\n  scope.isBoolean = function (d) {\n    return typeof d === 'boolean';\n  };\n\n  scope.isString = function (d) {\n    return typeof d === 'string';\n  };\n\n  scope.isNumber = function (d) {\n    return typeof d === 'number';\n  };\n\n  // This method must be implemented in order to\n  // make the media manager work\n  scope.getImagesContainer = function () {\n    return scope.product.images;\n  };\n\n  scope.removeImage = function (i) {\n    scope.product.images.splice(i, 1);\n  };\n\n  scope.setMainCategoryToLast = function () {\n\n    if (scope.selectedCategories.length > 0) {\n      scope.product.category_id = scope.selectedCategories[scope.selectedCategories.length - 1].category_id;\n    } else {\n      scope.product.category_id = null;\n    }\n  };\n\n  scope.unsafeSlug = false;\n\n  scope.updateSlug = function () {\n    scope.product.slug = $utils.getSlugFromString(scope.product.name);\n  };\n\n  scope.loadCategories = function () {\n    $marketcloud.categories.list({}).then(function (response) {\n      scope.categories = response.data.data;\n    }).catch(function () {\n      notie.alert(2, 'An error has occurred while loading categories', 2);\n    });\n  };\n\n  // Initializing the categories array\n  scope.loadCategories();\n\n  scope.query = {\n    // The product must be simple_product as this\n    type: 'product_with_variants'\n  };\n  scope.prepareRegex = function () {\n    scope.query.name.$options = 'i';\n  };\n\n  scope.showTheList = false;\n  scope.showList = function () {\n    scope.showTheList = true;\n  };\n  scope.hideList = function () {\n    window.setTimeout(function () {\n      scope.showTheList = false;\n      scope.$apply();\n    }, 200);\n  };\n\n  scope.applyTemplate = function (product) {\n    var tpl = angular.copy(product);\n\n    console.log(\"====================\", \"Vado ad applicare questo template\", angular.copy(tpl), \"==========================\");\n\n    delete tpl['id'];\n\n    scope.addedVariants2 = [];\n\n    for (var k in tpl.variantsDefinition) {\n      var newAddedVariant = {\n        name: k,\n        values: tpl.variantsDefinition[k].map(function (v) {\n          return { text: v };\n        })\n      };\n      scope.addedVariants2.push(newAddedVariant);\n    }\n\n    scope.computedVariants = tpl.variants.map(function (item) {\n      var v = angular.copy(item);\n      delete v[\"id\"];\n      delete v[\"product_id\"];\n      delete v[\"variant_id\"];\n      return v;\n    });\n\n    console.log(\"Ora computedVariants Ã¨\", angular.copy(scope.computedVariants));\n\n    delete tpl.variants;\n\n    scope.product = tpl;\n\n    // Making sure that inventory is initialized\n    scope.product.stock_type = tpl.stock_type || \"status\";\n    scope.product.stock_status = tpl.stock_status || \"in_stock\";\n\n    console.log(\"Applicato questo template\", tpl);\n\n    //scope.updateVariantsConfiguration()\n\n    console.log(\"Dopo updateVariantsConfiguration\", angular.copy(scope.computedVariants));\n    // Taking care of variants\n\n\n    for (var k in scope.product) {\n      if (coreProperties.indexOf(k) < 0) {\n        scope.customPropertiesData[k] = scope.product[k];\n        delete scope.product[k];\n      }\n    }\n  };\n\n  scope.loadProducts = function (query) {\n    query = query || scope.query;\n\n    $marketcloud.products.list(query).then(function (response) {\n      scope.products = response.data.data;\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred. Please try again', 1.5);\n    });\n  };\n\n  // Loading products right away\n  scope.loadProducts();\n\n  scope.saveCategory = function () {\n    $marketcloud.categories.save(scope.newCategory).then(function (response) {\n      $('#newCategoryModal').modal('hide');\n      scope.categories.push(scope.newCategory);\n      scope.newCategory = {};\n    }).catch(function (response) {\n      $('#newCategoryModal').hide();\n      notie.alert(3, 'An error has occurred. Category not saved', 1);\n    });\n  };\n\n  scope.loadBrands = function () {\n    $marketcloud.brands.list({}).then(function (response) {\n      scope.brands = response.data.data;\n    }).catch(function () {\n      notie.alert(2, 'An error has occurred while loading brands', 2);\n    });\n  };\n  // Initializing the brands array\n  scope.loadBrands();\n  window.inspect = function () {\n    console.log(angular.copy(scope.product));\n  };\n\n  scope.saveBrand = function () {\n    $marketcloud.brands.save(scope.newBrand).then(function (response) {\n      $('#newBrandModal').modal('hide');\n      scope.brands.push(scope.newBrand);\n      scope.newBrand = {};\n    }).catch(function (response) {\n      $('#newBrandModal').hide();\n      notie.alert(3, 'An error has occurred. Brand not saved', 1);\n    });\n  };\n\n  scope.product = {\n    type: 'product_with_variants',\n    name: '',\n    description: '',\n    stock_type: 'status',\n    stock_status: 'in_stock',\n    images: [],\n    variants: {},\n    published: false,\n    has_variants: true // Flag for legacy compatibility\n  };\n\n  scope.customPropertiesData = {};\n  // This contains validation Errors\n\n  // Array of new properties's names (strings)\n  scope.customPropertiesNames = [];\n\n  scope.computedVariants = [];\n\n  // Each tyme the parent's stock type is changed, the variants must be updated\n  scope.updateStockManagementForVariants = function () {\n    var stock_type = scope.product.stock_type;\n\n    if (stock_type === 'track') {\n      delete scope.product.stock_status;\n      scope.computedVariants.forEach(function (v) {\n        delete v['stock_status'];\n      });\n      return;\n    }\n\n    if (stock_type === 'status') {\n      delete scope.product.stock_level;\n      scope.computedVariants.forEach(function (v) {\n        delete v['stock_level'];\n      });\n      return;\n    }\n\n    if (stock_type === 'infinite') {\n      delete scope.product.stock_status;\n      delete scope.product.stock_level;\n      scope.computedVariants.forEach(function (v) {\n        delete v['stock_level'];\n        delete v['stock_status'];\n      });\n      return;\n    }\n  };\n\n  scope.properties_to_inherit = ['price', 'sku', 'stock_level', 'stock_type', 'stock_status'\n  // Add here more props you want to override now!\n  // e.g. stock_level\n\n  ];\n\n  function transformVariantObject(o) {\n    var buf = [];\n    for (var k in o) {\n      buf.push({\n        name: k,\n        values: o[k].map(function (a) {\n          return a.text;\n        })\n      });\n    }\n    return buf;\n  }\n\n  function getArrayOfVariants(arrayOfVariants) {\n    if (arrayOfVariants.length === 0) {\n      return [];\n    }\n    if (arrayOfVariants.length === 1) {\n      var v = arrayOfVariants[0];\n      var buf = [];\n      v.values.forEach(function (e) {\n        var o = {};\n        o[v.name] = e;\n        buf.push(o);\n      });\n      return buf;\n    }\n    var output = arrayOfVariants.reduce(function (a, b) {\n      if (!(a instanceof Array)) {\n        // Se non Ã¨ un array, Ã¨ la prima botta di reduce,\n        // fatta con la prima variante (el 0 di arrayOfVariants)\n        var buf = [];\n        a.values.forEach(function (el_a) {\n          b.values.forEach(function (el_b) {\n            var o = {};\n            o[a.name] = el_a;\n            o[b.name] = el_b;\n            buf.push(o);\n          });\n        });\n        return buf;\n      } else {\n        // Se Ã¨ un array, allora non Ã¨ la prima botta di reduce\n        // Quindi per ogni elemento dell''array finale, aggiungo pezzi di variante\n        var buf = [];\n        b.values.forEach(function (el_b) {\n          // Ad ogni elemento dell array di varianti costruito al passo\n          // precedente aggiungo un pezzo di nuova variante\n          a.forEach(function (el_a) {\n            var o = JSON.parse(JSON.stringify(el_a));\n            o[b.name] = el_b;\n            buf.push(o);\n          });\n        });\n        return buf;\n      }\n    });\n    return output;\n  }\n\n  function attachInheritedProperties(variants) {\n    return variants.map(function (variant) {\n      console.log(\"ATTACHO LE INHERITED PROPERTIES DA \", angular.copy(scope.product));\n      scope.properties_to_inherit.forEach(function (i, index) {\n\n        if (scope.product[i]) {\n\n          variant[i] = scope.product[i];\n        }\n      });\n      return variant;\n    });\n  }\n\n  scope.filterVariantProps = function (o) {\n    var p = {};\n    for (var k in o) {\n      // if its not an inherited property, then it's a variant property name\n      if (scope.properties_to_inherit.indexOf(k) < 0 && k !== 'save') {\n        // The property k is not an inherited property but a variant\n        p[k] = o[k];\n      }\n    }\n    return p;\n  };\n\n  // Return a subset of the object in which only variant related\n  // keys are kept\n  scope.filterVariantProps = function (o) {\n    var variantNames = scope.addedVariants2.map(function (v) {\n      return v.name;\n    });\n    var p = {};\n    for (var k in o) {\n      // if its not an inherited property, then it's a variant property name\n      if (variantNames.indexOf(k) > -1) {\n        // The property k is not an inherited property but a variant\n        p[k] = o[k];\n      }\n    }\n    return p;\n  };\n\n  scope.getVariantStyle = function (i) {\n    var r = [{\n      'color': 'red'\n    }, {\n      'color': 'green'\n    }, {\n      'color': 'blue'\n    }, {\n      'color': 'pink'\n    }];\n    return r[i % r.length];\n  };\n\n  /*\r\n    variants Array<{name :\"size\", values : [\"cl\",\"l\",\"s\"]}\r\n  */\n  function getArrayOfVariants2(variants) {\n    variants = variants.filter(function (v) {\n      return v.values.length > 0;\n    });\n\n    if (variants.length === 0) {\n      return [];\n    }\n\n    if (variants.length === 1) {\n      var result = [];\n      variants[0].values.forEach(function (v) {\n        var o = {};\n        o[variants[0].name] = v;\n        result.push(o);\n      });\n      return result;\n    }\n\n    var combine = function combine(v1, v2) {\n      var output = [];\n\n      // 2 cases, one is that v1 is a {name,values}\n      // other case is that v1 is the already created bag\n      // [{size:x, color : red}]\n      if (v1 instanceof Array) {\n        var _out = [];\n        v1.forEach(function (variant) {\n          v2.values.forEach(function (value) {\n            var o = angular.copy(variant);\n            o[v2.name] = value;\n            _out.push(o);\n          });\n        });\n        return _out;\n      }\n\n      v1.values.forEach(function (val1) {\n        v2.values.forEach(function (val2) {\n          var o = {};\n          o[v1.name] = val1;\n          o[v2.name] = val2;\n\n          output.push(o);\n        });\n      });\n      return output;\n    };\n\n    var counter = 0;\n    var out = [];\n\n    while (variants[counter + 1]) {\n      out = combine(variants[counter], variants[counter + 1]);\n      variants[counter + 1] = out;\n      counter++;\n    }\n\n    return out;\n  }\n\n  scope.deleteVariant = function (variantName, $index) {\n    scope.addedVariants2.splice($index, 1);\n    scope.updateVariantsConfiguration();\n  };\n\n  scope.addedVariants2 = [];\n  scope.addEmptyVariant = function () {\n    scope.addedVariants2.push({\n      name: '',\n      values: []\n    });\n  };\n\n  scope.updateVariantsConfiguration = function () {\n    // Transforming addedVariants2\n    scope.computedVariants = [];\n    scope.addedVariants = {};\n    scope.addedVariants2.forEach(function (variant) {\n      scope.addedVariants[variant.name] = variant.values.map(function (i) {\n        return i.text;\n      });\n\n      variant.values = variant.values.map(function (i) {\n        return i.text;\n      });\n    });\n\n    var temp_ComputedVariants = getArrayOfVariants2(angular.copy(scope.addedVariants2));\n\n    scope.computedVariants = temp_ComputedVariants;\n    scope.computedVariants = attachInheritedProperties(temp_ComputedVariants);\n\n    scope.computedVariants.forEach(function (v) {\n      v.save = true;\n    });\n\n    // Ricalcolo le variants definition, le added sono scope.addedVariants\n    scope.product.variantsDefinition = scope.addedVariants;\n  };\n\n  scope.getVariantClass = function (i) {\n    var classes = ['label-default', 'label-info', 'label-success', 'label-warning', 'label-danger'];\n    return 'label solid ' + classes[i % classes.length];\n  };\n\n  scope.hideErrors = function () {\n    scope.error = null;\n    scope.errorField = null;\n  };\n\n  scope.saveProduct = function (overwrites) {\n    for (var k in scope.product) {\n      if (scope.product[k] === null) {\n        delete scope.product[k];\n      }\n    }\n\n    scope.hideErrors();\n\n    scope.product.variants = [];\n\n    // Custom properties and variants cannot be validated through Schematic.\n    var props_to_validate = {};\n    var known_props = Models.Product.getPropertyNames();\n    for (var k in scope.product) {\n      if (known_props.indexOf(k) > -1) {\n        props_to_validate[k] = scope.product[k];\n      }\n    }\n    var validation = Models.Product.validate(props_to_validate);\n\n    if (validation.valid === false) {\n      scope.errorField = validation.invalidPropertyName;\n\n      if (validation.failedValidator === 'required') {\n        scope.error = 'The ' + scope.errorField + ' field is required';\n      } else if (validation.failedValidator === 'min') {\n        if (typeof scope.product[validation.invalidPropertyName] === 'string') {\n          scope.error = 'The ' + scope.errorField + ' field must have at least ' + Models.Product.schema[validation.invalidPropertyName].min + ' characters';\n        } else {\n          scope.error = 'The ' + scope.errorField + ' field must be greater than or equal to ' + Models.Product.schema[validation.invalidPropertyName].min;\n        }\n      } else if (validation.failedValidator === 'max') {\n        if (typeof scope.product[validation.invalidPropertyName] === 'string') {\n          scope.error = 'The ' + scope.errorField + ' field must have less than ' + Models.Product.schema[validation.invalidPropertyName].max + ' characters';\n        } else {\n          scope.error = 'The ' + scope.errorField + ' field must be lesser than or equal to ' + Models.Product.schema[validation.invalidPropertyName].min;\n        }\n      } else {\n        scope.error = 'The ' + scope.errorField + ' field has an invalid value (' + props_to_validate[scope.errorField] + ')';\n      }\n      return;\n    }\n\n    for (var k in scope.customPropertiesData) {\n      scope.product[k] = scope.customPropertiesData[k];\n    }\n\n    for (var key in scope.product) {\n      if (scope.product[key] === null) {\n        delete scope.product[key];\n      }\n    }\n\n    var variantsToSave = angular.copy(scope.computedVariants.filter(function (variant) {\n      return variant.save === true;\n    }).map(function (variant) {\n      var obj = angular.copy(scope.product);\n\n      // Removing useless stuff in the variant\n      delete obj['variants'];\n      delete obj['variantsDefinition'];\n      delete obj['is_master'];\n      delete obj['has_variants'];\n      delete obj['published'];\n\n      for (var k in variant) {\n        obj[k] = variant[k];\n      }\n\n      // Remove the flag used to distinguish\n      // between variants to save and not to save\n      delete variant['save'];\n\n      return obj;\n    }));\n\n    for (var k in overwrites) {\n      scope.product[k] = overwrites[k];\n    }\n\n    var categories = '';\n    scope.selectedCategories.forEach(function (category, idx) {\n      categories += category.category_id;\n\n      if (idx < scope.selectedCategories.length - 1) {\n        categories += ',';\n      }\n    });\n\n    if (categories.length > 0) {\n      scope.product.categories = categories;\n    }\n\n    $marketcloud.products.save(scope.product).then(function (response) {\n      // Now i must save variants.\n\n      // Ogni variante deve essere pretrattata\n      // Ad esempio devo aggiungere il campo is_variant e images\n      /* if ('undefined' !== mixpanel)\r\n        mixpanel.track('products.create') */\n\n      var savedProduct = response.data.data;\n\n      $http({\n        method: 'POST',\n        url: API_BASE_URL + '/products/' + savedProduct.id + '/variants',\n        data: variantsToSave,\n        headers: {\n          Authorization: window.public_key + ':' + window.token\n        }\n      }).then(function (response) {\n        notie.alert(1, 'Product successfully created', 1);\n        location.path('/products');\n      }).catch(function (response) {\n        notie.alert(2, 'An error has occurred. Variants not saved', 1);\n      });\n    }).catch(function (response) {\n      notie.alert(2, 'An error has occurred. Product not saved', 1);\n    });\n  };\n}]);"
    },
    {
      "id": 89,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\products\\simpleProduct.edit.js",
      "name": "./public/modules/data_dashboard/src/controllers/products/simpleProduct.edit.js",
      "index": 89,
      "index2": 87,
      "size": 5331,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/products/simpleProduct.edit.js"
        }
      ],
      "source": "'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('DataDashboard').controller('EditSimpleProductController', EditSimpleProductController);\n\n  EditSimpleProductController.$inject = ['$scope', '$marketcloud', 'product', '$http', '$utils', '$validation'];\n\n  function EditSimpleProductController(scope, $marketcloud, product, $http, $utils, $validation) {\n    // Injecting resolve data into the controller\n    scope.product = product.data.data;\n\n    // This will hold custom properties for further processing\n    scope.customPropertiesData = {};\n\n    // Should we be able to edit the slug? this is a on/off\n    scope.unsafeSlug = false;\n\n    scope.selectedCategories = [];\n\n    if (scope.product.categories && scope.product.categories.length) {\n      var cats = scope.product.categories.split(',');\n      var promises = [];\n      cats.forEach(function (categoryId) {\n        promises.push($marketcloud.categories.list({\n          id: categoryId\n        }));\n      });\n\n      Promise.all(promises).then(function (response) {\n        response.forEach(function (res) {\n          if (res.data.data[0]) {\n            var category = {\n              category_id: res.data.data[0].id,\n              text: res.data.data[0].path\n            };\n            scope.selectedCategories.push(category);\n          }\n        });\n      });\n    }\n\n    // Listening to category selector events\n    scope.$on('selectedCategory', function (event, data) {\n      var categoryId = data.category_id;\n\n      if (scope.selectedCategories.map(function (cat) {\n        return cat.category_id;\n      }).indexOf(categoryId) === -1) {\n        scope.selectedCategories.push(data);\n      }\n    });\n\n    // mapping non-core attributes into scope.customPropertiesData\n    var coreProperties = Models.Product.getPropertyNames();\n\n    scope.schema = Models.Product.schema;\n\n    coreProperties.push('id', 'currencies', 'display_price_discount', 'display_price', 'has_variants', // for legacy reasons\n    'type', 'media', 'tax_id', 'locales', 'seo', 'requires_shipping', 'product_id', 'variant_id', 'application_id');\n\n    for (var k in scope.product) {\n      if (coreProperties.indexOf(k) < 0) {\n        scope.customPropertiesData[k] = scope.product[k];\n        delete scope.product[k];\n      }\n    }\n\n    scope.updateSlug = function () {\n      scope.product.slug = $utils.getSlugFromString(scope.product.name);\n    };\n\n    scope.swapArrayItemPosition = function moveItem(fromIndex, toIndex, target) {\n      var toMove = JSON.parse(JSON.stringify(target[fromIndex]));\n\n      // We ensure that the indexes exist\n      if (fromIndex > target.length - 1) {\n        return;\n      }\n\n      // First we remove the element to move\n      target.splice(fromIndex, 1);\n\n      // Then we add it to the desired position\n      target.splice(toIndex, 0, toMove);\n    };\n\n    // This method must be implemented in order to\n    // make the media manager work\n    scope.getImagesContainer = function () {\n      return scope.product.images;\n    };\n\n    scope.removeImage = function (i) {\n      scope.product.images.splice(i, 1);\n    };\n\n    scope.setMainCategoryToLast = function () {\n\n      if (scope.selectedCategories.length > 0) {\n        scope.product.category_id = scope.selectedCategories[scope.selectedCategories.length - 1].category_id;\n      } else {\n        scope.product.category_id = null;\n      }\n    };\n\n    scope.newAttribute = {\n      name: null,\n      value: null,\n      type: null\n    };\n    scope.newAttribute.type = 'string';\n    scope.availableTypes = [{\n      name: 'String',\n      value: 'string'\n    }, {\n      name: 'Number',\n      value: 'number'\n    }, {\n      name: 'Boolean',\n      value: 'boolean'\n    }];\n\n    scope.filterNotNullProperties = function (item) {\n      var result = {};\n      for (var k in item) {\n        if (item[k]) {\n          result[k] = item[k];\n        }\n      }\n      return result;\n    };\n\n    scope.updateProduct = function () {\n      // let's re-assemble the product first.\n      for (var k in scope.customPropertiesData) {\n        scope.product[k] = scope.customPropertiesData[k];\n      }\n\n      switch (scope.product.stock_type) {\n        case 'status':\n          delete scope.product.stock_level;\n          break;\n\n        case 'track':\n          delete scope.product.stock_status;\n          break;\n      }\n\n      var categories = '';\n      scope.selectedCategories.forEach(function (category, idx) {\n        categories += category.category_id;\n\n        if (idx < scope.selectedCategories.length - 1) {\n          categories += ',';\n        }\n      });\n\n      scope.product.categories = categories;\n\n      $marketcloud.products.update(scope.product.id, scope.product).then(function (response) {\n        notie.alert(1, 'Update Succeded', 1.5);\n      }).catch(function (error) {\n        console.log(\"erore\", error);\n        if (400 === error.status) {\n\n          notie.alert(2, 'Please check the data you entered', 1.5);\n\n          var validation = error.data.errors[0];\n          var invalidPropertyName = \"product.\" + validation.invalidPropertyName;\n\n          var element = angular.element('[ng-model=\"' + invalidPropertyName + '\"]').parent();\n\n          $validation.showErrorMessage(validation, '[ng-model=\"' + invalidPropertyName + '\"]');\n        } else notie.alert(3, 'Update failed', 1.5);\n      });\n    };\n  }\n})();"
    },
    {
      "id": 90,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\products\\simpleProduct.new.js",
      "name": "./public/modules/data_dashboard/src/controllers/products/simpleProduct.new.js",
      "index": 90,
      "index2": 88,
      "size": 4955,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/products/simpleProduct.new.js"
        }
      ],
      "source": "'use strict';\n\nangular.module('DataDashboard').controller('NewSimpleProductController', ['$scope', '$http', '$location', '$marketcloud', '$utils', '$models', function (scope, $http, location, $marketcloud, $utils, Models) {\n  scope.error = null;\n\n  scope.brands = [];\n  scope.newBrand = {};\n\n  scope.selectedCategories = [];\n\n  scope.validation = {\n    valid: true\n\n    // Listening to category selector events\n  };scope.$on('selectedCategory', function (event, data) {\n    var categoryId = data.category_id;\n\n    if (scope.selectedCategories.map(function (cat) {\n      return cat.category_id;\n    }).indexOf(categoryId) === -1) {\n      scope.selectedCategories.push(data);\n    }\n  });\n\n  // mapping non-core attributes into scope.customPropertiesData\n  console.log(\"Cerco qui le core propseties\", Models.Product, Models);\n  var coreProperties = Models.Product.getPropertyNames();\n\n  coreProperties.push('id', 'display_price_discount', 'display_price', 'has_variants', // for legacy reasons\n  'type', 'media', 'tax_id', 'locales', 'seo', 'requires_shipping', 'product_id', 'variant_id', 'application_id');\n\n  scope.product = {\n    price: null,\n    name: '',\n    description: '',\n    stock_type: 'status',\n    images: [],\n    media: [],\n    published: false,\n    type: 'simple_product'\n\n  };\n\n  scope.removeImage = function (i) {\n    scope.product.images.splice(i, 1);\n  };\n\n  scope.unsafeSlug = false;\n\n  scope.updateSlug = function () {\n    scope.product.slug = $utils.getSlugFromString(scope.product.name);\n  };\n\n  scope.applyTemplate = function (product) {\n    var tpl = angular.copy(product);\n\n    delete tpl['id'];\n\n    scope.product = tpl;\n\n    for (var k in scope.product) {\n      if (coreProperties.indexOf(k) < 0) {\n        scope.customPropertiesData[k] = scope.product[k];\n        delete scope.product[k];\n      }\n    }\n  };\n\n  scope.query = {\n    // The product must be simple_product as this\n    type: 'simple_product'\n  };\n  scope.prepareRegex = function () {\n    scope.query.name.$options = 'i';\n  };\n\n  scope.showTheList = false;\n  scope.showList = function () {\n    scope.showTheList = true;\n  };\n  scope.hideList = function () {\n    window.setTimeout(function () {\n      scope.showTheList = false;\n      scope.$apply();\n    }, 200);\n  };\n\n  scope.loadProducts = function (query) {\n    query = query || scope.query;\n\n    $marketcloud.products.list(query).then(function (response) {\n      scope.products = response.data.data;\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred. Please try again', 1.5);\n    });\n  };\n\n  // Loading products right away\n  scope.loadProducts();\n\n  scope.productError = null;\n  scope.newCustomProperty = {};\n  scope.customPropertiesData = {};\n  // This contains validation Errors\n  scope.Forms = {};\n  scope.Forms.newCustomProperty = {\n    name: null,\n    value: null\n\n    // Array of new properties's names (strings)\n  };scope.customPropertiesNames = [];\n\n  scope.properties_to_inherit = ['price', 'sku', 'stock_level', 'stock_type', 'stock_status'\n  // Add here more props you want to override now!\n  // e.g. stock_level\n\n  ];\n\n  scope.hideErrors = function () {\n    scope.error = null;\n    scope.errorField = null;\n  };\n\n  scope.setMainCategoryToLast = function () {\n\n    if (scope.selectedCategories.length > 0) {\n      scope.product.category_id = scope.selectedCategories[scope.selectedCategories.length - 1].category_id;\n    } else {\n      scope.product.category_id = null;\n    }\n  };\n\n  scope.saveProduct = function (overwrites) {\n    for (var k in scope.product) {\n      if (scope.product[k] === null) {\n        delete scope.product[k];\n      }\n    }\n\n    scope.hideErrors();\n\n    // this scope properti is bound to the error-message component\n    // TODO schematic needs custom validator, so i can do something like\n\n    scope.validation = Models.Product.validate(scope.product);\n\n    if (scope.validation.valid === false) {\n      return;\n    }\n\n    var categories = '';\n    scope.selectedCategories.forEach(function (category, idx) {\n      categories += category.category_id;\n\n      if (idx < scope.selectedCategories.length - 1) {\n        categories += ',';\n      }\n    });\n\n    if (categories.length > 0) {\n      scope.product.categories = categories;\n    }\n\n    for (var kk in scope.customPropertiesData) {\n      scope.product[kk] = scope.customPropertiesData[kk];\n    }\n\n    for (var key in scope.product) {\n      if (scope.product[key] === null) {\n        delete scope.product[key];\n      }\n    }\n\n    for (var k in overwrites) {\n      scope.product[k] = overwrites[k];\n    }\n\n    $marketcloud.products.save(scope.product).then(function (response) {\n      notie.alert(1, 'Product saved successfully.', 1.5);\n      location.path('/products');\n    }).catch(function (error) {\n\n      if (error.status === 400) {\n        scope.validation = error.data.errors[0];\n        return;\n      }\n\n      notie.alert(2, 'An error has occurred. Product not saved', 1);\n    });\n  };\n}]);"
    },
    {
      "id": 91,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\promotions\\promotions.edit.js",
      "name": "./public/modules/data_dashboard/src/controllers/promotions/promotions.edit.js",
      "index": 91,
      "index2": 89,
      "size": 1535,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/promotions/promotions.edit.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.controller('EditPromotionController', ['$scope', '$http', '$marketcloud', 'promotion', function (scope, http, $marketcloud, promotion) {\n  scope.promotion = promotion.data.data;\n  // Initializing stuff\n  scope.newCondition = {};\n  scope.newEffect = {};\n\n  scope.save = function () {\n    scope.$promotionValidation = window.Models.Promotion.validate(scope.promotion);\n    if (scope.$promotionValidation.valid !== true) {\n      return;\n    }\n\n    $marketcloud.promotions.update(scope.promotion.id, scope.promotion).then(function (response) {\n      notie.alert(1, 'Promotion saved', 1.5);\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred. Promotion not saved', 1.5);\n    });\n  };\n\n  scope.addCondition = function () {\n    scope.$newConditionValidation = window.Models.PromotionCondition.validate(scope.newCondition);\n    if (scope.$newConditionValidation.valid !== true) {\n      return;\n    }\n\n    scope.promotion.conditions.push(scope.newCondition);\n    scope.newCondition = {};\n  };\n  scope.removeCondition = function (i) {\n    scope.promotion.conditions.splice(i, 1);\n  };\n  scope.removeEffect = function (i) {\n    scope.promotion.effects.splice(i, 1);\n  };\n  scope.addEffect = function () {\n    scope.$newEffectValidation = window.Models.PromotionEffect.validate(scope.newEffect);\n\n    if (scope.$newEffectValidation.valid !== true) {\n      return;\n    }\n\n    scope.promotion.effects.push(scope.newEffect);\n    scope.newEffect = {};\n  };\n}]);"
    },
    {
      "id": 92,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\promotions\\promotions.new.js",
      "name": "./public/modules/data_dashboard/src/controllers/promotions/promotions.new.js",
      "index": 92,
      "index2": 90,
      "size": 1611,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/promotions/promotions.new.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.controller('NewPromotionController', ['$scope', '$http', '$marketcloud', '$location', function (scope, http, $marketcloud, location) {\n  // Defaults\n  scope.promotion = {\n    name: null,\n    conditions: [],\n    effects: [],\n    active: false,\n    priority: 0\n  };\n  scope.newCondition = {};\n  scope.newEffect = {};\n\n  scope.save = function () {\n    scope.$promotionValidation = window.Models.Promotion.validate(scope.promotion);\n    if (scope.$promotionValidation.valid !== true) {\n      return;\n    }\n\n    $marketcloud.promotions.save(scope.promotion).then(function (response) {\n      notie.alert(1, 'Promotion saved', 1.5);\n      location.path('/promotions');\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred. Promotion not saved', 1.5);\n    });\n  };\n\n  scope.addCondition = function () {\n    scope.$newConditionValidation = window.Models.PromotionCondition.validate(scope.newCondition);\n    if (scope.$newConditionValidation.valid !== true) {\n      return;\n    }\n\n    scope.promotion.conditions.push(scope.newCondition);\n    scope.newCondition = {};\n  };\n  scope.removeCondition = function (i) {\n    scope.promotion.conditions.splice(i, 1);\n  };\n  scope.removeEffect = function (i) {\n    scope.promotion.effects.splice(i, 1);\n  };\n  scope.addEffect = function () {\n    scope.$newEffectValidation = window.Models.PromotionEffect.validate(scope.newEffect);\n\n    if (scope.$newEffectValidation.valid !== true) {\n      return;\n    }\n\n    scope.promotion.effects.push(scope.newEffect);\n    scope.newEffect = {};\n  };\n}]);"
    },
    {
      "id": 93,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\resource.list.js",
      "name": "./public/modules/data_dashboard/src/controllers/resource.list.js",
      "index": 93,
      "index2": 91,
      "size": 5185,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/resource.list.js"
        }
      ],
      "source": "'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar app = angular.module('DataDashboard');\n\napp.controller('ListResourcesController', ['$scope', 'resources', 'resourceName', '$q', '$marketcloud', 'dependencies', '$utils', function (scope, resources, resource_name, $q, $marketcloud, $dependencies, $utils) {\n  scope.resources = resources.data.data;\n  scope.dependencies = {};\n\n  scope.$dependencies = $dependencies;\n\n  scope.pagination = $utils.getPaginationFromHTTPResponse(resources);\n\n  scope.query = {\n    per_page: 20\n  };\n\n  scope.prepareRegex = function () {\n    for (var k in scope.query) {\n      if (_typeof(scope.query[k]) === 'object' && scope.query[k].hasOwnProperty('$regex')) {\n        scope.query[k]['$options'] = 'i';\n      }\n    }\n  };\n\n  scope.toggleAll = function () {\n    scope.resources.forEach(function (p) {\n      p.selected = scope.selectAll;\n    });\n  };\n\n  scope.getSelectedItems = function () {\n    return scope.resources.filter(function (p) {\n      return p.selected === true;\n    });\n  };\n\n  scope.update = function (id, update) {\n    return $marketcloud[resource_name].update(id, update).then(function (response) {\n      notie.alert(1, 'Item updated.', 1.5);\n    }).catch(function (error) {\n      notie.alert(3, 'An error has occurred, please try again.', 1.5);\n    });\n  };\n\n  scope.bulkDelete = function () {\n    notie.confirm('Delete ' + scope.getSelectedItems().length + ' items?', 'Delete', 'Cancel', function () {\n      var defer = $q.defer();\n\n      var promises = [];\n\n      scope.getSelectedItems().forEach(function (item) {\n        promises.push($marketcloud[resource_name].delete(item.id));\n      });\n\n      $q.all(promises).then(function () {\n        notie.alert(1, 'All items have been deleted', 1.5);\n        scope.loadData();\n      });\n\n      return defer.promise;\n    });\n  };\n  scope.bulkUpdate = function (update) {\n    notie.confirm('Update ' + scope.getSelectedItems().length + ' items?', 'Update', 'Cancel', function () {\n      var defer = $q.defer();\n\n      var promises = [];\n\n      scope.getSelectedItems().forEach(function (item) {\n        promises.push($marketcloud[resource_name].update(item.id, update));\n      });\n\n      $q.all(promises).then(function () {\n        notie.alert(1, 'All items have been updated', 1.5);\n        scope.loadData();\n      });\n\n      return defer.promise;\n    });\n  };\n\n  scope.bulkJSONExport = function () {\n    // If there are no selected items, we export the whole current view\n    if (scope.getSelectedItems().length === 0) return $utils.exportAsJSON(scope.resources);\n\n    $utils.exportAsJSON(scope.getSelectedItems());\n  };\n\n  scope.toggle = function (resource) {\n    $marketcloud[resource_name].update(resource.id, resource).then(function (response) {\n      notie.alert(1, 'Update successful', 1.5);\n    }).catch(function (error) {\n      notie.alert(3, 'An error has occurred, please try again.', 1.5);\n    });\n  };\n\n  scope.loadPage = function (page_number) {\n    scope.query.page = page_number;\n    return scope.loadData();\n  };\n\n  scope.resetQuery = function () {\n    var currentPage = scope.query.page || 1;\n    scope.query = {\n      per_page: 20,\n      page: currentPage\n    };\n  };\n  scope.loadData = function (query) {\n\n    if (query) {\n      if (\"object\" !== (typeof query === 'undefined' ? 'undefined' : _typeof(query))) throw new TypeError(\"loadData(query) query must be an object of filters\");\n\n      for (var k in query) {\n        scope.query[k] = query[k];\n      }\n    }\n\n    if ($dependencies.queryOverrides) {\n      for (var k in $dependencies.queryOverrides) {\n        scope.query[k] = $dependencies.queryOverrides[k];\n      }\n    }\n\n    return $marketcloud[resource_name].list(scope.query).then(function (response) {\n\n      scope.resources = response.data.data;\n\n      scope.pagination = $utils.getPaginationFromHTTPResponse(response);\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred. Please try again.', 1.5);\n    });\n  };\n\n  scope.delete = function (resource_id, index) {\n    $marketcloud[resource_name].delete(resource_id).then(function (response) {\n      scope.loadData();\n      notie.alert(1, 'Item deleted', 1.5);\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred.Please try again.', 1.5);\n    });\n  };\n\n  /************************************************************\r\n   *                        DUPLICATE\r\n   **************************************************************/\n  scope.clone = function (instance) {\n\n    var toSave = angular.copy(instance);\n    delete toSave.id;\n    delete toSave._id;\n\n    if (toSave.name) toSave.name += ' (Copy)';else if (toSave.title) toSave.title += ' (Copy)';\n\n    $marketcloud[resource_name].save(toSave).then(function (response) {\n      scope.loadData();\n      notie.alert(1, \"Item successfully cloned\", 1.5);\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred. Please try again.', 1.5);\n    });\n  };\n}]);"
    },
    {
      "id": 94,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\settings.controller.js",
      "name": "./public/modules/data_dashboard/src/controllers/settings.controller.js",
      "index": 94,
      "index2": 92,
      "size": 2975,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/settings.controller.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.controller('SettingsController', ['$scope', '$http', 'Currencies', 'Timezones', 'Countries', '$application', function (scope, http, currencies, timezones, countries, $application) {\n  scope.countries = countries;\n  scope.timezones = timezones;\n  scope.application = $application.get();\n\n  scope.images = [];\n\n  scope.application.apply_discounts_before_taxes = Boolean(scope.application.apply_discounts_before_taxes);\n\n  scope.currencies = Object.keys(currencies).map(function (c) {\n    return currencies[c];\n  }).map(function (c) {\n    c.label = c.name + ' (' + c.symbol + ')';\n    return c;\n  }).sort(function (a, b) {\n    a = a.name;\n    b = b.name;\n    if (a > b) {\n      return 1;\n    } else if (b > a) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n\n  scope.tax_options = [{\n    value: 'nothing',\n    label: 'Don\\'t tax'\n  }, {\n    value: 'products_only',\n    label: 'Tax products only'\n  }, {\n    value: 'shipping_only',\n    label: 'Tax shipping only'\n  }, {\n    value: 'all',\n    label: 'Tax shipping and products'\n  }];\n\n  scope.refreshApplicationData = function () {\n    $http({\n      url: '/applications/list/' + Number(scope.application.id),\n      method: 'GET'\n    }).then(function (response) {\n      $application.set(response.data.data);\n    }).catch(function (error) {\n      notie.alert(3, \"An error has occurred while reloading application's data. Refreshing the page...\");\n      window.location.reload();\n    });\n  };\n\n  scope.updateSettings = function () {\n    var payload = {\n      name: scope.application.name,\n      url: scope.application.url,\n      timezone: scope.application.timezone,\n      currency_code: scope.application.currency_code,\n      tax_rate: scope.application.tax_rate,\n      tax_type: scope.application.tax_type,\n      apply_discounts_before_taxes: scope.application.apply_discounts_before_taxes,\n      email_address: scope.application.email_address,\n      company_name: scope.application.company_name,\n      company_taxid: scope.application.company_taxid,\n      company_country: scope.application.company_country,\n      company_state: scope.application.company_state,\n      company_city: scope.application.company_city,\n      company_address: scope.application.company_address,\n      company_postalcode: scope.application.company_postalcode,\n      invoices_prefix: scope.application.invoices_prefix,\n      es_weights: scope.application.es_weights\n    };\n\n    if (scope.images.length >= 1) {\n      payload.logo = scope.images[0];\n    }\n\n    http({\n      method: 'PUT',\n      url: window.API_BASE_URL + '/application',\n      data: payload,\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': window.public_key + ':' + window.token\n      }\n    }).then(function (response) {\n      notie.alert(1, 'Application successfully updated', 1);\n    }).catch(function (err) {\n      notie.alert(3, 'An error has occurred.');\n    });\n  };\n}]);"
    },
    {
      "id": 95,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\shippingMethods\\shipping.edit.js",
      "name": "./public/modules/data_dashboard/src/controllers/shippingMethods/shipping.edit.js",
      "index": 95,
      "index2": 93,
      "size": 2652,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/shippingMethods/shipping.edit.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\nvar controller = null;\napp.controller('EditShippingController', ['$scope', '$http', '$location', 'Countries', 'shipping', '$marketcloud', '$validation', '$models', function (scope, http, location, countries, shippingRequest, $marketcloud, $validation, $models) {\n  scope.availableRules = ['max_value', 'min_value', 'max_weight', 'min_weight', 'max_height', 'min_height', 'max_depth', 'min_depth', 'max_width', 'min_width'];\n\n  scope.getShippingRules = function () {\n    var o = {};\n    for (var k in scope.shipping) {\n      if (scope.availableRules.indexOf(k) > -1) {\n        o[k] = angular.copy(scope.shipping[k]);\n      }\n    }\n    return o;\n  };\n\n  scope.howManyRules = function (o) {\n    var count = 0;\n\n    for (var k in scope.shipping) {\n      if (scope.availableRules.indexOf(k) > -1) {\n        count++;\n      }\n    }\n    return count;\n  };\n\n  scope.countries = angular.copy(countries);\n  scope.countries.unshift({\n    name: 'All countries',\n    code: 'ALL'\n  }, {\n    name: 'Europe',\n    code: 'EUROPE'\n  });\n\n  scope.shipping = {\n    availability: 'ALL',\n    base_cost: 0,\n    per_item_cost: 0,\n    zones: []\n  };\n\n  scope.shipping = shippingRequest.data.data;\n\n  scope.shipping.zones = scope.shipping.zones || [];\n\n  scope.newRule = {};\n  scope.addRule = function () {\n    scope.shipping[scope.newRule.name] = scope.newRule.value;\n\n    scope.newRule = {};\n  };\n\n  scope.removeRule = function (name) {\n    scope.shipping[name] = null;\n  };\n\n  scope.ruleNameToDescription = function (name) {\n    return name.replace(/\\_/gi, ' ').replace(/min/, 'Minimum').replace(/max/, 'Maximum');\n  };\n\n  scope.newZone = {};\n  scope.addZone = function () {\n    scope.shipping.zones.push(scope.newZone);\n    scope.newZone = null;\n  };\n  scope.removeZone = function ($index) {\n    scope.shipping.zones.splice($index, 1);\n  };\n\n  scope.updateShipping = function () {\n\n    $validation.hideErrors();\n\n    $marketcloud.shippings.update(scope.shipping.id, scope.shipping).then(function (response) {\n      notie.alert(1, 'Shipping updated', 2);\n    }).catch(function (response) {\n\n      if (response.status === 400) {\n        notie.alert(2, 'The data you entered has some errors', 1.5);\n\n        var validation = response.data.errors[0];\n        var selector = '[ng-model=\"shipping.' + validation.invalidPropertyName + '\"]';\n\n        if (angular.element(selector).length === 0) selector = '[validate-for=\"' + validation.invalidPropertyName + '\"]';\n\n        $validation.showErrorMessage(validation, $models.Shipping.schema, selector);\n      } else notie.alert(3, 'An error has occurred.', 2);\n    });\n  };\n}]);"
    },
    {
      "id": 96,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\shippingMethods\\shippings.list.js",
      "name": "./public/modules/data_dashboard/src/controllers/shippingMethods/shippings.list.js",
      "index": 96,
      "index2": 94,
      "size": 2565,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/shippingMethods/shippings.list.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.controller('ShippingsController', ['$scope', '$http', '$location', 'Countries', 'shippings', '$marketcloud', '$utils', function (scope, http, location, countries, shippings, $marketcloud, $utils) {\n\n  scope.shippings = shippings.data.data;\n\n  scope.countries = countries;\n\n  scope.pagination = $utils.getPaginationFromHTTPResponse(shippings);\n\n  // Holding query fields\n  // When listing data this oobject is sent\n  scope.query = {\n    per_page: 20\n  };\n\n  scope.availableRules = ['max_value', 'min_value', 'max_weight', 'min_weight', 'max_height', 'min_height', 'max_depth', 'min_depth', 'max_width', 'min_width'];\n\n  scope.getShippingRules = function (shipping) {\n    var o = {};\n    for (var k in shipping) {\n      if (scope.availableRules.indexOf(k) > -1) {\n        o[k] = angular.copy(shipping[k]);\n      }\n    }\n\n    console.log(\"Le shipping rules\", o);\n    return o;\n  };\n\n  scope.ruleNameToDescription = function (name) {\n    return name.replace(/\\_/gi, ' ').replace(/min/, 'Minimum').replace(/max/, 'Maximum');\n  };\n\n  scope.loadData = function () {\n    if (scope.query.q === '') {\n      delete scope.query.q;\n    }\n\n    return $marketcloud.shippings.list(scope.query).then(function (response) {\n      scope.shippings = response.data.data;\n      scope.pagination = $utils.getPaginationFromHTTPResponse(response);\n    }).error(function (response) {\n      notie.alert(3, 'An error has occurred. Please try again', 1.5);\n    });\n  };\n\n  scope.loadPage = function (page_number) {\n    scope.query.page = Number(page_number);\n    scope.loadData();\n  };\n\n  scope.deleteShipping = function (id) {\n    $marketcloud.shippings.delete(id).then(function (response) {\n      notie.alert(1, 'Shipping method successfully deleted', 1.5);\n      scope.loadPage();\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred', 1.5);\n    });\n  };\n\n  /************************************************************\r\n   *                        DUPLICATE\r\n   **************************************************************/\n  scope.clone = function (shippingRule) {\n    console.log(\"Cloning\");\n\n    var toSave = angular.copy(shippingRule);\n    delete shippingRule.id;\n    delete toSave._id;\n\n    toSave.name += ' (Copy)';\n\n    $marketcloud.shippings.save(toSave).then(function (response) {\n      scope.loadPage();\n      notie.alert(1, \"Shipping rule successfully cloned\", 1.5);\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred. Please try again.', 1.5);\n    });\n  };\n}]);"
    },
    {
      "id": 97,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\shippingMethods\\shippings.new.js",
      "name": "./public/modules/data_dashboard/src/controllers/shippingMethods/shippings.new.js",
      "index": 97,
      "index2": 95,
      "size": 2757,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/shippingMethods/shippings.new.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.controller('CreateShippingController', ['$scope', '$http', '$location', 'Countries', '$marketcloud', '$validation', '$models', function (scope, http, location, countries, $marketcloud, $validation, $models) {\n  scope.availableRules = ['max_value', 'min_value', 'max_weight', 'min_weight', 'max_height', 'min_height', 'max_depth', 'min_depth', 'max_width', 'min_width'];\n\n  scope.getShippingRules = function () {\n    var o = {};\n    for (var k in scope.shipping) {\n      if (scope.availableRules.indexOf(k) > -1) {\n        o[k] = angular.copy(scope.shipping[k]);\n      }\n    }\n    return o;\n  };\n  scope.howManyRules = function (o) {\n    var count = 0;\n\n    for (var k in scope.shipping) {\n      if (scope.availableRules.indexOf(k) > -1) {\n        count++;\n      }\n    }\n    return count;\n  };\n\n  scope.countries = angular.copy(countries);\n\n  scope.filterCountries = function (query) {\n    var data = scope.countries.filter(function (country) {\n      return country.name.indexOf(query) > -1;\n    }).sort(function (a, b) {\n      return a.name > b.name;\n    });\n    return {\n      data: data\n    };\n  };\n\n  // Adding a handy \"all\" destination\n  scope.countries.unshift({\n    name: 'All countries',\n    code: 'ALL'\n  });\n\n  scope.shipping = {\n    name: '',\n    base_cost: 0,\n    per_item_cost: 0,\n    zones: []\n  };\n\n  scope.newRule = {};\n  scope.addRule = function () {\n    scope.shipping[scope.newRule.name] = scope.newRule.value;\n\n    scope.newRule = {};\n  };\n\n  scope.removeRule = function (name) {\n    delete scope.shipping[name];\n  };\n\n  scope.ruleNameToDescription = function (name) {\n    return name.replace(/\\_/gi, ' ').replace(/min/, 'Minimum').replace(/max/, 'Maximum');\n  };\n\n  scope.newZone = {};\n  scope.addZone = function () {\n    scope.shipping.zones.push(scope.newZone);\n    scope.newZone = null;\n  };\n  scope.removeZone = function ($index) {\n    scope.shipping.zones.splice($index, 1);\n  };\n\n  scope.saveShipping = function () {\n\n    $validation.hideErrors();\n\n    $marketcloud.shippings.save(scope.shipping).then(function (response) {\n      notie.alert(1, 'Shipping saved.', 1.5);\n      location.path('/shippings');\n    }).catch(function (response) {\n\n      if (response.status === 400) {\n        notie.alert(2, 'The data you entered has some errors', 1.5);\n\n        var validation = response.data.errors[0];\n        var selector = '[ng-model=\"shipping.' + validation.invalidPropertyName + '\"]';\n\n        if (angular.element(selector).length === 0) selector = '[validate-for=\"' + validation.invalidPropertyName + '\"]';\n\n        $validation.showErrorMessage(validation, $models.Shipping.schema, selector);\n      } else notie.alert(3, 'An error has occurred.', 2);\n    });\n  };\n}]);"
    },
    {
      "id": 98,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\sidebar.js",
      "name": "./public/modules/data_dashboard/src/controllers/sidebar.js",
      "index": 98,
      "index2": 96,
      "size": 2160,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/sidebar.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.controller('SidebarController', ['$scope', '$http', '$routeParams', '$location', '$rootScope', '$route', function ($scope, $http, $params, $location, $root, $route) {\n  $scope.showingSubSidebar = false;\n\n  $scope.currentSidebarSection = null;\n\n  $scope.currentSection = null;\n\n  $scope.$on('$dashboardSectionChange', function ($event, args) {\n    // Intercepting the new section event\n    if (args.section) {\n      $scope.currentSection = args.section.split('.')[0];\n\n      $root.currentSection = args.section.split('.')[0];\n      $root.currentSubsection = args.section.split('.')[1] || null;\n\n      if (args.section.indexOf('system') < 0 || args.section.indexOf('inventory') < 0) {\n        $scope.hideSubSidebar();\n      }\n    }\n  });\n\n  $scope.switchToApp = function (app_id) {\n    var current_app_id = window.current_application.id;\n    // We just need to swap the current urls with the desired app id\n    var url = '/applications/' + app_id + '/dashboard#/';\n\n    window.location.href = url;\n  };\n\n  $scope.subEntriesGroupToShow = null;\n\n  $scope.subSideBars = {\n    inventory: false,\n    system: false\n  };\n  $scope.showSubEntries = function (id) {\n    $scope.subEntriesGroupToShow = id;\n  };\n\n  $scope.subEntriesGroupShown = {\n    inventory: false,\n    system: false\n  };\n\n  $scope.toggleSubEntries = function (group_id) {\n    // group_id is the name of the dashboard section\n    // a section is a group of logical views\n    // e.g. inventory is a group of views related to inventory management\n    $scope.currentSection = group_id;\n\n    $scope.subEntriesGroupShown[group_id] = !$scope.subEntriesGroupShown[group_id];\n  };\n  $scope.showSubSidebar = function (id) {\n    $scope.showingSubSidebar = true;\n\n    var sidebars = ['inventory', 'system', 'contents'];\n\n    if (sidebars.indexOf(id) < 0) {\n      return false;\n    }\n\n    $scope.currentSidebarSection = id;\n  };\n\n  $scope.hideSubSidebar = function () {\n    $scope.showingSubSidebar = false;\n  };\n}]);\n\napp.controller('NavbarController', ['$scope', '$http', '$routeParams', '$location', function ($scope, $http, $params, $location) {}]);"
    },
    {
      "id": 99,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\staticContents\\staticContent.new.js",
      "name": "./public/modules/data_dashboard/src/controllers/staticContents/staticContent.new.js",
      "index": 99,
      "index2": 97,
      "size": 1404,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/staticContents/staticContent.new.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.controller('CreateStaticContentController', ['$scope', '$http', '$location', '$marketcloud', '$utils', '$validation', '$models', function (scope, http, location, $marketcloud, $utils, $validation, $models) {\n\n  scope.content = {\n    name: '',\n    content: ''\n\n    // This function is invoked when a seo property\n    // changes.\n  };scope.computeSeoTags = function () {};\n\n  scope.unsafeSlug = false;\n  scope.updateSlug = function () {\n    scope.content.slug = $utils.getSlugFromString(scope.content.title);\n  };\n  scope.saveContent = function () {\n    $validation.hideErrors();\n    $marketcloud.staticContents.save(scope.content).then(function (response) {\n      // title text author\n      notie.alert(1, 'Static content saved', 2);\n      location.path('/contents/static');\n    }).catch(function (response) {\n\n      if (response.status === 400) {\n        notie.alert(2, 'The data you entered has some errors', 1.5);\n\n        var validation = response.data.errors[0];\n        var selector = '[ng-model=\"content.' + validation.invalidPropertyName + '\"]';\n\n        if (angular.element(selector).length === 0) selector = '[validate-for=\"' + validation.invalidPropertyName + '\"]';\n\n        $validation.showErrorMessage(validation, $models.StaticContent.schema, selector);\n      } else notie.alert(3, 'An error has occurred.', 2);\n    });\n  };\n}]);"
    },
    {
      "id": 100,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\staticContents\\staticContents.edit.js",
      "name": "./public/modules/data_dashboard/src/controllers/staticContents/staticContents.edit.js",
      "index": 100,
      "index2": 98,
      "size": 1339,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/staticContents/staticContents.edit.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.controller('EditStaticContentController', ['$scope', '$http', 'content', '$location', '$marketcloud', 'moment', '$utils', '$validation', '$models', function (scope, http, content, location, $marketcloud, $moment, $utils, $validation, $model) {\n  scope.content = content.data.data;\n\n  scope.unsafeSlug = false;\n  scope.updateSlug = function () {\n    scope.content.slug = $utils.getSlugFromString(scope.content.title);\n  };\n\n  scope.getImagesContainer = function () {\n    return scope.content.author.images;\n  };\n\n  scope.updateContent = function () {\n    $marketcloud.staticContents.update(scope.content.id, scope.content).then(function (response) {\n      notie.alert(1, 'Content updated with success', 1.5);\n    }).catch(function (response) {\n\n      if (response.status === 400) {\n        notie.alert(2, 'The data you entered has some errors', 1.5);\n\n        var validation = response.data.errors[0];\n        var selector = '[ng-model=\"content.' + validation.invalidPropertyName + '\"]';\n\n        if (angular.element(selector).length === 0) selector = '[validate-for=\"' + validation.invalidPropertyName + '\"]';\n\n        $validation.showErrorMessage(validation, $models.StaticContent.schema, selector);\n      } else notie.alert(3, 'An error has occurred.', 2);\n    });\n  };\n}]);"
    },
    {
      "id": 101,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\taxes\\taxes.edit.js",
      "name": "./public/modules/data_dashboard/src/controllers/taxes/taxes.edit.js",
      "index": 101,
      "index2": 99,
      "size": 2763,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/taxes/taxes.edit.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.controller('EditTaxController', ['$scope', '$http', '$marketcloud', '$location', 'Countries', 'tax', 'TaxRates', '$validation', '$models', function (scope, http, $marketcloud, location, countries, tax, tax_rates, $validation, $models) {\n\n  scope.tax_rates = tax_rates;\n\n  scope.countriesWithTaxRates = scope.tax_rates.map(function (r) {\n    return r.country;\n  }).filter(function (item, pos, self) {\n    return self.indexOf(item) == pos;\n  });\n\n  scope.countries = countries;\n  scope.countries.unshift({\n    name: '*'\n  });\n\n  // Cache of states lists\n  scope.states = {};\n\n  // Whenever the country changes,\n  // the list of states must be updated\n  scope.tax = tax.data.data;\n\n  scope.addRate = function () {\n    scope.tax.rates.push({\n      name: '',\n      country: '',\n      state: '',\n      postcode: '',\n      city: '',\n      rate: 0,\n      priority: 0\n    });\n  };\n\n  scope.deleteRate = function (index) {\n    scope.tax.rates.splice(index, 1);\n  };\n\n  scope.updateCity = function (rate) {\n    if (rate.postcode.indexOf('*') > -1) {\n      rate.city = '*';\n    }\n  };\n  scope.updatePostcode = function (rate) {\n    if (rate.state === '*') {\n      rate.postcode = '*';\n    }\n  };\n\n  scope.updateStates = function (rate) {\n    if (rate.country === '*') {\n      rate.state = '*';\n      rate.city = '*';\n      return;\n    }\n\n    http({\n      method: 'GET',\n      url: '/countries/' + rate.country.toLowerCase()\n    }).then(function (response) {\n      scope.states[rate.country] = response.data;\n      scope.states[rate.country].unshift({\n        name: '*'\n      });\n    }).catch(function (error) {\n      var type = error.data.errors[0].type;\n      scope.states[rate.country] = [{\n        name: '*'\n      }];\n\n      // We show an empty text input if its not available\n      // notie.alert(2,\"List of states not available for \"+scope.tax.country,2);\n\n      if (type !== 'StatesListNotAvailable') {\n        notie.alert(3, 'An error has occurred. Please try again.', 1.5);\n      }\n    });\n  };\n\n  scope.saveTax = function () {\n    $marketcloud.taxes.update(scope.tax.id, scope.tax).then(function (response) {\n      notie.alert(1, 'Tax saved', 1.5);\n    }).catch(function (response) {\n\n      if (response.status === 400) {\n        notie.alert(2, 'The data you entered has some errors', 1.5);\n\n        var validation = response.data.errors[0];\n        var selector = '[ng-model=\"tax.' + validation.invalidPropertyName + '\"]';\n\n        if (angular.element(selector).length === 0) selector = '[validate-for=\"' + validation.invalidPropertyName + '\"]';\n\n        $validation.showErrorMessage(validation, $models.Tax.schema, selector);\n      } else notie.alert(3, 'An error has occurred.', 2);\n    });\n  };\n}]);"
    },
    {
      "id": 102,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\taxes\\taxes.new.js",
      "name": "./public/modules/data_dashboard/src/controllers/taxes/taxes.new.js",
      "index": 102,
      "index2": 100,
      "size": 5541,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/taxes/taxes.new.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.directive('customOnChange', function () {\n  return {\n    restrict: 'A',\n    link: function link(scope, element, attrs) {\n      var onChangeHandler = scope.$eval(attrs.customOnChange);\n      element.bind('change', onChangeHandler);\n    }\n  };\n});\n\nfunction csvToJson(csv) {\n  var lines = csv.split('\\n');\n\n  var result = [];\n\n  var headers = lines[0].split(',');\n\n  for (var i = 1; i < lines.length; i++) {\n    var obj = {};\n    var currentline = lines[i].split(',');\n\n    for (var j = 0; j < headers.length; j++) {\n      obj[headers[j]] = currentline[j];\n    }\n\n    result.push(obj);\n  }\n\n  return result;\n}\n\nfunction validateTaxRates(rates) {\n  var testFunction = function testFunction(rate) {\n    return rate.country && rate.state && rate.postcode && rate.city && rate.rate && rate.hasOwnProperty('priority') // it can be 0 and would fail the simple test\n    ;\n  };\n\n  // Check that every item pass the test function\n  return rates.every(testFunction);\n}\n\nfunction Rate(config) {\n  this.state = '*';\n  this.postcode = '*';\n  this.city = '*';\n  this.priority = 0;\n\n  for (var k in config) {\n    this[k] = config[k];\n  }\n\n  // We store rates as strings in our default country list\n  if (this.rate) {\n    this.rate = Number(this.rate);\n  }\n}\n\napp.controller('CreateTaxController', ['$scope', '$http', '$marketcloud', '$location', 'Countries', 'TaxRates', '$validation', '$models', function (scope, http, $marketcloud, location, countries, tax_rates, $validation, $models) {\n  scope.countries = countries;\n  scope.tax_rates = tax_rates;\n\n  scope.countriesWithTaxRates = scope.tax_rates.map(function (r) {\n    return r.country;\n  }).filter(function (item, pos, self) {\n    return self.indexOf(item) == pos;\n  });\n\n  scope.countries.unshift({\n    name: '*'\n  });\n\n  // Cache of states lists\n  scope.states = {};\n\n  // Whenever the country changes,\n  // the list of states must be updated\n  scope.tax = {\n    rates: []\n  };\n\n  scope.updateCity = function (rate) {\n    if (rate.postcode.indexOf('*') > -1) {\n      rate.city = '*';\n    }\n  };\n  scope.updatePostcode = function (rate) {\n    if (rate.state === '*') {\n      rate.postcode = '*';\n    }\n  };\n\n  scope.importCSV = function () {\n    $('#chooseFileButton').trigger('click');\n  };\n  scope.handleFileSelect = function (evt) {\n    var files = $('#chooseFileButton')[0].files; // FileList object\n\n    // use the 1st file from the list\n    var f = files[0];\n\n    // HTML5 API\n    var reader = new FileReader();\n\n    // Closure to capture the file information.\n    reader.onload = function (theFile) {\n      return function (e) {\n        // Grabbing the file\n        var csv_file = e.target.result;\n\n        // Converting to JSON\n        var new_rates = csvToJson(csv_file);\n\n        if (validateTaxRates(new_rates) === false) {\n          notie.alert(2, 'The provided CSV file is not in a valid format', 2);\n          return;\n        }\n\n        // Transforming into a Rate object to handle defaults\n        new_rates = new_rates.map(function (rate) {\n          return new Rate(rate);\n        });\n\n        // Pushing new stuff to the bottom\n        scope.tax.rates = scope.tax.rates.concat(new_rates);\n\n        // Calling apply, since Angular is not aware of this async operation\n        scope.$apply();\n      };\n    }(f);\n\n    // Read in the image file as a data URL.\n    reader.readAsText(f);\n  };\n\n  scope.loadRatesFromCountry = function (country) {\n    var new_rates = scope.tax_rates.filter(function (rate) {\n      return rate.country === country;\n    }).map(function (rate) {\n      rate.country = country;\n      return new Rate(rate);\n    });\n    scope.tax.rates = scope.tax.rates.concat(new_rates);\n  };\n\n  scope.updateStates = function (rate) {\n    if (rate.country === '*') {\n      rate.state = '*';\n      rate.city = '*';\n      return;\n    }\n\n    http({\n      method: 'GET',\n      url: '/countries/' + rate.country.toLowerCase()\n    }).then(function (response) {\n      scope.states[rate.country] = response.data;\n      scope.states[rate.country].unshift({\n        name: '*'\n      });\n    }).catch(function (error) {\n      var type = error.data.errors[0].type;\n      scope.states[rate.country] = '*';\n\n      // We show an empty text input if its not available\n      // notie.alert(2,\"List of states not available for \"+scope.tax.country,2);\n\n      if (type !== 'StatesListNotAvailable') {\n        notie.alert(3, 'An error has occurred. Please try again.', 1.5);\n      }\n    });\n  };\n\n  scope.addRate = function () {\n    scope.tax.rates.push({\n      name: '',\n      country: '',\n      state: '',\n      postcode: '',\n      city: '',\n      rate: 0,\n      priority: 0\n    });\n  };\n\n  scope.deleteRate = function (index) {\n    scope.tax.rates.splice(index, 1);\n  };\n\n  scope.saveTax = function () {\n\n    $validation.hideErrors();\n\n    $marketcloud.taxes.save(scope.tax).then(function (response) {\n      notie.alert(1, 'Tax saved', 1.5);\n      location.path('/system/taxes');\n    }).catch(function (response) {\n\n      if (response.status === 400) {\n        notie.alert(2, 'The data you entered has some errors', 1.5);\n\n        var validation = response.data.errors[0];\n        var selector = '[ng-model=\"tax.' + validation.invalidPropertyName + '\"]';\n\n        if (angular.element(selector).length === 0) selector = '[validate-for=\"' + validation.invalidPropertyName + '\"]';\n\n        $validation.showErrorMessage(validation, $models.Tax.schema, selector);\n      } else notie.alert(3, 'An error has occurred.', 2);\n    });\n  };\n}]);"
    },
    {
      "id": 103,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\translations.js",
      "name": "./public/modules/data_dashboard/src/controllers/translations.js",
      "index": 103,
      "index2": 101,
      "size": 1795,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/translations.js"
        }
      ],
      "source": "'use strict';\n/* globals angular */\n\nvar app = angular.module('DataDashboard');\nJSON.flatten = function (data) {\n\tvar result = {};\n\tfunction recurse(cur, prop) {\n\t\tif (Object(cur) !== cur) {\n\t\t\tresult[prop] = cur;\n\t\t} else if (Array.isArray(cur)) {\n\t\t\tfor (var i = 0, l = cur.length; i < l; i++) {\n\t\t\t\trecurse(cur[i], prop + \"[\" + i + \"]\");\n\t\t\t}if (l == 0) result[prop] = [];\n\t\t} else {\n\t\t\tvar isEmpty = true;\n\t\t\tfor (var p in cur) {\n\t\t\t\tisEmpty = false;\n\t\t\t\trecurse(cur[p], prop ? prop + \".\" + p : p);\n\t\t\t}\n\t\t\tif (isEmpty && prop) result[prop] = {};\n\t\t}\n\t}\n\trecurse(data, \"\");\n\treturn result;\n};\napp.controller('TranslationsController', ['$scope', 'resource', 'resourceType', function (scope, resource, type) {\n\n\t// The resource to translate\n\tscope.resource = resource.data.data;\n\t// Init locales\n\tif (!scope.resource.hasOwnProperty('locales')) {\n\t\tscope.resource.locales = {};\n\t\tscope.availableLocales.forEach(function (locale) {\n\t\t\tscope.resource.locales[locale] = {};\n\t\t});\n\t} else {\n\t\t// Let''s just be sure the locals object has every locale \n\t\t// initialized to an empty object\n\t\tscope.availableLocales.forEach(function (locale) {\n\t\t\tif (!scope.resource.locales.hasOwnProperty(locale)) scope.resource.locales[locale] = {};\n\t\t});\n\t}\n\n\t// The type of the resource, product, category, etc...\n\tscope.type = type;\n\n\tscope.getTranslatableProperties = function () {\n\t\treturn Object.keys(JSON.flatten(scope.resource)).filter(function (k) {\n\t\t\treturn k.indexOf('variant') === -1 && k.indexOf('locale') === -1;\n\t\t});\n\t};\n\n\tscope.translatables = scope.getTranslatableProperties();\n\n\tvar props_to_translate = {\n\t\tproducts: [\"name\", \"description\"],\n\t\tcategories: [\"name\", \"description\"],\n\t\tbrands: [\"name\", \"description\"],\n\t\tcollections: [\"name\", \"description\"]\n\t};\n\n\tscope.save = function () {};\n}]);"
    },
    {
      "id": 104,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\users\\users.list.js",
      "name": "./public/modules/data_dashboard/src/controllers/users/users.list.js",
      "index": 104,
      "index2": 102,
      "size": 1773,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/users/users.list.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.controller('UsersController', ['$scope', '$marketcloud', 'users', function (scope, $marketcloud, resources) {\n  scope.users = resources.data.data;\n\n  scope.pagination = {\n    currentPage: resources.data.page,\n    numberOfPages: resources.data.pages,\n    nextPage: resources.data._links.next || null,\n    previousPage: resources.data._links.prev || null,\n    count: resources.data.count\n  };\n\n  scope.query = {\n    per_page: 20\n\n    // Util\n  };scope.timestampToDate = function (t) {\n    var a = new Date(t);\n    var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    var str = a.getDate() + ' ' + months[a.getMonth()] + ' ' + a.getFullYear();\n    return str;\n  };\n\n  scope.loadPage = function (p) {\n    scope.query.page = Number(p);\n    return scope.loadData(scope.query);\n  };\n\n  scope.delete = function (user) {\n    $marketcloud.users.delete(user.id).then(function (response) {\n      notie.alert(1, 'User deleted', 1.5);\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred. Please try again.', 1.5);\n    });\n  };\n\n  scope.loadData = function (query) {\n    if (!query) {\n      query = scope.query;\n    }\n\n    $marketcloud.users.list(query).then(function (response) {\n      scope.users = response.data.data;\n\n      scope.pagination = {\n        currentPage: response.data.page,\n        numberOfPages: response.data.pages,\n        nextPage: response.data._links.next || null,\n        previousPage: response.data._links.prev || null,\n        count: response.data.count\n      };\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred. Please try again.', 1.5);\n    });\n  };\n}]);"
    },
    {
      "id": 105,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\users\\users.new.js",
      "name": "./public/modules/data_dashboard/src/controllers/users/users.new.js",
      "index": 105,
      "index2": 103,
      "size": 1973,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/users/users.new.js"
        }
      ],
      "source": "\"use strict\";\n\nvar app = angular.module('DataDashboard');\n\nvar NewUserController = function NewUserController(scope, $marketcloud, http, location, Countries) {\n  scope.user = {\n    name: \"\",\n    password: \"\",\n    registered_with: 'email',\n    billing_address: {},\n    shipping_address: {}\n  };\n  scope.countries = Countries;\n  scope.customPropertiesData = {};\n\n  scope.copyShippingAddressToBillingAddress = function () {\n    for (var k in scope.user.shipping_address) {\n      scope.user.billing_address[k] = scope.user.shipping_address[k];\n    }\n  };\n\n  scope.saveUser = function () {\n\n    // Joining user object with custom properties\n    for (var k in scope.customPropertiesData) {\n      scope.user[k] = scope.customPropertiesData[k];\n    }\n\n    console.log(\"Saving this\", scope.user);\n    $marketcloud.users.save(scope.user).then(function (response) {\n      notie.alert(1, 'User saved', 2);\n      location.path('/users');\n    }).catch(function (response) {\n      notie.alert(2, 'An error has occurred. Please check the data you entered', 2);\n    });\n  };\n\n  // We need to load Roles\n  http({\n    method: 'GET',\n    url: '/applications/' + scope.application.id + '/roles'\n  }).then(function (response) {\n    scope.roles = response.data.data;\n  }).catch(function (response) {\n    notie.alert(2, 'An error has occurred while reloading roles.', 1);\n  });\n\n  scope.addCustomProperty = function () {\n    if (scope.user.hasOwnProperty(scope.newAttributeName)) {\n      scope.userError = 'CUSTOM_PROPERTY_NAME_ALREADY_EXISTS';\n    } else {\n      scope.customPropertiesData[scope.newAttributeName] = scope.newAttributeValue;\n      scope.newAttributeValue = null;\n      scope.newAttributeName = null;\n    }\n  };\n\n  scope.deleteCustomProperty = function (property_name) {\n    delete scope.customPropertiesData[property_name];\n  };\n};\n\nNewUserController.$inject = ['$scope', '$marketcloud', '$http', '$location', 'Countries'];\n\napp.controller('NewUserController', NewUserController);"
    },
    {
      "id": 106,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\users\\users.view.js",
      "name": "./public/modules/data_dashboard/src/controllers/users/users.view.js",
      "index": 106,
      "index2": 104,
      "size": 3220,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/users/users.view.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.controller('UserController', ['$scope', '$http', '$routeParams', 'user', '$marketcloud', 'Countries', '$utils', function (scope, http, params, user, $marketcloud, countries, $utils) {\n  // Injecting the resolve's data\n  scope.user = user.data.data;\n\n  scope.carts = [];\n  scope.addresses = [];\n\n  scope.newAddress = {\n    email: scope.user.email || '',\n    user_id: scope.user.id\n\n    // This is a list of countries used by the countries autocomplete\n  };scope.countries = countries;\n\n  scope.update = function () {\n    var payload = angular.copy(scope.user);\n\n    for (var k in scope.customPropertiesData) {\n      payload[k] = scope.customPropertiesData[k];\n    }\n\n    delete payload['id'];\n    delete payload['application_id'];\n\n    $marketcloud.users.update(scope.user.id, payload).then(function (response) {\n      notie.alert(1, 'Update Succeded', 2);\n    }).catch(function (errpr) {\n      notie.alert(3, 'An error has occurred, please try again', 2);\n    });\n  };\n\n  scope.toggleAddressVisibility = function (address) {\n    address.expanded = !address.expanded;\n  };\n\n  scope.saveAddress = function () {\n    $marketcloud.addresses.save(scope.newAddress).then(function (response) {\n      notie.alert(1, 'Address created', 2);\n      scope.newAddress = {\n        email: scope.user.email || '',\n        user_id: scope.user.id\n      };\n      $(\"#addAddressModal\").modal(\"hide\");\n      return $marketcloud.addresses.list({\n        user_id: scope.user.id\n      });\n    }).then(function (response) {\n      scope.addresses = response.data.data;\n    }).catch(function (error) {\n      notie.alert(2, 'An error has occurred, please check the data you entered', 2);\n    });\n  };\n\n  // Getting the set of core properties from models\n  var coreProperties = Models.User.getPropertyNames();\n\n  // id is a core property often not inside models\n  coreProperties.push('id', 'role', 'application_id', 'registered_with', 'created_at', 'updated_at', 'shipping_address', 'billing_address');\n\n  // Here we store custom properties\n  scope.customPropertiesData = {};\n\n  for (var k in scope.user) {\n    if (coreProperties.indexOf(k) < 0) {\n      scope.customPropertiesData[k] = scope.user[k];\n      delete scope.user[k];\n    }\n  }\n\n  $marketcloud.orders.list({\n    \"user.id\": params.userId,\n    \"per_page\": 10\n  }).then(function (response) {\n\n    scope.orders = response.data.data;\n  }).catch(function (response) {\n\n    notie.alert(2, 'An error has occurred. Please try again.', 2);\n  });\n\n  $marketcloud.carts.list({\n    user_id: params.userId,\n    per_page: 10\n  }).then(function (response) {\n\n    scope.carts = response.data.data;\n  }).catch(function (response) {\n\n    notie.alert(2, 'An error has occurred. Please try again.', 2);\n  });\n\n  $marketcloud.addresses.list({\n    user_id: params.userId,\n    per_page: 5\n  }).then(function (response) {\n\n    // We want to \"compress\" the view\n    scope.addresses = response.data.data.map(function (address, index) {\n      if (0 === index) address.expanded = true;else address.expanded = false;\n      return address;\n    });\n  }).catch(function (response) {\n\n    notie.alert(2, 'An error has occurred. Please try again.', 2);\n  });\n}]);"
    },
    {
      "id": 107,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\variables\\variables.edit.js",
      "name": "./public/modules/data_dashboard/src/controllers/variables/variables.edit.js",
      "index": 107,
      "index2": 105,
      "size": 2241,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/variables/variables.edit.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.controller('EditVariableController', ['$scope', '$http', '$location', '$marketcloud', 'variable', function (scope, http, location, $marketcloud, variable) {\n  scope.variable = variable.data.data;\n\n  function isURL(s) {\n    if (typeof s !== 'string') {\n      return false;\n    }\n    if (typeof s.indexOf !== 'function') {\n      return false;\n    }\n    return s.indexOf('http://') === 0;\n  }\n\n  if (isURL(scope.variable.value)) {\n    scope.variable.type = 'URL';\n  }\n\n  scope.containerForNewMediaAttribute = [];\n\n  scope.containersForExistingMediaAttributes = {};\n\n  scope.$watchCollection('containerForNewMediaAttribute', function () {\n    if (scope.containerForNewMediaAttribute[scope.containerForNewMediaAttribute.length - 1]) {\n      scope.variable.value = scope.containerForNewMediaAttribute[scope.containerForNewMediaAttribute.length - 1];\n    }\n  });\n\n  if (isURL(scope.variable.value) === true) {\n    scope.containersForExistingMediaAttributes['value'] = [scope.variable.value];\n    scope.$watchCollection('containersForExistingMediaAttributes.value', function () {\n      // If the value is null, it means that we just deleted it, so we don't have to re-update it\n      if (scope.variable.value === null) {\n        return;\n      }\n      if (scope.containersForExistingMediaAttributes['value']) {\n        scope.variable.value = scope.containersForExistingMediaAttributes['value'][scope.containersForExistingMediaAttributes['value'].length - 1];\n      }\n    });\n  }\n\n  scope.availableTypes = [{ type: 'string', label: 'String' }, { type: 'number', label: 'Number' }, { type: 'URL', label: 'Url / Media' }, { type: 'boolean', label: 'True/False' }];\n\n  scope.invalidPropertyName = null;\n  scope.validationMessage = null;\n  scope.validate = function () {};\n\n  scope.update = function () {\n    var payload = angular.copy(scope.variable);\n\n    if (payload.type === 'URL') {\n      payload.type = 'string';\n    }\n    $marketcloud.variables.update(scope.variable.id, payload).then(function (response) {\n      notie.alert(1, 'Variable successfully saved.', 1.5);\n    }).catch(function (error) {\n      notie.alert(3, 'An error has occurred, please try again.', 1.5);\n    });\n  };\n}]);"
    },
    {
      "id": 108,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\variables\\variables.list.js",
      "name": "./public/modules/data_dashboard/src/controllers/variables/variables.list.js",
      "index": 108,
      "index2": 106,
      "size": 1939,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/variables/variables.list.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.controller('VariablesController', ['$scope', '$http', 'variables', '$marketcloud', function (scope, http, resources, $marketcloud) {\n  // Pagination\n  scope.pagination = {\n    currentPage: resources.data.page,\n    numberOfPages: resources.data.pages,\n    nextPage: resources.data._links.next || null,\n    previousPage: resources.data._links.prev || null,\n    count: resources.data.count\n\n    // Query\n  };scope.query = {\n    per_page: 20\n\n    // Initial data resolved from the router\n  };scope.variables = resources.data.data;\n\n  scope.loadPage = function (p) {\n    return scope.loadData({\n      page: p\n    });\n  };\n  scope.loadData = function (query) {\n    if (!query) {\n      query = scope.query;\n    }\n\n    $marketcloud.variables.list(query).then(function (response) {\n      scope.variables = response.data.data;\n\n      scope.pagination = {\n        currentPage: response.data.page,\n        numberOfPages: response.data.pages,\n        nextPage: response.data._links.next || null,\n        previousPage: response.data._links.prev || null,\n        count: response.data.count\n      };\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred. Please try again.', 1.5);\n    });\n  };\n  scope.setPublishing = function (variable) {\n\n    $marketcloud.variables.update(variable.id, {\n      published: variable.published\n    }).then(function (response) {\n      notie.alert(1, 'Updated!', 1.5);\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred, please try again.', 1.5);\n    });\n  };\n\n  scope.deleteVariable = function (variable_id, index) {\n    $marketcloud.variables.delete(variable_id).then(function (response) {\n      scope.loadData({\n        page: 1\n      });\n      notie.alert(1, 'Variable deleted', 1.5);\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred.Please try again.', 1.5);\n    });\n  };\n}]);"
    },
    {
      "id": 109,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\variables\\variables.new.js",
      "name": "./public/modules/data_dashboard/src/controllers/variables/variables.new.js",
      "index": 109,
      "index2": 107,
      "size": 1369,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/variables/variables.new.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.controller('CreateVariableController', ['$scope', '$http', '$location', '$marketcloud', function (scope, http, location, $marketcloud) {\n    scope.variable = {\n        type: 'string',\n        value: '',\n        name: ''\n    };\n\n    scope.containerForNewMediaAttribute = [];\n\n    scope.containersForExistingMediaAttributes = {};\n\n    scope.$watchCollection('containerForNewMediaAttribute', function () {\n        scope.variable.value = scope.containerForNewMediaAttribute[scope.containerForNewMediaAttribute.length - 1];\n    });\n\n    scope.availableTypes = [{ type: 'string', label: 'String' }, { type: 'number', label: 'Number' }, { type: 'URL', label: 'Url / Media' }, { type: 'boolean', label: 'True/False' }];\n\n    scope.invalidPropertyName = null;\n    scope.validationMessage = null;\n    scope.validate = function () {};\n\n    scope.save = function () {\n        var payload = angular.copy(scope.variable);\n        if (payload.type === 'URL') {\n            payload.type = 'string';\n        }\n        $marketcloud.variables.save(payload).then(function (response) {\n            notie.alert(1, 'Variable successfully saved.', 1.5);\n            location.path('/variables');\n        }).catch(function (error) {\n            notie.alert(3, 'An error has occurred, please try again.', 1.5);\n        });\n    };\n}]);"
    },
    {
      "id": 110,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\variants.edit.js",
      "name": "./public/modules/data_dashboard/src/controllers/variants.edit.js",
      "index": 110,
      "index2": 108,
      "size": 4468,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/variants.edit.js"
        }
      ],
      "source": "'use strict';\n\nangular.module('DataDashboard').controller('EditVariantController', ['$scope', '$marketcloud', '$routeParams', '$http', 'resolvedProduct', function (scope, $marketcloud, params, $http, resolvedProduct) {\n  scope.product = resolvedProduct.data.data;\n\n  var originalVariantData = null;\n\n  scope.variant = null;\n\n  // This object holds the actual properties of the variant\n  // computed by variant + parent\n  scope.product_merge_variant = {};\n\n  // When saving the variant, only what does not match with the parent\n  // is saved inside the variant object\n  scope.customPropertiesData = {};\n\n  // These cannot be touched\n  scope.variantDefiningProperties = {};\n\n  scope.currentVariantId = null;\n\n  scope.filterVariantProps = function (o) {\n    var p = {};\n    for (var k in o) {\n      // if its not an inherited property, then it's a variant property name\n      if (scope.product.variantsDefinition.hasOwnProperty(k)) {\n        p[k] = k + ': ' + String(o[k]);\n      }\n    }\n    return p;\n\n    // return o\n  };\n\n  // This method must be implemented in order to\n  // make the media manager work\n  scope.getImagesContainer = function () {\n    return scope.product_merge_variant.images;\n  };\n\n  scope.removeImage = function (i) {\n    scope.product_merge_variant.images.splice(i, 1);\n  };\n\n  scope.getVariantStyle = function (i) {\n    // var r = [{\"color\" : \"red\"},{\"color\" : \"green\"},{\"color\" : \"blue\"}, {\"color\" : \"pink\"}\n    // ]\n    var r = ['label-info', 'label-danger', 'label-warning', 'label-success'];\n    return r[i % r.length];\n  };\n  scope.getVariantStyle = function (i) {\n    var r = [{\n      'color': '#c0392b'\n    }, {\n      'color': '#27ae60'\n    }, {\n      'color': '#2c3e50'\n    }, {\n      'color': '#d35400'\n    }];\n    return r[i % r.length];\n  };\n\n  scope.getVariantClass = function (i) {\n    var classes = ['label-empty-info', 'label-empty-success', 'label-empty-warning', 'label-empty-danger'];\n    return 'label solid ' + classes[i % classes.length];\n  };\n\n  scope.updateVariant = function () {\n\n    // We take only some stuff from the main product\n    var variantProperties = [\n    // Le eliino queste due perchÃ¨ altrimenti, se metto un prezzo nel parent\n    // e nel figlio metto lo stesso, non me lo salva\n    //'price',\n    //'price_discount',\n    'category_id', 'description', 'stock_type', 'stock_status', 'stock_level', 'sku', 'barcode', 'images', 'requires_shipping', 'width', 'depth', 'height', 'weight'];\n\n    var toSend = angular.copy(scope.variant);\n\n    for (var k in scope.product_merge_variant) {\n\n      // Se la property della variante Ã¨\n      // deiversa da ciÃ² che sta in product_merge_variant\n      // e la properietÃ  Ã¨ presente in variantProperties\n      if (toSend[k] !== scope.product_merge_variant[k] && variantProperties.indexOf(k) > -1) {\n\n        toSend[k] = scope.product_merge_variant[k];\n      }\n\n      if (k === \"price_discount\" && scope.product_merge_variant[k] !== originalVariantData[k]) {\n        console.log(k + \" dovrebbe passare da \" + originalVariantData[k] + \" a \" + scope.product_merge_variant[k]);\n        toSend.price_discount = scope.product_merge_variant[k];\n      }\n\n      if (k === \"price\" && scope.product_merge_variant[k] !== originalVariantData[k]) {\n        toSend.price = scope.product_merge_variant[k];\n      }\n    }\n\n    console.log(\"product_merge_variant\", angular.copy(scope.product_merge_variant));\n    console.log(\"toSend\", angular.copy(toSend));\n\n    $http({\n      method: 'PUT',\n      url: API_BASE_URL + '/products/' + params.productId + '/variants/' + scope.variant.id,\n      headers: {\n        Authorization: window.public_key + ':' + window.token\n      },\n      data: toSend\n    }).then(function (response) {\n      notie.alert(1, 'Variant successfully updated', 1.5);\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred. Please try again.', 1.5);\n    });\n  };\n\n  scope.setCurrentVariant = function (variant_id) {\n    scope.currentVariantId = variant_id;\n    scope.product.variants.forEach(function (v) {\n      if (Number(v.id) === Number(variant_id)) {\n        scope.variant = v;\n        originalVariantData = angular.copy(v);\n      }\n    });\n    for (var k in scope.product) {\n      scope.product_merge_variant[k] = scope.product[k];\n    }\n    for (var j in scope.variant) {\n      scope.product_merge_variant[j] = scope.variant[j];\n    }\n  };\n\n  scope.setCurrentVariant(Number(params.variantId));\n\n  scope.product = resolvedProduct.data.data;\n}]);"
    },
    {
      "id": 111,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\variants\\variants.list.controller.js",
      "name": "./public/modules/data_dashboard/src/controllers/variants/variants.list.controller.js",
      "index": 111,
      "index2": 109,
      "size": 1981,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/variants/variants.list.controller.js"
        }
      ],
      "source": "'use strict';\n\nangular.module('DataDashboard').controller('ListVariantsController', ['$scope', '$marketcloud', '$routeParams', '$http', 'resolvedProduct', function (scope, $marketcloud, params, $http, resolvedProduct) {\n\n  scope.product = resolvedProduct.data.data;\n\n  // These cannot be touched\n  scope.variantDefiningProperties = {};\n\n  scope.deleteVariant = function (variant) {\n    return $http({\n      method: 'DELETE',\n      url: API_BASE_URL + '/products/' + scope.product.id + '/variants/' + variant.id,\n      headers: {\n        Authorization: window.public_key + ':' + window.token\n      }\n    }).then(function (response) {\n      notie.alert(1, 'Variant deleted', 1.5);\n      scope.product = response.data.data;\n    }).catch(function (response) {\n      notie.alert(3, 'An error has occurred, please try again.', 1.5);\n    });\n  };\n\n  scope.clone = function (variant) {\n    var variantToSave = angular.copy(variant);\n    // Removing useless stuff in the variant\n    delete variantToSave['id'];\n\n    return $http({\n      method: 'POST',\n      url: API_BASE_URL + '/products/' + scope.product.id + '/variants',\n      data: variantToSave,\n      headers: {\n        Authorization: window.public_key + ':' + window.token\n      }\n    }).then(function (response) {\n      notie.alert(1, \"Variant successfully cloned\", 2);\n    }).catch(function (response) {\n      notie.alert(2, \"An error has occurred, please try again\", 2);\n    });\n  };\n\n  scope.filterVariantProps = function (o) {\n    var p = {};\n    for (var k in o) {\n      // if its not an inherited property, then it's a variant property name\n      if (scope.product.variantsDefinition.hasOwnProperty(k)) {\n        p[k] = k + ': ' + String(o[k]);\n      }\n    }\n    return p;\n\n    // return o\n  };\n\n  scope.getVariantStyle = function (i) {\n    var r = [{\n      'color': '#c0392b'\n    }, {\n      'color': '#27ae60'\n    }, {\n      'color': '#2c3e50'\n    }, {\n      'color': '#d35400'\n    }];\n    return r[i % r.length];\n  };\n}]);"
    },
    {
      "id": 112,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\controllers\\webhooks.js",
      "name": "./public/modules/data_dashboard/src/controllers/webhooks.js",
      "index": 112,
      "index2": 110,
      "size": 2663,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./controllers/webhooks.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.controller('WebhooksController', ['$scope', '$http', '$location', 'webhooks', function (scope, http, location, webhooks) {\n\n\tscope.mode = null;\n\n\tscope.webhooks = [{\n\t\tevent: 'products.create',\n\t\tmethod: 'POST',\n\t\turl: 'mybackend.herokuapp.com/newproduct',\n\t\theaders: {}\n\t}];\n\n\tscope.webhooks = webhooks.data.data;\n\n\tscope.events = ['products.create', 'products.delete', 'products.update', 'brands.create', 'brands.delete', 'brands.update', 'categories.create', 'categories.delete', 'categories.update', 'orders.create', 'orders.delete', 'orders.update', 'carts.create', 'carts.delete', 'carts.update', 'payments.create', 'payments.delete', 'payments.update', 'shippings.create', 'shippings.delete', 'shippings.update'];\n\tscope.load = function () {\n\t\thttp({\n\t\t\tmethod: 'GET',\n\t\t\turl: '/applications/' + window.current_application.id + '/webhooks'\n\t\t}).then(function (response) {\n\t\t\tscope.webhooks = response.data.data;\n\t\t}).catch(function (response) {\n\t\t\tnotie.alert(2, 'An error has occurred while reloading webhooks.', 1);\n\t\t});\n\t};\n\n\tscope.edit = function (hook) {\n\t\tscope.newWebhook = hook;\n\t\tscope.showUpdateModal();\n\t};\n\tscope.showUpdateModal = function () {\n\t\tscope.mode = 'update';\n\t\t$('#newWebhookModal').modal('show');\n\t};\n\n\tscope.showCreateModal = function () {\n\t\tscope.mode = 'create';\n\t\t$('#newWebhookModal').modal('show');\n\t};\n\n\tscope.saveWebhook = function () {\n\t\thttp({\n\t\t\tmethod: 'POST',\n\t\t\turl: '/applications/' + window.current_application.id + '/webhooks',\n\t\t\tdata: scope.newWebhook\n\t\t}).then(function (response) {\n\t\t\tnotie.alert(1, 'Webhook correctly created', 1);\n\t\t\tscope.newWebhook = {};\n\t\t\t$('#newWebhookModal').modal('hide');\n\t\t\tscope.load();\n\t\t}).catch(function (response) {\n\t\t\tnotie.alert(3, 'An error has occurred, webhook not created', 1);\n\t\t\tscope.newWebhook = {};\n\t\t});\n\t};\n\n\tscope.updateWebhook = function () {\n\t\thttp({\n\t\t\tmethod: 'PUT',\n\t\t\turl: '/applications/' + window.current_application.id + '/webhooks/' + scope.newWebhook.id,\n\t\t\tdata: scope.newWebhook\n\t\t}).then(function (response) {\n\t\t\tnotie.alert(1, 'Webhook correctly updated', 1);\n\t\t\tscope.newWebhook = {};\n\t\t}).catch(function (response) {\n\t\t\tnotie.alert(3, 'An error has occurred, webhook not updated', 1);\n\t\t\tscope.newWebhook = {};\n\t\t});\n\t};\n\n\tscope.delete = function (hook) {\n\t\thttp({\n\t\t\tmethod: 'DELETE',\n\t\t\turl: '/applications/' + window.current_application.id + '/webhooks/' + hook.id\n\t\t}).then(function (response) {\n\t\t\tnotie.alert(1, 'Webhook correctly deleted', 1);\n\t\t\tscope.load();\n\t\t}).catch(function (response) {\n\t\t\tnotie.alert(3, 'An error has occurred, webhook not deleted', 1);\n\t\t});\n\t};\n}]);"
    },
    {
      "id": 113,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\directives\\avatar.directive.js",
      "name": "./public/modules/data_dashboard/src/directives/avatar.directive.js",
      "index": 113,
      "index2": 111,
      "size": 10137,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./directives/avatar.directive.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\n\napp.directive('avatar', [function () {\n\n    return {\n        restrict: 'AE',\n        replace: true,\n        transclude: true,\n        scope: {\n            initials: '@initials',\n            width: '@width',\n            bgcolor: '@bgColor',\n            textColor: '@textColor',\n            wrapper: '=wrapper',\n            pictureResolution: '@pictureResolution',\n            pixelated: '=pixelated',\n            roundShape: '=roundShape',\n            class: '@class',\n            imgClass: '@imgClass',\n            style: '@style',\n            string: '@string',\n            cornerRadius: '@cornerRadius',\n            pictureFormat: '@pictureFormat',\n            colorsPalette: '=colorsPalette',\n            autoColor: '=autoColor',\n            fontWeight: '@fontWeight',\n            fontScale: '@fontScale',\n            textShadow: '=textShadow',\n            bind: '=bind',\n            maxLength: '@maxLength',\n            upperCase: '=upperCase'\n        },\n        link: function link(scope, element, attrs) {\n\n            var _long = 45,\n                _picture_resolution = 256,\n                _wrapper = true,\n                _str = \"\",\n                //scope.initials || \"\",\n            _bgcolor = \"#000\",\n                _textcolor = \"#fff\",\n                _pixelated = false,\n                _img_styling = \"vertical-align:top;\",\n                _roundShape = false,\n                _wrapper_styling = \"border-radius:0; display:block; overflow:hidden;\",\n                _extra_classes = \"\",\n                _extra_img_classes = \"\",\n                _extra_styles = \"\",\n                _corner_radius = \"0\",\n                _picture_format = \"png\",\n                _colors_palette = [\"#bdc3c7\", \"#6f7b87\", \"#2c3e50\", \"#2f3193\", \"#662d91\", \"#922790\", \"#ec2176\", \"#ed1c24\", \"#f36622\", \"#f8941e\", \"#fab70f\", \"#fdde00\", \"#d1d219\", \"#8ec73f\", \"#00a650\", \"#00aa9c\", \"#00adef\", \"#0081cd\", \"#005bab\"],\n                _autoColor = false,\n                _font_weight = 100,\n                _font_scale = 100,\n                _text_shadow = false,\n                _bind = false,\n                _img_width = \"100%\",\n                _upperCase = false;\n\n            // We randomize the bgcolor\n            var mc_palette = ['#1abc9c', '#16a085', '#f1c40f', '#f39c12', '#2ecc71', '#27ae60', '#27ae60', '#e67e22', '#d35400', '#3498db', '#2980b9', '#c0392b', '#e74c3c', '#9b59b6', '#8e44ad'];\n\n            if (scope.initials.length === 0) scope.initials = \"??\";\n\n            var dict = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y'];\n\n            var position = dict.indexOf(scope.initials.substr(0, 1).toLowerCase());\n\n            var chosenColorPosition = position % mc_palette.length;\n\n            if (chosenColorPosition === -1) chosenColorPosition = 0;\n\n            var chosenColor = mc_palette[chosenColorPosition];\n\n            _bgcolor = chosenColor;\n\n            function checkValues() {\n\n                if (scope.bind != undefined) {\n                    _bind = scope.bind;\n                }\n\n                if (scope.textColor != undefined) {\n                    _textcolor = scope.textColor;\n                }\n\n                if (scope.pictureResolution != undefined) {\n                    _picture_resolution = scope.pictureResolution;\n                }\n\n                if (scope.width != undefined) {\n                    _long = scope.width;\n                }\n\n                if (scope.wrapper != undefined) {\n                    _wrapper = scope.wrapper;\n                    if (_wrapper === false) {\n                        _img_width = _long;\n                    }\n                }\n\n                if (scope.pixelated != undefined) {\n                    _pixelated = scope.pixelated;\n                    if (_pixelated === true) {\n                        _img_styling += \"image-rendering:pixelated; image-rendering:-moz-crisp-edges;\";\n                    }\n                }\n\n                if (scope.roundShape != undefined) {\n                    _roundShape = scope.roundShape;\n                    if (_roundShape) _wrapper_styling += \"border-radius: \" + _long + \"px;\";\n                } else {\n                    if (scope.cornerRadius != undefined) {\n                        _corner_radius = scope.cornerRadius;\n                        _wrapper_styling += \"border-radius: \" + _corner_radius + \"px;\";\n                    }\n                }\n\n                if (scope.class != undefined) {\n                    _extra_classes = scope.class;\n                }\n\n                if (scope.imgClass != undefined) {\n                    _extra_img_classes = scope.imgClass;\n                }\n\n                if (scope.style != undefined) {\n                    _extra_styles = scope.style;\n                }\n\n                if (scope.initials != undefined) {\n                    _str = scope.initials;\n                }\n\n                if (scope.string != undefined) {\n                    _str = getInitialsFromString(scope.string);\n                }\n\n                if (scope.maxLength != undefined) {\n                    _str = _str.substr(0, scope.maxLength);\n                }\n\n                if (scope.pictureFormat === 'jpeg') {\n                    _picture_format = \"jpeg\";\n                }\n\n                if (scope.colorsPalette != undefined) {\n                    _colors_palette = scope.colorsPalette;\n                }\n\n                if (scope.bgcolor != undefined) {\n                    _bgcolor = scope.bgcolor;\n                } else {\n\n                    if (scope.autoColor != undefined) {\n\n                        _autoColor = scope.autoColor;\n                        if (_autoColor === true) {\n                            var i,\n                                lon = _str.length,\n                                charIndex = 0,\n                                colorIndex;\n                            for (i = 0; i < lon; i++) {\n                                charIndex = _str.charCodeAt(i);\n                            }colorIndex = charIndex % _colors_palette.length;\n                            _bgcolor = _colors_palette[colorIndex];\n                        }\n                    }\n                }\n\n                if (scope.fontWeight != undefined) {\n                    _font_weight = scope.fontWeight;\n                }\n\n                if (scope.fontScale != undefined) {\n                    _font_scale = scope.fontScale;\n                }\n\n                if (scope.textShadow != undefined) {\n                    _text_shadow = scope.textShadow;\n                }\n\n                if (scope.upperCase === true) {\n                    _str = _str.toUpperCase();\n                }\n            }\n\n            function generateAvatar(name, w, h, bgcolor, textcolor, bgImage) {\n                var WIDTH = 256,\n                    HEIGHT = 256,\n                    canvas,\n                    ctx,\n                    _font_size;\n\n                if (w != undefined && w > 0) {\n                    if (h != undefined && h > 0) {\n                        WIDTH = w;\n                        HEIGHT = h;\n                    }\n                }\n\n                canvas = document.createElement('canvas');\n                canvas.id = \"ngAvatar-\" + Date.now();\n                canvas.width = WIDTH;\n                canvas.height = HEIGHT;\n\n                ctx = canvas.getContext('2d');\n                ctx.fillStyle = bgcolor;\n                ctx.fillRect(0, 0, WIDTH, HEIGHT);\n\n                _font_size = WIDTH / (2 / (_font_scale / 100));\n                ctx.font = _font_weight + \" \" + _font_size + \"px sans-serif\";\n\n                if (_text_shadow === true) {\n                    ctx.shadowColor = \"black\";\n                    ctx.shadowOffsetX = 0;\n                    ctx.shadowOffsetY = 0;\n                    ctx.shadowBlur = 5;\n                }\n\n                ctx.textAlign = \"center\";\n                ctx.fillStyle = textcolor;\n                //ctx.fillText(_str, WIDTH / 2, HEIGHT - (HEIGHT / 2) + ( _font_size / 3) + 5 );\n                ctx.fillText(_str, WIDTH / 2, HEIGHT - HEIGHT / 2 + _font_size / 3);\n\n                return canvas.toDataURL(\"image/\" + _picture_format);\n            }\n\n            function getInitialsFromString(str) {\n\n                var output = \"\",\n                    i = 0,\n                    str = str.split(\" \"),\n                    len = str.length;\n\n                for (i; i < len; i++) {\n                    if (str[i] != \"\") output += str[i][0];\n                } //.toUpperCase();\n                return output;\n            }\n\n            var currentElement = element;\n\n            function render() {\n                var imgData = generateAvatar(_str, _picture_resolution, _picture_resolution, _bgcolor, _textcolor, null);\n\n                var html = '';\n                if (_wrapper) html += '<div class=\"avatar-wrapper ' + _extra_classes + '\" style=\"' + _wrapper_styling + ' width:' + _long + 'px; height:' + _long + 'px; ' + _extra_styles + '\">';\n                html += '<img src=\"' + imgData + '\" class=\"avatar-picture ' + _extra_img_classes + '\" style=\"' + _img_styling + '\" width=\"' + _img_width + '\" height=\"\" />';\n                if (_wrapper) html += '</div>';\n\n                var replacementElement = angular.element(html);\n                currentElement.replaceWith(replacementElement);\n                currentElement = replacementElement;\n            }\n\n            checkValues();\n            if (_bind === true) {\n\n                scope.$watch('string', function (value) {\n\n                    checkValues();\n                    render();\n                });\n\n                scope.$watch('initials', function (value) {\n\n                    checkValues();\n                    render();\n                });\n\n                /*\r\n                scope.$watch( 'bgcolor', function ( value ) {\r\n                    checkValues();\r\n                    render();\r\n                });\r\n                */\n            } else {\n\n                render();\n            }\n        }\n    };\n}]);"
    },
    {
      "id": 114,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\directives\\contenteditable.directive.js",
      "name": "./public/modules/data_dashboard/src/directives/contenteditable.directive.js",
      "index": 114,
      "index2": 112,
      "size": 1119,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./directives/contenteditable.directive.js"
        }
      ],
      "source": "'use strict';\n\n(function (app) {\n  \"use strict\";\n\n  app.directive('contenteditable', function () {\n    return {\n      restrict: 'A', // only activate on element attribute\n      require: '?ngModel', // get a hold of NgModelController\n      link: function link(scope, element, attrs, ngModel) {\n        if (!ngModel) return; // do nothing if no ng-model\n\n        // Specify how UI should be updated\n        ngModel.$render = function () {\n          element.html(ngModel.$viewValue || '');\n        };\n\n        // Listen for change events to enable binding\n        element.on('blur keyup change', function () {\n          scope.$apply(read);\n        });\n        read(); // initialize\n\n        // Write data to the model\n        function read() {\n          var html = element.html();\n          // When we clear the content editable the browser leaves a <br> behind\n          // If strip-br attribute is provided then we strip this out\n          if (attrs.stripBr && html == '<br>') {\n            html = '';\n          }\n          ngModel.$setViewValue(html);\n        }\n      }\n    };\n  });\n})(angular.module('DataDashboard'));"
    },
    {
      "id": 115,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\directives\\dropdown.directive.js",
      "name": "./public/modules/data_dashboard/src/directives/dropdown.directive.js",
      "index": 115,
      "index2": 113,
      "size": 895,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./directives/dropdown.directive.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.directive('dropdown', function ($document) {\n        return {\n                restrict: \"C\",\n                link: function link(scope, elem, attr) {\n\n                        // Handling nested dropdowns\n                        angular.element('.dropdown-submenu > a.dropdown-submenu-toggle').on(\"click\", function (e) {\n\n                                // We get a pointer to the submenu\n                                var submenu = angular.element(this).next('ul');\n\n                                angular.element(submenu).toggle();\n\n                                // Preventing further event handling\n                                e.stopImmediatePropagation();\n                                e.stopPropagation();\n                                e.preventDefault();\n                        });\n                }\n        };\n});"
    },
    {
      "id": 116,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\directives\\fallback_src.js",
      "name": "./public/modules/data_dashboard/src/directives/fallback_src.js",
      "index": 116,
      "index2": 114,
      "size": 307,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./directives/fallback_src.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.directive('fallbackSrc', function () {\n\treturn {\n\t\tlink: function link(scope, element, attrs) {\n\t\t\telement.bind('error', function () {\n\t\t\t\tif (attrs.src !== attrs.fallbackSrc) {\n\t\t\t\t\tattrs.$set('src', attrs.fallbackSrc);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n});"
    },
    {
      "id": 117,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\directives\\fileModel.directive.js",
      "name": "./public/modules/data_dashboard/src/directives/fileModel.directive.js",
      "index": 117,
      "index2": 115,
      "size": 606,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./directives/fileModel.directive.js"
        }
      ],
      "source": "'use strict';\n\n(function (app) {\n  app.directive('fileModel', ['$parse', function ($parse) {\n    return {\n      restrict: 'A',\n      link: function link(scope, element, attrs) {\n        var model = $parse(attrs.fileModel);\n        var modelSetter = model.assign;\n\n        element.bind('change', function () {\n          scope.$apply(function () {\n            if (attrs.multiple) {\n              modelSetter(scope, element[0].files);\n            } else {\n              modelSetter(scope, element[0].files[0]);\n            }\n          });\n        });\n      }\n    };\n  }]);\n})(angular.module('DataDashboard'));"
    },
    {
      "id": 118,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\directives\\focusOnShow.directive.js",
      "name": "./public/modules/data_dashboard/src/directives/focusOnShow.directive.js",
      "index": 118,
      "index2": 116,
      "size": 573,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./directives/focusOnShow.directive.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.directive('focusOnShow', function ($timeout) {\n\treturn {\n\t\trestrict: 'A',\n\t\tlink: function link($scope, $element, $attr) {\n\t\t\tif ($attr.ngShow) {\n\t\t\t\t$scope.$watch($attr.ngShow, function (newValue) {\n\t\t\t\t\tif (newValue) {\n\t\t\t\t\t\t$timeout(function () {\n\t\t\t\t\t\t\t$element[0].focus();\n\t\t\t\t\t\t}, 0);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tif ($attr.ngHide) {\n\t\t\t\t$scope.$watch($attr.ngHide, function (newValue) {\n\t\t\t\t\tif (!newValue) {\n\t\t\t\t\t\t$timeout(function () {\n\t\t\t\t\t\t\t$element[0].focus();\n\t\t\t\t\t\t}, 0);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n});"
    },
    {
      "id": 119,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\directives\\money.directive.js",
      "name": "./public/modules/data_dashboard/src/directives/money.directive.js",
      "index": 119,
      "index2": 117,
      "size": 4958,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./directives/money.directive.js"
        }
      ],
      "source": "'use strict';\n\n(function () {\n  'use strict';\n\n  /**\r\n   * Heavily adapted from the `type=\"number\"` directive in Angular's\r\n   * /src/ng/directive/input.js\r\n   */\n\n  var NUMBER_REGEXP = /^\\s*(\\-|\\+)?(\\d+|(\\d*(\\.\\d*)))\\s*$/;\n  var DEFAULT_PRECISION = 4;\n\n  angular.module('DataDashboard').directive('money', [\"$parse\", function ($parse) {\n    function link(scope, el, attrs, ngModelCtrl) {\n      var minVal, maxVal, precision, lastValidViewValue;\n      var isDefined = angular.isDefined;\n      var isUndefined = angular.isUndefined;\n      var isNumber = angular.isNumber;\n\n      /**\r\n       * Returns a rounded number in the precision setup by the directive\r\n       * @param  {Number} num Number to be rounded\r\n       * @return {Number}     Rounded number\r\n       */\n      function round(num) {\n        var d = Math.pow(10, precision);\n        return Math.round(num * d) / d;\n      }\n\n      /**\r\n       * Returns a string that represents the rounded number\r\n       * @param  {Number} value Number to be rounded\r\n       * @return {String}       The string representation\r\n       */\n      function formatPrecision(value) {\n        return parseFloat(value).toFixed(precision);\n      }\n\n      function isPrecisionValid() {\n        return !isNaN(precision) && precision > -1;\n      }\n\n      function isValueValid(value) {\n        return angular.isNumber(value) && !isNaN(value);\n      }\n\n      function updateValuePrecision() {\n        var modelValue = ngModelCtrl.$modelValue;\n\n        if (isValueValid(modelValue) && isPrecisionValid()) {\n          ngModelCtrl.$modelValue = round(modelValue);\n          $parse(attrs.ngModel).assign(scope, ngModelCtrl.$modelValue);\n          changeViewValue(formatPrecision(modelValue));\n\n          // Save the rounded view value\n          lastValidViewValue = ngModelCtrl.$viewValue;\n        }\n      }\n\n      function changeViewValue(value) {\n        ngModelCtrl.$viewValue = value;\n        ngModelCtrl.$commitViewValue();\n        ngModelCtrl.$render();\n      }\n\n      ngModelCtrl.$parsers.push(function (value) {\n        if (ngModelCtrl.$isEmpty(value)) {\n          lastValidViewValue = value;\n          return null;\n        }\n\n        // Handle leading decimal point, like \".5\"\n        if (value.indexOf('.') === 0) {\n          value = '0' + value;\n        }\n\n        // Allow \"-\" inputs only when min < 0\n        if (value.indexOf('-') === 0) {\n          if (minVal >= 0) {\n            changeViewValue('');\n            return null;\n          } else if (value === '-' || value === '-.') {\n            return null;\n          }\n        }\n\n        if (NUMBER_REGEXP.test(value)) {\n          // Save as valid view value if it's a number\n          lastValidViewValue = value;\n          return parseFloat(value);\n        } else {\n          // Render the last valid input in the field\n          changeViewValue(lastValidViewValue);\n          return lastValidViewValue;\n        }\n      });\n\n      // Min validation\n      ngModelCtrl.$validators.min = function (value) {\n        return ngModelCtrl.$isEmpty(value) || isUndefined(minVal) || value >= minVal;\n      };\n      if (isDefined(attrs.min) || attrs.ngMin) {\n        attrs.$observe('min', function (val) {\n          if (isDefined(val) && !isNumber(val)) {\n            val = parseFloat(val, 10);\n          }\n          minVal = isNumber(val) && !isNaN(val) ? val : undefined;\n          ngModelCtrl.$validate();\n        });\n      } else {\n        minVal = 0;\n      }\n\n      // Max validation\n      if (isDefined(attrs.max) || attrs.ngMax) {\n        ngModelCtrl.$validators.max = function (value) {\n          return ngModelCtrl.$isEmpty(value) || isUndefined(maxVal) || value <= maxVal;\n        };\n\n        attrs.$observe('max', function (val) {\n          if (isDefined(val) && !isNumber(val)) {\n            val = parseFloat(val, 10);\n          }\n          maxVal = isNumber(val) && !isNaN(val) ? val : undefined;\n          ngModelCtrl.$validate();\n        });\n      }\n\n      // Round off (disabled by \"-1\")\n      if (isDefined(attrs.precision)) {\n        attrs.$observe('precision', function (value) {\n          precision = parseInt(value, 10);\n\n          updateValuePrecision();\n        });\n      } else {\n        precision = DEFAULT_PRECISION;\n      }\n\n      ngModelCtrl.$parsers.push(function (value) {\n        if (value) {\n          // Round off value to specified precision\n          value = isPrecisionValid() ? round(value) : value;\n        }\n        return value;\n      });\n\n      ngModelCtrl.$formatters.push(function (value) {\n        if (isDefined(value)) {\n          return isPrecisionValid() && isValueValid(value) ? formatPrecision(value) : value;\n        } else {\n          return '';\n        }\n      });\n\n      // Auto-format precision on blur\n      el.bind('blur', function () {\n        ngModelCtrl.$commitViewValue();\n        updateValuePrecision();\n      });\n    }\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: link\n    };\n  }]);\n})();"
    },
    {
      "id": 120,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\directives\\ng-thumb.directive.js",
      "name": "./public/modules/data_dashboard/src/directives/ng-thumb.directive.js",
      "index": 120,
      "index2": 118,
      "size": 1426,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./directives/ng-thumb.directive.js"
        }
      ],
      "source": "'use strict';\n\nangular.module('Marketcloud.Shared').directive('ngThumb', ['$window', function ($window) {\n\tvar helper = {\n\t\tsupport: !!($window.FileReader && $window.CanvasRenderingContext2D),\n\t\tisFile: function isFile(item) {\n\t\t\treturn angular.isObject(item) && item instanceof $window.File;\n\t\t},\n\t\tisImage: function isImage(file) {\n\t\t\tvar type = '|' + file.type.slice(file.type.lastIndexOf('/') + 1) + '|';\n\t\t\treturn '|jpg|png|jpeg|bmp|gif|'.indexOf(type) !== -1;\n\t\t}\n\t};\n\n\treturn {\n\t\trestrict: 'A',\n\t\ttemplate: '<canvas/>',\n\t\tlink: function link(scope, element, attributes) {\n\t\t\tif (!helper.support) return;\n\n\t\t\tvar params = scope.$eval(attributes.ngThumb);\n\n\t\t\tif (!helper.isFile(params.file)) return;\n\t\t\tif (!helper.isImage(params.file)) return;\n\n\t\t\tvar canvas = element.find('canvas');\n\t\t\tvar reader = new FileReader();\n\n\t\t\treader.onload = onLoadFile;\n\t\t\treader.readAsDataURL(params.file);\n\n\t\t\tfunction onLoadFile(event) {\n\t\t\t\tvar img = new Image();\n\t\t\t\timg.onload = onLoadImage;\n\t\t\t\timg.src = event.target.result;\n\t\t\t}\n\n\t\t\tfunction onLoadImage() {\n\t\t\t\tvar width = params.width || this.width / this.height * params.height;\n\t\t\t\tvar height = params.height || this.height / this.width * params.width;\n\t\t\t\tcanvas.attr({ width: width, height: height });\n\t\t\t\t//canvas.attr({ width: canvas.parent().width, height: canvas.parent().height });\n\t\t\t\tcanvas[0].getContext('2d').drawImage(this, 0, 0, width, height);\n\t\t\t}\n\t\t}\n\t};\n}]);"
    },
    {
      "id": 121,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\directives\\ng_enter.js",
      "name": "./public/modules/data_dashboard/src/directives/ng_enter.js",
      "index": 121,
      "index2": 119,
      "size": 366,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./directives/ng_enter.js"
        }
      ],
      "source": "'use strict';\n\n(function (app) {\n\tapp.directive('ngEnter', function () {\n\t\treturn function (scope, element, attrs) {\n\t\t\telement.bind('keydown keypress', function (event) {\n\t\t\t\tif (event.which === 13) {\n\t\t\t\t\tscope.$apply(function () {\n\t\t\t\t\t\tscope.$eval(attrs.ngEnter);\n\t\t\t\t\t});\n\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t});\n})(angular.module('DataDashboard'));"
    },
    {
      "id": 122,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\directives\\onChangeAsync.directive.js",
      "name": "./public/modules/data_dashboard/src/directives/onChangeAsync.directive.js",
      "index": 122,
      "index2": 120,
      "size": 365,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./directives/onChangeAsync.directive.js"
        }
      ],
      "source": "'use strict';\n\nangular.module('DataDashboard').directive('onChangeAsync', function ($timeout) {\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    link: function link(scope, element, attr, ctrl) {\n      ctrl.$viewChangeListeners.push(function () {\n        $timeout(function () {\n          scope.$eval(attr.onChangeAsync);\n        });\n      });\n    }\n  };\n});"
    },
    {
      "id": 123,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\directives\\onFileChange.directive.js",
      "name": "./public/modules/data_dashboard/src/directives/onFileChange.directive.js",
      "index": 123,
      "index2": 121,
      "size": 334,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./directives/onFileChange.directive.js"
        }
      ],
      "source": "'use strict';\n\n(function (app) {\n\n  app.directive('onFileChange', function () {\n    return {\n      restrict: 'A',\n      link: function link(scope, element, attrs) {\n        var onChangeHandler = scope.$eval(attrs.onFileChange);\n        element.bind('change', onChangeHandler);\n      }\n    };\n  });\n})(angular.module('DataDashboard'));"
    },
    {
      "id": 124,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\factories\\account.factory.js",
      "name": "./public/modules/data_dashboard/src/factories/account.factory.js",
      "index": 124,
      "index2": 122,
      "size": 1902,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./factories/account.factory.js"
        }
      ],
      "source": "'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n(function () {\n  'use strict';\n\n  angular.module('DataDashboard').factory('$account', ['$http', '$q', AccountFactory]);\n\n  /*\r\n   *   AngularJS Factory that handles writes and reads\r\n   *   for the account object.\r\n   *\r\n   *   This avoids the use of the window object;\r\n   *   \r\n   */\n  function AccountFactory($http, $q) {\n\n    // Container object we will return\n    var Factory = {};\n\n    // This holds the account data\n    //Factory.data = window.user\n    Factory.data = {};\n\n    /*\r\n     *  @param {string} key The name of the property to get\r\n     *  @return {Promise} Promised response\r\n     */\n    /*Factory.get = function() {\r\n      if (null === Factory.data) {\r\n        return $http({\r\n          method: 'GET',\r\n          url: '/account/get',\r\n        })\r\n        .then(function(response){\r\n          Factory.data = response.data.data;\r\n          return $q.when({data : Factory.data});\r\n        })\r\n      } else {\r\n        return $q.when({data : Factory.data});\r\n      }\r\n    }*/\n\n    /*\r\n     * @param {string} key The name of the property to get\r\n     */\n    Factory.get = function (key) {\n      if (key) return Factory.data[key];else return Factory.data;\n    };\n\n    /*\r\n     * @param {String} key The name of the property to set\r\n     * @param {Mixed} value The value of the property to set\r\n     */\n    Factory.set = function (key, value) {\n\n      if (\"string\" === typeof key && !!value) {\n        Factory.data[key] = value;\n      }\n\n      if (\"object\" === (typeof key === 'undefined' ? 'undefined' : _typeof(key)) && !value) {\n        Factory.data = key;\n      }\n    };\n\n    return Factory;\n  }\n})();"
    },
    {
      "id": 125,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\factories\\application.factory.js",
      "name": "./public/modules/data_dashboard/src/factories/application.factory.js",
      "index": 125,
      "index2": 123,
      "size": 1764,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./factories/application.factory.js"
        }
      ],
      "source": "'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n(function () {\n  'use strict';\n\n  angular.module('DataDashboard').factory('$application', ApplicationFactory);\n\n  /*\r\n   *   AngularJS Factory that handles writes and reads\r\n   *   for the application object.\r\n   *\r\n   *   This avoids the use of the window object;\r\n   *   \r\n   */\n  function ApplicationFactory() {\n\n    // Container object we will return\n    var Factory = {\n      data: {}\n    };\n\n    /*// This holds the application data\r\n    Factory.data = {};\r\n    */\n\n    /*\r\n     * @param {string} key The name of the property to get\r\n     */\n    Factory.get = function (key) {\n      if (key) return Factory.data[key];else return Factory.data;\n    };\n\n    /*\r\n     * @param {String} key The name of the property to set\r\n     * @param {Mixed} value The value of the property to set\r\n     */\n    Factory.set = function (key, value) {\n\n      if (\"string\" === typeof key && !!value) {\n        Factory.data[key] = value;\n      }\n\n      if (\"object\" === (typeof key === 'undefined' ? 'undefined' : _typeof(key)) && !value) {\n        Factory.data = key;\n      }\n    };\n\n    /*\r\n     * @return {Array<String>} Returns an array of locale codes.\r\n     */\n    Factory.getAvailableLocaleCodes = function () {\n\n      if (!Factory.data.locales) {\n        return [];\n      }\n\n      return Factory.data.locales.split(\",\").filter(function (localeCode) {\n        // When splitting an empty string, we get [\"\"]\n        return localeCode !== \"\";\n      });\n    };\n\n    return Factory;\n  }\n})();"
    },
    {
      "id": 126,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\factories\\cache.factory.js",
      "name": "./public/modules/data_dashboard/src/factories/cache.factory.js",
      "index": 126,
      "index2": 124,
      "size": 1124,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./factories/cache.factory.js"
        }
      ],
      "source": "'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('DataDashboard').factory('$cache', [CacheFactory]);\n\n  /*\r\n   *   AngularJS Factory that handles writes and reads\r\n   *   for the account object.\r\n   *\r\n   *   This avoids the use of the window object;\r\n   *   \r\n   */\n  function CacheFactory() {\n\n    // Container object we will return\n    var Factory = {};\n\n    // This holds the account data\n    //Factory.data = window.user\n    Factory.data = {};\n\n    Factory.set = function (key, value) {\n      this.data[key] = value;\n    };\n\n    Factory.get = function (key) {\n      return this.data[key];\n    };\n\n    Factory.del = function (key) {\n      delete this.data[key];\n    };\n\n    /*\r\n    *  @param {String} pattern\r\n      *  Deletes all keys matching pattern\r\n    */\n    Factory.delByPattern = function (pattern) {\n      for (var k in this.data) {\n        if (k.indexOf(pattern) > -1) {\n          console.info(\"Deleting cache for \" + k);\n          delete this.data[k];\n        }\n      }\n    };\n\n    Factory.has = function (key) {\n      return this.data.hasOwnProperty(key);\n    };\n\n    return Factory;\n  }\n})();"
    },
    {
      "id": 127,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\factories\\locales.factory.js",
      "name": "./public/modules/data_dashboard/src/factories/locales.factory.js",
      "index": 127,
      "index2": 125,
      "size": 5168,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./factories/locales.factory.js"
        }
      ],
      "source": "'use strict';\n\n(function () {\n\t'use strict';\n\n\tangular.module('DataDashboard').factory('LocalesFactory', LocalesFactory);\n\n\tfunction LocalesFactory($http) {\n\t\treturn {\n\t\t\t\"af-ZA\": {\n\t\t\t\t\"code\": \"af-ZA\",\n\t\t\t\t\"original\": \"Afrikaans\",\n\t\t\t\t\"name\": \"Afrikaans\"\n\t\t\t},\n\t\t\t\"ar\": {\n\t\t\t\t\"code\": \"ar\",\n\t\t\t\t\"original\": \"Ø§ÙØ¹Ø±Ø¨ÙØ©\",\n\t\t\t\t\"name\": \"Arabic\"\n\t\t\t},\n\t\t\t\"bg-BG\": {\n\t\t\t\t\"code\": \"bg-BG\",\n\t\t\t\t\"original\": \"ÐÑÐ»Ð³Ð°ÑÑÐºÐ¸\",\n\t\t\t\t\"name\": \"Bulgarian\"\n\t\t\t},\n\t\t\t\"ca-AD\": {\n\t\t\t\t\"code\": \"ca-AD\",\n\t\t\t\t\"original\": \"CatalÃ \",\n\t\t\t\t\"name\": \"Catalan\"\n\t\t\t},\n\t\t\t\"cs-CZ\": {\n\t\t\t\t\"code\": \"cs-CZ\",\n\t\t\t\t\"original\": \"ÄeÅ¡tina\",\n\t\t\t\t\"name\": \"Czech\"\n\t\t\t},\n\t\t\t\"cy-GB\": {\n\t\t\t\t\"code\": \"cy-GB\",\n\t\t\t\t\"original\": \"Cymraeg\",\n\t\t\t\t\"name\": \"Welsh\"\n\t\t\t},\n\t\t\t\"da-DK\": {\n\t\t\t\t\"code\": \"da-DK\",\n\t\t\t\t\"original\": \"Dansk\",\n\t\t\t\t\"name\": \"Danish\"\n\t\t\t},\n\t\t\t\"de-AT\": {\n\t\t\t\t\"code\": \"de-AT\",\n\t\t\t\t\"original\": \"Deutsch (Ãsterreich)\",\n\t\t\t\t\"name\": \"German (Austria)\"\n\t\t\t},\n\t\t\t\"de-CH\": {\n\t\t\t\t\"code\": \"de-CH\",\n\t\t\t\t\"original\": \"Deutsch (Schweiz)\",\n\t\t\t\t\"name\": \"German (Switzerland)\"\n\t\t\t},\n\t\t\t\"de-DE\": {\n\t\t\t\t\"code\": \"de-DE\",\n\t\t\t\t\"original\": \"Deutsch (Deutschland)\",\n\t\t\t\t\"name\": \"German (Germany)\"\n\t\t\t},\n\t\t\t\"el-GR\": {\n\t\t\t\t\"code\": \"el-GR\",\n\t\t\t\t\"original\": \"ÎÎ»Î»Î·Î½Î¹ÎºÎ¬\",\n\t\t\t\t\"name\": \"Greek\"\n\t\t\t},\n\t\t\t\"en-GB\": {\n\t\t\t\t\"code\": \"en-GB\",\n\t\t\t\t\"original\": \"English (UK)\",\n\t\t\t\t\"name\": \"English (UK)\",\n\t\t\t\t\"alpha2\": \"GB\"\n\t\t\t},\n\t\t\t\"en-US\": {\n\t\t\t\t\"code\": \"en-US\",\n\t\t\t\t\"original\": \"English (US)\",\n\t\t\t\t\"name\": \"English (US)\"\n\t\t\t},\n\t\t\t\"es-CL\": {\n\t\t\t\t\"code\": \"es-CL\",\n\t\t\t\t\"original\": \"EspaÃ±ol (Chile)\",\n\t\t\t\t\"name\": \"Spanish (Chile)\"\n\t\t\t},\n\t\t\t\"es-ES\": {\n\t\t\t\t\"code\": \"es-ES\",\n\t\t\t\t\"original\": \"EspaÃ±ol (EspaÃ±a)\",\n\t\t\t\t\"name\": \"Spanish (Spain)\"\n\t\t\t},\n\t\t\t\"es-MX\": {\n\t\t\t\t\"code\": \"es-MX\",\n\t\t\t\t\"original\": \"EspaÃ±ol (MÃ©xico)\",\n\t\t\t\t\"name\": \"Spanish (Mexico)\"\n\t\t\t},\n\t\t\t\"et-EE\": {\n\t\t\t\t\"code\": \"et-EE\",\n\t\t\t\t\"original\": \"Eesti\",\n\t\t\t\t\"name\": \"Estonian\"\n\t\t\t},\n\t\t\t\"eu\": {\n\t\t\t\t\"code\": \"eu\",\n\t\t\t\t\"original\": \"Euskara\",\n\t\t\t\t\"name\": \"Basque\"\n\t\t\t},\n\t\t\t\"fa-IR\": {\n\t\t\t\t\"code\": \"fa-IR\",\n\t\t\t\t\"original\": \"ÙØ§Ø±Ø³Û\",\n\t\t\t\t\"name\": \"Persian\"\n\t\t\t},\n\t\t\t\"fi-FI\": {\n\t\t\t\t\"code\": \"fi-FI\",\n\t\t\t\t\"original\": \"Suomi\",\n\t\t\t\t\"name\": \"Finnish\"\n\t\t\t},\n\t\t\t\"fr-CA\": {\n\t\t\t\t\"code\": \"fr-CA\",\n\t\t\t\t\"original\": \"FranÃ§ais (Canada)\",\n\t\t\t\t\"name\": \"French (Canada)\"\n\t\t\t},\n\t\t\t\"fr-FR\": {\n\t\t\t\t\"code\": \"fr-FR\",\n\t\t\t\t\"original\": \"FranÃ§ais (France)\",\n\t\t\t\t\"name\": \"French (France)\"\n\t\t\t},\n\t\t\t\"he-IL\": {\n\t\t\t\t\"code\": \"he-IL\",\n\t\t\t\t\"original\": \"×¢××¨××ª\",\n\t\t\t\t\"name\": \"Hebrew\"\n\t\t\t},\n\t\t\t\"hr-HR\": {\n\t\t\t\t\"code\": \"hr-HR\",\n\t\t\t\t\"original\": \"Hrvatski\",\n\t\t\t\t\"name\": \"Croatian\"\n\t\t\t},\n\t\t\t\"hu-HU\": {\n\t\t\t\t\"code\": \"hu-HU\",\n\t\t\t\t\"original\": \"Magyar\",\n\t\t\t\t\"name\": \"Hungarian\"\n\t\t\t},\n\t\t\t\"id-ID\": {\n\t\t\t\t\"code\": \"id-ID\",\n\t\t\t\t\"original\": \"Bahasa Indonesia\",\n\t\t\t\t\"name\": \"Indonesian\"\n\t\t\t},\n\t\t\t\"is-IS\": {\n\t\t\t\t\"code\": \"is-IS\",\n\t\t\t\t\"original\": \"Ãslenska\",\n\t\t\t\t\"name\": \"Icelandic\"\n\t\t\t},\n\t\t\t\"it-IT\": {\n\t\t\t\t\"code\": \"it-IT\",\n\t\t\t\t\"original\": \"Italiano\",\n\t\t\t\t\"name\": \"Italian\"\n\t\t\t},\n\t\t\t\"ja-JP\": {\n\t\t\t\t\"code\": \"ja-JP\",\n\t\t\t\t\"original\": \"æ¥æ¬èª\",\n\t\t\t\t\"name\": \"Japanese\"\n\t\t\t},\n\t\t\t\"km-KH\": {\n\t\t\t\t\"code\": \"km-KH\",\n\t\t\t\t\"original\": \"áá¶áá¶ááááá\",\n\t\t\t\t\"name\": \"Khmer\"\n\t\t\t},\n\t\t\t\"ko-KR\": {\n\t\t\t\t\"code\": \"ko-KR\",\n\t\t\t\t\"original\": \"íêµ­ì´\",\n\t\t\t\t\"name\": \"Korean\"\n\t\t\t},\n\t\t\t\"lt-LT\": {\n\t\t\t\t\"code\": \"lt-LT\",\n\t\t\t\t\"original\": \"LietuviÅ³\",\n\t\t\t\t\"name\": \"Lithuanian\"\n\t\t\t},\n\t\t\t\"lv-LV\": {\n\t\t\t\t\"code\": \"lv-LV\",\n\t\t\t\t\"original\": \"LatvieÅ¡u\",\n\t\t\t\t\"name\": \"Latvian\"\n\t\t\t},\n\t\t\t\"mn-MN\": {\n\t\t\t\t\"code\": \"mn-MN\",\n\t\t\t\t\"original\": \"ÐÐ¾Ð½Ð³Ð¾Ð»\",\n\t\t\t\t\"name\": \"Mongolian\"\n\t\t\t},\n\t\t\t\"nb-NO\": {\n\t\t\t\t\"code\": \"nb-NO\",\n\t\t\t\t\"original\": \"Norsk bokmÃ¥l\",\n\t\t\t\t\"name\": \"Norwegian (BokmÃ¥l)\"\n\t\t\t},\n\t\t\t\"nl-NL\": {\n\t\t\t\t\"code\": \"nl-NL\",\n\t\t\t\t\"original\": \"Nederlands\",\n\t\t\t\t\"name\": \"Dutch\"\n\t\t\t},\n\t\t\t\"nn-NO\": {\n\t\t\t\t\"code\": \"nn-NO\",\n\t\t\t\t\"original\": \"Norsk nynorsk\",\n\t\t\t\t\"name\": \"Norwegian (Nynorsk)\"\n\t\t\t},\n\t\t\t\"pl-PL\": {\n\t\t\t\t\"code\": \"pl-PL\",\n\t\t\t\t\"original\": \"Polski\",\n\t\t\t\t\"name\": \"Polish\"\n\t\t\t},\n\t\t\t\"pt-BR\": {\n\t\t\t\t\"code\": \"pt-BR\",\n\t\t\t\t\"original\": \"PortuguÃªs (Brasil)\",\n\t\t\t\t\"name\": \"Portuguese (Brazil)\"\n\t\t\t},\n\t\t\t\"pt-PT\": {\n\t\t\t\t\"code\": \"pt-PT\",\n\t\t\t\t\"original\": \"PortuguÃªs (Portugal)\",\n\t\t\t\t\"name\": \"Portuguese (Portugal)\"\n\t\t\t},\n\t\t\t\"ro-RO\": {\n\t\t\t\t\"code\": \"ro-RO\",\n\t\t\t\t\"original\": \"RomÃ¢nÄ\",\n\t\t\t\t\"name\": \"Romanian\"\n\t\t\t},\n\t\t\t\"ru-RU\": {\n\t\t\t\t\"code\": \"ru-RU\",\n\t\t\t\t\"original\": \"Ð ÑÑÑÐºÐ¸Ð¹\",\n\t\t\t\t\"name\": \"Russian\"\n\t\t\t},\n\t\t\t\"sk-SK\": {\n\t\t\t\t\"code\": \"sk-SK\",\n\t\t\t\t\"original\": \"SlovenÄina\",\n\t\t\t\t\"name\": \"Slovak\"\n\t\t\t},\n\t\t\t\"sl-SI\": {\n\t\t\t\t\"code\": \"sl-SI\",\n\t\t\t\t\"original\": \"SlovenÅ¡Äina\",\n\t\t\t\t\"name\": \"Slovenian\"\n\t\t\t},\n\t\t\t\"sr-RS\": {\n\t\t\t\t\"code\": \"sr-RS\",\n\t\t\t\t\"original\": \"Ð¡ÑÐ¿ÑÐºÐ¸ / Srpski\",\n\t\t\t\t\"name\": \"Serbian\"\n\t\t\t},\n\t\t\t\"sv-SE\": {\n\t\t\t\t\"code\": \"sv-SE\",\n\t\t\t\t\"original\": \"Svenska\",\n\t\t\t\t\"name\": \"Swedish\"\n\t\t\t},\n\t\t\t\"th-TH\": {\n\t\t\t\t\"code\": \"th-TH\",\n\t\t\t\t\"original\": \"à¹à¸à¸¢\",\n\t\t\t\t\"name\": \"Thai\"\n\t\t\t},\n\t\t\t\"tr-TR\": {\n\t\t\t\t\"code\": \"tr-TR\",\n\t\t\t\t\"original\": \"TÃ¼rkÃ§e\",\n\t\t\t\t\"name\": \"Turkish\"\n\t\t\t},\n\t\t\t\"uk-UA\": {\n\t\t\t\t\"code\": \"uk-UA\",\n\t\t\t\t\"original\": \"Ð£ÐºÑÐ°ÑÐ½ÑÑÐºÐ°\",\n\t\t\t\t\"name\": \"Ukrainian\"\n\t\t\t},\n\t\t\t\"vi-VN\": {\n\t\t\t\t\"code\": \"vi-VN\",\n\t\t\t\t\"original\": \"Tiáº¿ng Viá»t\",\n\t\t\t\t\"name\": \"Vietnamese\"\n\t\t\t},\n\t\t\t\"zh-CN\": {\n\t\t\t\t\"code\": \"zh-CN\",\n\t\t\t\t\"original\": \"ä¸­æ (ä¸­å½å¤§é)\",\n\t\t\t\t\"name\": \"Chinese (PRC)\"\n\t\t\t},\n\t\t\t\"zh-TW\": {\n\t\t\t\t\"code\": \"zh-TW\",\n\t\t\t\t\"original\": \"ä¸­æ (å°ç£)\",\n\t\t\t\t\"name\": \"Chinese (Taiwan)\"\n\t\t\t}\n\t\t};\n\t}\n})();"
    },
    {
      "id": 128,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\factories\\marketcloud.factory.js",
      "name": "./public/modules/data_dashboard/src/factories/marketcloud.factory.js",
      "index": 128,
      "index2": 126,
      "size": 6618,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./factories/marketcloud.factory.js"
        }
      ],
      "source": "'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n(function () {\n\t'use strict';\n\n\tfunction jsonToQueryString(json) {\n\t\treturn '?' + Object.keys(json).map(function (key) {\n\t\t\treturn encodeURIComponent(key) + '=' + encodeURIComponent(json[key]);\n\t\t}).join('&');\n\t}\n\n\tangular.module('DataDashboard').factory('$marketcloud', MarketcloudFactory);\n\n\tMarketcloudFactory.$inject = ['$http', '$q', '$cache', '$account', '$application'];\n\n\tfunction MarketcloudFactory($http, $q, $cache, $account, $application) {\n\n\t\tvar request = function request(method, endpoint, data, options) {\n\n\t\t\tvar role = $application.get('role');\n\n\t\t\t// Guests users cannot perform requests\n\t\t\tif (role === 'guest' && method !== \"GET\") {\n\t\t\t\tnotie.alert(2, \"Action not allowed since your role is 'guest'.\", 2);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar url = window.API_BASE_URL + '/' + endpoint;\n\n\t\t\tif (\"GET\" === method) {\n\t\t\t\tvar cacheKey = endpoint + jsonToQueryString(data || {});\n\t\t\t\t// We invoke cache only for GET requests\n\t\t\t\tif ($cache.has(cacheKey)) {\n\t\t\t\t\treturn $q.when($cache.get(cacheKey));\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar config = {\n\t\t\t\tmethod: method,\n\t\t\t\turl: url,\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t'Authorization': window.public_key + ':' + window.token\n\t\t\t\t}\n\t\t\t};\n\n\t\t\toptions = options || {};\n\n\t\t\tif ('GET' === method) config.params = data || {};else {\n\n\t\t\t\tconfig.data = data || {};\n\t\t\t}\n\n\t\t\treturn $http(config).then(function (response) {\n\n\t\t\t\tif ('GET' === method) {\n\t\t\t\t\t$cache.set(endpoint, response);\n\t\t\t\t}\n\n\t\t\t\tif ('PUT' === method || 'PATCH' === method) {\n\t\t\t\t\t// Devo invalidare la cache della risorsa e della collection\n\t\t\t\t\t// ex /resource/:id\n\t\t\t\t\t//  /resource/:id/subresources\n\t\t\t\t\t// /resource\n\t\t\t\t\t// Endpoint Ã¨ qualcosa del tipo sopra,\n\n\t\t\t\t\tvar deletionPattern = endpoint.split('/');\n\t\t\t\t\tdeletionPattern = deletionPattern[0];\n\t\t\t\t\t$cache.delByPattern(deletionPattern); // Invalidating GET cache to this resource\n\t\t\t\t}\n\n\t\t\t\tif ('POST' === method) {\n\t\t\t\t\t$cache.delByPattern(endpoint); // Invalidating LIST requests to this resource\n\t\t\t\t\t//Also for parent resource\n\t\t\t\t}\n\n\t\t\t\tif ('DELETE' === method) {\n\t\t\t\t\tvar deletionPattern = endpoint.split('/');\n\t\t\t\t\tdeletionPattern = deletionPattern[0];\n\t\t\t\t\t$cache.delByPattern(deletionPattern); // Invalidating LIST requests to this resource\n\t\t\t\t\t//Also for parent resource\n\t\t\t\t}\n\n\t\t\t\treturn $q.when(response);\n\t\t\t}).catch(function (error) {\n\t\t\t\treturn $q.reject(error);\n\t\t\t});\n\t\t};\n\n\t\tvar resourceFactory = function resourceFactory(resource_name) {\n\t\t\treturn {\n\t\t\t\tlist: function list(query, options) {\n\t\t\t\t\tquery = query || {};\n\t\t\t\t\tif ('object' !== (typeof query === 'undefined' ? 'undefined' : _typeof(query))) throw new Error('$marketcloud.' + resource_name + '.list(query) query must be object');\n\t\t\t\t\treturn request('GET', resource_name, query, options);\n\t\t\t\t},\n\t\t\t\tgetById: function getById(id, options) {\n\t\t\t\t\tif (isNaN(id)) throw new Error('$marketcloud.' + resource_name + '.getById(id) id must be an integer number');\n\t\t\t\t\treturn request('GET', resource_name + '/' + id, options);\n\t\t\t\t},\n\t\t\t\tsave: function save(data, options) {\n\t\t\t\t\tif ('object' !== (typeof data === 'undefined' ? 'undefined' : _typeof(data))) throw new Error('$marketcloud.' + resource_name + '.save(data) data must be object');\n\t\t\t\t\treturn request('POST', resource_name, data, options);\n\t\t\t\t},\n\t\t\t\tupdate: function update(id, data, options) {\n\t\t\t\t\tif (isNaN(id)) throw new Error('$marketcloud.' + resource_name + '.update(id,data) id must be an integer number');\n\t\t\t\t\treturn request('PUT', resource_name + '/' + id, data, options);\n\t\t\t\t},\n\t\t\t\tdelete: function _delete(id, options) {\n\t\t\t\t\tif (isNaN(id)) throw new Error('$marketcloud.' + resource_name + '.delete(id) id must be an integer number');\n\t\t\t\t\treturn request('DELETE', resource_name + '/' + id, options);\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\n\t\tvar subResourceFactory = function subResourceFactory(resource_name, sub_resource_name) {\n\t\t\treturn {\n\t\t\t\tlist: function list(parent_id, query, options) {\n\t\t\t\t\tquery = query || {};\n\t\t\t\t\tif ('object' !== (typeof query === 'undefined' ? 'undefined' : _typeof(query))) throw new Error('$marketcloud.' + resource_name + '.' + sub_resource_name + '.list(query) query must be object');\n\t\t\t\t\treturn request('GET', resource_name + '/' + parent_id + '/' + sub_resource_name, query, options);\n\t\t\t\t},\n\t\t\t\tgetById: function getById(parent_id, id, options) {\n\t\t\t\t\tif (isNaN(id)) throw new Error('$marketcloud.' + resource_name + '.' + sub_resource_name + '.getById(id) id must be an integer number');\n\t\t\t\t\treturn request('GET', resource_name + '/' + parent_id + '/' + sub_resource_name + '/' + id, options);\n\t\t\t\t},\n\t\t\t\tsave: function save(parent_id, data, options) {\n\t\t\t\t\tif ('object' !== (typeof data === 'undefined' ? 'undefined' : _typeof(data))) throw new Error('$marketcloud.' + resource_name + '.' + sub_resource_name + '.save(data) data must be object, got ' + (typeof data === 'undefined' ? 'undefined' : _typeof(data)));\n\t\t\t\t\treturn request('POST', resource_name + '/' + parent_id + '/' + sub_resource_name, data, options);\n\t\t\t\t},\n\t\t\t\tupdate: function update(parent_id, id, data, options) {\n\t\t\t\t\tif (isNaN(id)) throw new Error('$marketcloud.' + resource_name + '.' + sub_resource_name + '.update(id,data) id must be an integer number');\n\t\t\t\t\treturn request('PUT', resource_name + '/' + parent_id + '/' + sub_resource_name + '/' + id, data, options);\n\t\t\t\t},\n\t\t\t\tdelete: function _delete(parent_id, id, options) {\n\t\t\t\t\tif (isNaN(id)) throw new Error('$marketcloud.' + resource_name + '.' + sub_resource_name + '.delete(id) id must be an integer number');\n\t\t\t\t\treturn request('DELETE', resource_name + '/' + parent_id + '/' + sub_resource_name + '/' + id, options);\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\n\t\tvar resources = ['addresses', 'brands', 'categories', 'collections', 'events', 'coupons', 'carts', 'products', 'orders', 'invoices', 'users', 'contents', 'staticContents', 'media', 'notifications', 'promotions', 'shippings', 'payments', 'taxes', 'paymentMethods', 'variables'];\n\n\t\tvar factory = {};\n\n\t\tresources.forEach(function (resource_name) {\n\t\t\tfactory[resource_name] = resourceFactory(resource_name);\n\t\t});\n\n\t\tfactory.variants = subResourceFactory('products', 'variants');\n\n\t\tfactory.refunds = subResourceFactory('orders', 'refunds');\n\t\tfactory.payments = subResourceFactory('orders', 'payments');\n\t\tfactory.shipments = subResourceFactory('orders', 'shipments');\n\n\t\treturn factory;\n\t}\n})();"
    },
    {
      "id": 129,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\factories\\models.factory.js",
      "name": "./public/modules/data_dashboard/src/factories/models.factory.js",
      "index": 129,
      "index2": 127,
      "size": 22810,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./factories/models.factory.js"
        }
      ],
      "source": "'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('DataDashboard').factory('$models', ['$http', '$q', ModelsFactory]);\n\n  /*\r\n   *   AngularJS Factory that handles writes and reads\r\n   *   for the application object.\r\n   *\r\n   *   This avoids the use of the window object;\r\n   *   \r\n   */\n  function ModelsFactory($http, $q) {\n\n    if (!Schematic) throw new Error('Models factory requires Schematic library');\n\n    // Container object we will return\n    var Types = {};\n\n    Types.Notifications = {};\n\n    Types.Notifications[\"orders.create\"] = new Schematic.Schema('orders.create', {\n      type: {\n        required: true,\n        type: \"string\"\n      },\n      application: {\n        required: true,\n        type: 'object'\n      },\n      order: {\n        required: true,\n        type: 'object'\n      }\n    });\n    Types.Notifications[\"orders.update.processing\"] = new Schematic.Schema('orders.update.processing', {\n      type: {\n        required: true,\n        type: \"string\"\n      },\n      application: {\n        required: true,\n        type: 'object'\n      },\n      order_id: {\n        required: true,\n        type: 'number'\n      }\n    });\n    Types.Notifications[\"orders.update.completed\"] = new Schematic.Schema('orders.update.completed', {\n      type: {\n        required: true,\n        type: \"string\"\n      },\n      application: {\n        required: true,\n        type: 'object'\n      },\n      order_id: {\n        required: true,\n        type: 'number'\n      }\n    });\n    Types.Notifications[\"users.create\"] = new Schematic.Schema('users.create', {\n      type: {\n        required: true,\n        type: \"string\"\n      },\n      application: {\n        required: true,\n        type: 'object'\n      },\n      user: {\n        required: true,\n        type: 'object'\n      }\n    });\n\n    Types.Bundle = new Schematic.Schema('Bundle', {\n      \"name\": {\n        type: \"string\",\n        min: 2,\n        max: 30,\n        required: true\n      },\n      \"description\": {\n        type: \"string\"\n      },\n      \"slug\": {\n        type: \"string\"\n      },\n      \"items\": {\n        type: \"array\",\n        elements: {\n          type: \"number\"\n        },\n        required: true\n      },\n      \"price\": {\n        type: \"number\",\n        required: true\n      },\n      \"price_discount\": {\n        type: \"number\"\n      }\n    });\n    Types.Payment = new Schematic.Schema('Payment', {\n      payment_method_id: {\n        required: false,\n        type: \"number\"\n      },\n      method: {\n        required: true,\n        type: \"string\"\n      },\n      order_id: {\n        type: \"number\",\n        required: true\n      },\n      amount: {\n        type: \"number\",\n        required: true\n      },\n      data: {\n        type: \"object\"\n      }\n    });\n    Types.PaymentMethod = new Schematic.Schema('PaymentMethod', {\n      name: {\n        type: \"string\",\n        required: true,\n        min: 1,\n        max: 100\n      },\n      description: {\n        type: \"string\",\n        min: 0,\n        max: 500\n      },\n      cost_type: {\n        type: \"string\",\n        required: true,\n        whitelist: ['no_cost', 'fixed_fee', 'percentage_fee', 'fixed_plus_percentage']\n      },\n      fixed_fee: {\n        type: \"number\",\n        min: 0\n      },\n      percentage_fee: {\n        type: \"number\",\n        min: 0\n      }\n    });\n    Types.PromotionCondition = new Schematic.Schema('PromotionCondition', {\n      \"type\": {\n        type: \"string\",\n        whitelist: ['MIN_NUMBER_OF_PRODUCTS', 'MIN_CART_VALUE', 'CART_HAS_ITEM'],\n        required: true\n      },\n      \"value\": {\n        type: \"number\",\n        required: true\n      }\n    });\n    Types.PromotionEffect = new Schematic.Schema('PromotionEffect', {\n      \"type\": {\n        type: \"string\",\n        whitelist: ['CART_VALUE_PERCENTAGE_REDUCTION', 'CART_VALUE_NET_REDUCTION', 'CART_ITEMS_NET_REDUCTION', // price reduction to apply on each item price\n        'CART_ITEMS_PERCENTAGE_REDUCTION', // price reduction to apply on each item price\n        'FREE_SHIPPING'],\n        required: true\n      },\n      \"value\": {\n        required: true\n      }\n    });\n\n    Types.Promotion = new Schematic.Schema('Promotion', {\n      \"name\": {\n        type: \"string\",\n        min: 2,\n        max: 130,\n        required: true\n      },\n      \"active\": {\n        type: \"boolean\",\n        required: true\n      },\n      \"conditions\": {\n        type: 'array',\n        elements: {\n          type: Types.PromotionCondition\n        }\n      },\n      \"effects\": {\n        type: 'array',\n        required: true,\n        elements: {\n          type: Types.PromotionEffect\n        }\n      }\n    });\n\n    Types.BundleEntry = new Schematic.Schema('BundleEntry', {\n      \"product_id\": {\n        type: \"number\",\n        required: true\n      },\n      \"bundle_price\": {},\n      \"variant_id\": {\n        type: \"number\"\n      }\n    });\n\n    Types.Bundle = new Schematic.Schema('Bundle', {\n      name: {\n        type: \"string\",\n        min: 1,\n        max: 140,\n        required: true\n      },\n      slug: {\n        type: \"string\",\n        max: 500\n      },\n      description: {\n        type: \"string\"\n      },\n      items: {\n        type: \"array\",\n        required: true,\n        elements: {\n          type: Types.BundleEntry\n        }\n      },\n      pricing_rule: {\n        type: \"string\",\n        whitelist: [\"fixed\", \"inherit\"]\n      }\n    });\n\n    Types.Category = new Schematic.Schema('Category', {\n      \"name\": {\n        type: \"string\",\n        min: 2,\n        max: 30,\n        required: true\n      },\n      \"description\": {\n        type: \"string\",\n        max: 1400\n      },\n      \"url\": {\n        type: \"string\"\n      },\n      \"image_url\": {\n        type: \"string\"\n      },\n      \"parent_id\": {\n        type: \"number\",\n        required: false\n      }\n\n    });\n\n    Types.CategoryNew = new Schematic.Schema('Category', {\n      \"name\": {\n        type: \"string\",\n        min: 2,\n        max: 30,\n        required: true\n      },\n      \"description\": {\n        type: \"string\",\n        max: 1400\n      },\n      \"url\": {\n        type: \"string\"\n      },\n      \"image_url\": {\n        type: \"string\"\n      },\n      \"path\": {\n        type: \"string\",\n        required: true\n      },\n      \"parent\": {\n        type: \"string\",\n        required: true\n      }\n    });\n\n    Types.CollectionEntry = new Schematic.Schema('CollectionEntry', {\n      \"product_id\": {\n        type: \"number\",\n        required: true\n      },\n      \"variant_id\": {\n        type: \"number\"\n      }\n    });\n\n    Types.Collection = new Schematic.Schema('Collection', {\n      name: {\n        type: \"string\",\n        min: 1,\n        max: 140,\n        required: true\n      },\n      slug: {\n        type: \"string\",\n        max: 500\n      },\n      description: {\n        type: \"string\"\n      },\n      items: {\n        type: \"array\",\n        required: true,\n        elements: {\n          type: Types.CollectionEntry\n        }\n      }\n    });\n\n    Types.ContentAuthor = new Schematic.Schema('ContentAuthor', {\n      image_url: {\n        type: \"string\"\n      },\n      name: {\n        type: \"string\"\n      },\n      id: {\n        type: \"number\"\n      }\n    });\n\n    Types.Content = new Schematic.Schema('Content', {\n      title: {\n        type: \"string\",\n        required: true\n      },\n      text: {\n        type: \"string\",\n        required: true\n      },\n      author: {\n        type: \"object\"\n      },\n      date: {\n        type: \"string\"\n      },\n      published: {\n        type: \"boolean\"\n      }\n    });\n\n    Types.StaticContent = new Schematic.Schema('StaticContent', {\n      name: {\n        type: \"string\",\n        required: true,\n        min: 2\n      },\n      content: {\n        type: \"string\",\n        required: true\n      },\n      published: {\n        type: \"boolean\"\n      }\n    });\n\n    Types.CartEntry = new Schematic.Schema('CartEntry', {\n      \"product_id\": {\n        type: \"number\",\n        required: true\n      },\n      \"quantity\": {\n        type: \"number\",\n        required: true,\n        min: 0\n      },\n      \"variant_id\": {\n        type: \"number\"\n      }\n    });\n    Types.CartUpdateEntry = new Schematic.Schema('CartUpdateEntry', {\n      \"product_id\": {\n        type: \"number\",\n        required: true\n      },\n      \"quantity\": {\n        type: \"number\",\n        min: 0\n      },\n      \"variant_id\": {\n        type: \"number\"\n      }\n    });\n\n    Types.Cart = new Schematic.Schema('Cart', {\n      \"items\": {\n        type: 'array',\n        elements: {\n          type: Types.CartEntry\n        },\n        required: true\n      },\n      \"user_id\": {\n        type: 'number'\n      }\n    });\n\n    Types.CartUpdate = new Schematic.Schema('CartUpdate', {\n      \"items\": {\n        type: \"array\",\n        elements: {\n          type: \"object\"\n        },\n        required: true\n      },\n      \"op\": {\n        type: \"string\",\n        whitelist: [\"add\", \"remove\", \"update\"]\n      }\n    });\n\n    Types.Coupon = new Schematic.Schema('Coupon', {\n      \"code\": {\n        type: \"string\",\n        min: \"1\",\n        max: \"30\",\n        required: true\n      },\n      \"name\": {\n        type: \"string\",\n        min: \"1\",\n        max: \"30\",\n        required: true\n      },\n      \"target_type\": {\n        type: \"string\",\n        whitelist: ['CART_COUPON', 'PRODUCT_COUPON', 'CATEGORY_COUPON', 'PRODUCTS_COUPON'],\n        required: true\n      },\n      \"target_id\": {\n        type: \"number\"\n      },\n      \"discount_type\": {\n        type: \"string\",\n        whitelist: ['NET_REDUCTION', 'PERCENTAGE_REDUCTION'],\n        required: true\n      },\n      \"discount_value\": {\n        type: \"number\",\n        min: 0,\n        required: true\n      },\n      \"active\": {\n        type: \"boolean\",\n        required: true\n      },\n      \"usages_left\": {\n        type: \"number\",\n        required: false\n      },\n      \"expiration_date\": {\n        type: \"string\",\n        required: false\n      }\n    });\n\n    Types.Brand = new Schematic.Schema('Brand', {\n      \"name\": {\n        type: \"string\",\n        min: 3,\n        max: 50,\n        required: true\n      },\n      \"description\": {\n        type: \"string\"\n      },\n      \"url\": {\n        type: \"string\"\n      },\n      \"image_url\": {\n        type: \"string\"\n      }\n    });\n\n    Types.File = new Schematic.Schema('File', {\n      file: {\n        type: \"string\",\n        required: true\n      },\n      filename: {\n        type: \"string\",\n        required: true\n      },\n      name: {\n        type: \"string\",\n        required: true\n      },\n      slug: {\n        type: \"string\",\n        max: 140\n      },\n      description: {\n        type: \"string\"\n      }\n    });\n\n    Types.Notification = new Schematic.Schema('Notification', {\n      event: {\n        type: \"string\",\n        required: true,\n        whitelist: ['custom', //Custom defined events, can only be sent programmaticaly\n        'order.create', // Sent automatically by the system\n        'order.paid', // Sent automatically by the system\n        'user.create' // Sent automatically by the system\n        ]\n      },\n      from_name: {\n        type: \"string\"\n      },\n      from_email: {\n        type: \"string\"\n      },\n      subject: {\n        type: \"string\"\n      }\n    });\n\n    Types.User = new Schematic.Schema('User', {\n      \"name\": {\n        type: \"string\",\n        min: 1,\n        max: 255\n      },\n      \"email\": {\n        type: \"string\",\n        min: 4,\n        max: 255\n      },\n      \"password\": {\n        type: \"string\",\n        min: 4,\n        max: 255\n      },\n      \"image_url\": {\n        type: \"string\"\n      }\n    });\n\n    Types.TaxRate = new Schematic.Schema('TaxRate', {\n      \"country\": {\n        type: \"string\",\n        required: true\n      },\n      \"state\": {\n        type: \"string\",\n        required: true\n      },\n      \"postcode\": {\n        type: \"string\",\n        required: true\n      },\n      \"city\": {\n        type: \"string\",\n        required: true\n      },\n      \"rate\": {\n        type: \"number\",\n        required: true,\n        min: 0,\n        max: 100\n      },\n      \"priority\": {\n        type: \"number\",\n        required: true,\n        min: 0\n      }\n    });\n    Types.Tax = new Schematic.Schema('Tax', {\n      \"name\": {\n        type: \"string\",\n        min: 3,\n        max: 30,\n        required: true\n      },\n      \"description\": {\n        type: \"string\",\n        max: 600\n      },\n      \"rates\": {\n        type: \"array\",\n        elements: {\n          type: Types.TaxRate\n        }\n      }\n    });\n    Types.Currency = new Schematic.Schema('Currency', {\n      \"name\": {\n        type: \"string\",\n        min: 3,\n        max: 30,\n        required: true\n      },\n      \"formatting\": {\n        type: \"string\",\n        min: 0,\n        max: 3,\n        required: true\n      }\n    });\n    Types.Product = new Schematic.Schema('Product', {\n      \"name\": {\n        type: \"string\",\n        required: true,\n        min: 2\n      },\n      \"type\": {\n        type: \"string\",\n        required: true,\n        whitelist: [\"simple_product\", \"product_with_variants\", \"grouped_product\", \"bundled_product\"]\n      },\n      \"category_id\": {\n        type: \"number\"\n      },\n      \"sku\": {\n        type: \"string\"\n      },\n      \"price\": {\n        type: \"number\",\n        required: true\n      },\n      \"slug\": {\n        type: \"string\"\n      },\n      \"stock_level\": {\n        type: \"number\",\n        min: 0\n      },\n      \"stock_type\": {\n        type: \"string\",\n        whitelist: [\"infinite\", \"track\", \"status\"],\n        required: true\n      },\n      \"stock_status\": {\n        type: \"string\",\n        whitelist: [\"in_stock\", \"out_of_stock\"]\n      },\n      \"description\": {\n        type: \"string\"\n      },\n      \"weigth\": {\n        type: \"number\"\n      },\n      \"height\": {\n        type: \"number\"\n      },\n      \"depth\": {\n        type: \"number\"\n      },\n      \"width\": {\n        type: \"number\"\n      },\n      \"brand_id\": {\n        type: \"number\"\n      },\n      \"store_id\": {\n        type: \"number\"\n      },\n      \"images\": {\n        type: \"array\"\n      },\n      \"published\": {\n        type: \"boolean\"\n      },\n      \"price_discount\": {\n        type: \"number\"\n      }\n    });\n\n    Types.Variant = new Schematic.Schema('Variant', {\n      variant_id: {\n        type: \"number\",\n        required: true\n      },\n      product_id: {\n        type: \"number\",\n        required: true\n      },\n      \"stock_level\": {\n        type: \"number\",\n        min: 0\n      },\n      \"stock_type\": {\n        type: \"string\",\n        whitelist: [\"infinite\", \"track\", \"status\"],\n        required: true\n      },\n      \"stock_status\": {\n        type: \"string\",\n        whitelist: [\"in_stock\", \"out_of_stock\"]\n      },\n      \"price\": {\n        type: \"number\",\n        required: true\n      }\n    });\n\n    Types.InvoiceLineItem = new Schematic.Schema('InvoiceLineItem', {\n      name: {\n        type: \"string\",\n        required: true,\n        min: 1,\n        max: 140\n      },\n      description: {\n        type: \"string\",\n        max: 500\n      },\n      price: {\n        type: \"number\",\n        required: true,\n        min: 0\n      },\n      quantity: {\n        type: \"number\",\n        required: true,\n        min: 0\n      }\n    });\n    Types.Invoice = new Schematic.Schema('Invoice', {\n      number: {\n        type: \"number\",\n        required: true\n      },\n      order_id: {\n        type: \"number\",\n        required: true\n      },\n      customer: {\n        type: \"object\",\n        required: true\n      },\n      company: {\n        type: \"object\",\n        required: true\n      },\n      lineItems: {\n        type: \"array\",\n        elements: {\n          type: Types.InvoiceLineItem\n        }\n      }\n    });\n    Types.GroupedProductEntry = new Schematic.Schema('GroupedProductEntry', {\n      \"product_id\": {\n        type: \"number\",\n        required: true\n      },\n      \"quantity\": {\n        type: \"number\",\n        required: true\n      }\n    });\n    Types.GroupedProduct = new Schematic.Schema('GroupedProduct', {\n      \"name\": {\n        type: \"string\",\n        required: true,\n        min: 2\n      },\n      \"category_id\": {\n        type: \"number\"\n      },\n      \"sku\": {\n        type: \"string\"\n      },\n      \"items\": {\n        type: \"array\",\n        elements: {\n          type: Types.GroupedProductEntry\n        },\n        min: 1\n      },\n      \"pricing_method\": {\n        type: \"string\",\n        whitelist: [\"dynamic_pricing\", \"fixed_pricing\"],\n        required: true\n      },\n      \"price\": {\n        type: \"number\"\n      },\n      \"price_discount\": {\n        type: \"number\"\n      },\n      \"slug\": {\n        type: \"string\"\n      },\n      \"description\": {\n        type: \"string\"\n      },\n      \"brand_id\": {\n        type: \"number\"\n      },\n      \"store_id\": {\n        type: \"number\"\n      },\n      \"images\": {\n        type: \"array\"\n      },\n      \"published\": {\n        type: \"boolean\"\n      },\n      \"type\": {\n        type: \"string\",\n        whitelist: [\"grouped_product\"]\n      }\n    });\n\n    Types.ProductWithVariants = new Schematic.Schema('Product', {\n      \"name\": {\n        type: \"string\",\n        required: true,\n        min: 2\n      },\n      \"category_id\": {\n        type: \"number\"\n      },\n      \"sku\": {\n        type: \"string\"\n      },\n      \"price\": {\n        type: \"number\",\n        required: true\n      },\n      \"stock_level\": {\n        type: \"number\",\n        min: 0\n      },\n      \"description\": {\n        type: \"string\"\n      },\n      \"weigth\": {\n        type: \"number\"\n      },\n      \"height\": {\n        type: \"number\"\n      },\n      \"width\": {\n        type: \"number\"\n      },\n      \"depth\": {\n        type: \"number\"\n      },\n      \"brand_id\": {\n        type: \"number\"\n      },\n      \"store_id\": {\n        type: \"number\"\n      },\n      \"images\": {\n        type: \"array\"\n      },\n      \"slug\": {\n        type: \"string\"\n      },\n      \"published\": {\n        type: \"boolean\"\n      }\n    });\n\n    Types.Order = new Schematic.Schema('Order', {\n      \"status\": {\n        type: \"string\",\n        whitelist: [\"created\", \"processing\", \"evaded\", \"shipped\"]\n      },\n      \"shipping_address_id\": {\n        type: \"number\"\n      },\n      \"billing_address_id\": {\n        type: \"number\"\n      },\n      \"items_total\": {\n        type: \"number\"\n      },\n      \"display_items_total\": {\n        type: \"string\"\n      },\n      \"total\": {\n        type: \"number\"\n      },\n      \"display_total\": {\n        type: \"string\"\n      },\n      \"items\": {\n        type: \"array\",\n        required: true\n      },\n      \"currency\": {\n        type: \"string\",\n        whitelist: [\"USD\", \"CAD\", \"EUR\", \"AED\", \"AFN\", \"ALL\", \"AMD\", \"ARS\", \"AUD\", \"AZN\", \"BAM\", \"BDT\", \"BGN\", \"BHD\", \"BIF\", \"BND\", \"BOB\", \"BRL\", \"BWP\", \"BYR\", \"BZD\", \"CDF\", \"CHF\", \"CLP\", \"CNY\", \"COP\", \"CRC\", \"CVE\", \"CZK\", \"DJF\", \"DKK\", \"DOP\", \"DZD\", \"EEK\", \"EGP\", \"ERN\", \"ETB\", \"GBP\", \"GEL\", \"GHS\", \"GNF\", \"GTQ\", \"HKD\", \"HNL\", \"HRK\", \"HUF\", \"IDR\", \"ILS\", \"INR\", \"IQD\", \"IRR\", \"ISK\", \"JMD\", \"JOD\", \"JPY\", \"KES\", \"KHR\", \"KMF\", \"KRW\", \"KWD\", \"KZT\", \"LBP\", \"LKR\", \"LTL\", \"LVL\", \"LYD\", \"MAD\", \"MDL\", \"MGA\", \"MKD\", \"MMK\", \"MOP\", \"MUR\", \"MXN\", \"MYR\", \"MZN\", \"NAD\", \"NGN\", \"NIO\", \"NOK\", \"NPR\", \"NZD\", \"OMR\", \"PAB\", \"PEN\", \"PHP\", \"PKR\", \"PLN\", \"PYG\", \"QAR\", \"RON\", \"RSD\", \"RUB\", \"RWF\", \"SAR\", \"SDG\", \"SEK\", \"SGD\", \"SOS\", \"SYP\", \"THB\", \"TND\", \"TOP\", \"TRY\", \"TTD\", \"TWD\", \"TZS\", \"UAH\", \"UGX\", \"UYU\", \"UZS\", \"VEF\", \"VND\", \"XAF\", \"XOF\", \"YER\", \"ZAR\", \"ZMK\"]\n      },\n      \"store_id\": {\n        type: \"number\"\n      },\n      \"notes\": {\n        type: \"string\",\n        max: 500\n      },\n      \"shipping_fee\": {\n        type: \"number\",\n        min: 0\n      }\n    });\n\n    Types.Address = new Schematic.Schema('Address', {\n      \"full_name\": {\n        type: \"string\",\n        required: true,\n        max: 140\n      },\n      \"country\": {\n        type: \"string\",\n        required: true,\n        max: 140\n      },\n      \"state\": {\n        type: \"string\",\n        max: 140\n      },\n      \"city\": {\n        type: \"string\",\n        required: true,\n        max: 140\n      },\n      \"address1\": {\n        type: \"string\",\n        required: true,\n        max: 250\n      },\n      \"address2\": {\n        type: \"string\",\n        max: 250\n      },\n      \"postal_code\": {\n        type: \"string\",\n        required: true,\n        max: 20\n      },\n      phone_number: {\n        type: \"string\",\n        max: 30\n      },\n      email: {\n        type: \"string\",\n        required: true,\n        max: 140\n      },\n      alternate_phone_number: {\n        type: \"string\",\n        max: 140\n      }\n    });\n\n    // This resemble a taxrate\n    Types.ShippingZone = new Schematic.Schema('ShippingZone', {\n      \"country\": {\n        type: \"string\",\n        required: true\n      },\n      \"state\": {\n        type: \"string\",\n        required: true\n      },\n      \"postcode\": {\n        type: \"string\",\n        required: true\n      },\n      \"city\": {\n        type: \"string\",\n        required: true\n      }\n    });\n\n    Types.Shipping = new Schematic.Schema('Shipping', {\n      \"name\": {\n        type: \"string\",\n        required: true,\n        min: 3\n      },\n      \"base_cost\": {\n        type: \"number\",\n        required: true,\n        min: 0\n      },\n      \"per_item_cost\": {\n        type: \"number\",\n        min: 0\n      },\n      \"description\": {\n        type: \"string\"\n      },\n      \"min_price\": {\n        type: \"number\",\n        min: 0\n      },\n      \"max_price\": {\n        type: \"number\",\n        min: 0\n      },\n      \"min_weight\": {\n        type: \"number\",\n        min: 0\n      },\n      \"max_weight\": {\n        type: \"number\",\n        min: 0\n      },\n      \"zones\": {\n        type: \"array\"\n      }\n    });\n\n    Types.Store = new Schematic.Schema('Store', {\n      \"name\": {\n        type: \"string\",\n        required: true\n      },\n      \"owner_email\": {\n        type: \"string\",\n        required: true\n      },\n      \"description\": {\n        type: \"string\"\n      },\n      \"custom_attributes\": {\n        type: \"object\"\n      }\n    });\n\n    Types.Customer = new Schematic.Schema('Customer', {\n      \"full_name\": {\n        type: \"string\",\n        required: true\n      },\n      \"shipping_address\": {\n        type: Types.Address,\n        required: true\n      },\n      \"billing_address\": {\n        type: Types.Address,\n        required: true\n      },\n      \"email\": {\n        type: \"string\",\n        required: true\n      }\n    });\n\n    Types.Variable = new Schematic.Schema('Variable', {\n      name: {\n        type: \"string\",\n        required: true,\n        min: 1,\n        max: 500\n      },\n      type: {\n        type: \"string\",\n        required: false,\n        whitelist: ['string', 'number', 'boolean', 'object', 'array']\n      },\n      value: {\n        required: true\n      }\n    });\n\n    Types.Shipment = new Schematic.Schema('Shipment', {\n      \"date\": {\n        type: \"string\",\n        required: true\n      },\n      \"delivery_date\": {\n        type: \"string\",\n        required: true\n      },\n      \"description\": {\n        type: \"text\"\n      },\n      \"method\": {\n        type: Types.Shipping\n      }\n\n    });\n\n    return Types;\n  }\n})();"
    },
    {
      "id": 130,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\factories\\notificationsPresets.factory.js",
      "name": "./public/modules/data_dashboard/src/factories/notificationsPresets.factory.js",
      "index": 130,
      "index2": 128,
      "size": 3762,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./factories/notificationsPresets.factory.js"
        }
      ],
      "source": "'use strict';\n\n(function () {\n\t'use strict';\n\n\tangular.module('DataDashboard').factory('NotificationsPresetsFactory', NotificationsPresetsFactory);\n\n\tfunction NotificationsPresetsFactory() {\n\n\t\tvar presets = {};\n\n\t\tpresets['invoices.create'] = {\n\t\t\tname: 'An order is created',\n\t\t\tdescription: 'This notification is sent to the customer who creates an order',\n\t\t\tsubject: 'Your invoice',\n\t\t\tlocales: {},\n\t\t\ttemplate: {\n\t\t\t\ttitle: 'Your invoice',\n\t\t\t\tmessage: 'Attached to this email you can find your most recent invoice for your order at {{application.name}}'\n\t\t\t}\n\t\t};\n\n\t\tpresets['orders.create'] = {\n\t\t\tname: 'An order is created',\n\t\t\tdescription: 'This notification is sent to the customer who creates an order',\n\t\t\tsubject: 'We received your order!',\n\t\t\tlocales: {},\n\t\t\ttemplate: {\n\t\t\t\ttitle: 'Thank you for your order!',\n\t\t\t\tintroduction: 'Your order has been received and is now being processed. Your order\\'s details are shown below for your reference.',\n\t\t\t\tproductLabel: 'Items',\n\t\t\t\tpriceLabel: 'Price',\n\t\t\t\tcustomerInformationLabel: 'Customer information',\n\t\t\t\tshippingAddressLabel: 'Shipping address',\n\t\t\t\tbillingAddressLabel: 'Billing address'\n\t\t\t}\n\t\t};\n\n\t\tpresets['users.create'] = {\n\t\t\tname: 'New customer account',\n\t\t\tdescription: 'This notification is sent to the customer who creates an account',\n\t\t\tsubject: 'Welcome!',\n\t\t\tlocales: {},\n\t\t\ttemplate: {\n\t\t\t\ttitle: 'Welcome to {{application.name}}!',\n\t\t\t\tintroduction: 'Thank you for creating an account with us!',\n\t\t\t\tbuttonLabel: 'Visit our store'\n\t\t\t}\n\t\t};\n\n\t\tpresets['users.recoverPassword'] = {\n\t\t\tname: 'Password recovery',\n\t\t\tdescription: 'This notification is sent to the customer who requests a password recovery',\n\t\t\tsubject: 'Password recovery',\n\t\t\tlocales: {},\n\t\t\ttemplate: {\n\t\t\t\ttitle: 'Recover your password',\n\t\t\t\tintroduction: 'Hello, we sent you this email because you requested to recover your password. If it\\'s not the case, please ignore this email.',\n\t\t\t\tredirect_url: 'http://example.com/passwordrecovery'\n\t\t\t}\n\t\t};\n\n\t\tpresets['orders.update.processing'] = {\n\t\t\tname: 'An order is paid',\n\t\t\tdescription: 'This notification is sent to the customer who paid an order',\n\t\t\tsubject: 'Your order is confirmed!',\n\t\t\tlocales: {},\n\t\t\ttemplate: {\n\t\t\t\ttitle: 'Thank you for your order!',\n\t\t\t\tintroduction: 'Your order has been confirmed and is now being processed. Your order\\'s details are shown below for your reference.',\n\t\t\t\tproductLabel: 'Items',\n\t\t\t\tpriceLabel: 'Price',\n\t\t\t\tcustomerInformationLabel: 'Customer information',\n\t\t\t\tshippingAddressLabel: 'Shipping address',\n\t\t\t\tbillingAddressLabel: 'Billing address'\n\t\t\t}\n\t\t};\n\n\t\tpresets['orders.update.completed'] = {\n\t\t\tname: 'An order is shipped',\n\t\t\tdescription: 'This notification is sent to the customer when his/her order is shipped.',\n\t\t\tsubject: 'We shipped your order!',\n\t\t\tlocales: {},\n\t\t\ttemplate: {\n\t\t\t\ttitle: 'Your order is on the way',\n\t\t\t\tintroduction: 'We are happy to inform you that we shipped your order #{{order.id}} !',\n\t\t\t\ttracking_code_introduction: 'You can click on the following tracking number to track your package on the carrier\\'s website.',\n\t\t\t\tproductLabel: 'Items',\n\t\t\t\tpriceLabel: 'Price',\n\t\t\t\tcustomerInformationLabel: 'Customer information',\n\t\t\t\tshippingAddressLabel: 'Shipping address',\n\t\t\t\tbillingAddressLabel: 'Billing address'\n\t\t\t}\n\t\t};\n\n\t\tpresets['orders.refund'] = {\n\t\t\tname: 'An order is refunded',\n\t\t\tdescription: 'This notification is sent to the customer when his/her order is refunded.',\n\t\t\tsubject: 'Refund for order {{order.id}}',\n\t\t\tlocales: {},\n\t\t\ttemplate: {\n\t\t\t\ttitle: 'Refund for order {{order.id}}',\n\t\t\t\tintroduction: 'A refund was recently created for your order. Details are shown below for your reference.',\n\t\t\t\tproductLabel: 'Items'\n\t\t\t}\n\t\t};\n\n\t\treturn presets;\n\t}\n})();"
    },
    {
      "id": 131,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\factories\\pagination.factory.js",
      "name": "./public/modules/data_dashboard/src/factories/pagination.factory.js",
      "index": 131,
      "index2": 129,
      "size": 750,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./factories/pagination.factory.js"
        }
      ],
      "source": "'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('DataDashboard').factory('$pagination', PaginationFactory);\n\n  /*\r\n   *   AngularJS Factory that handles the pagination object\r\n   *   \r\n   */\n  function PaginationFactory() {\n\n    // Container object we will return\n    var Factory = {};\n\n    /*\r\n     * @param {HTTPResponse} httpResponse The response object\r\n     */\n    Factory.fromHTTPResponse = function (httpResponse) {\n      return {\n        currentPage: httpResponse.data.page,\n        numberOfPages: httpResponse.data.pages,\n        nextPage: httpResponse.data._links.next || null,\n        previousPage: httpResponse.data._links.prev || null,\n        count: httpResponse.data.count\n      };\n    };\n\n    return Factory;\n  }\n})();"
    },
    {
      "id": 132,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\factories\\rolesPresets.factory.js",
      "name": "./public/modules/data_dashboard/src/factories/rolesPresets.factory.js",
      "index": 132,
      "index2": 130,
      "size": 9310,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./factories/rolesPresets.factory.js"
        }
      ],
      "source": "'use strict';\n\nvar app = angular.module('DataDashboard');\napp.factory('rolePresets', function () {\n    function getCommonPublicProfile() {\n        return {\n            list: true,\n            findOne: true,\n            getById: true,\n            create: false,\n            update: false,\n            delete: false\n        };\n    }\n\n    function getAllTrueProfile() {\n        return {\n            list: true,\n            findOne: true,\n            getById: true,\n            create: true,\n            update: true,\n            delete: true\n        };\n    }\n\n    function getAllFalseProfile() {\n        return {\n            list: false,\n            findOne: false,\n            getById: false,\n            create: false,\n            update: false,\n            delete: false\n        };\n    }\n\n    function getCommonUserProfile() {\n        return {\n            list: true,\n            findOne: true,\n            getById: true,\n            create: false,\n            update: false,\n            delete: false\n        };\n    }\n\n    function getCommonAdminProfile() {\n        return {\n            list: true,\n            findOne: true,\n            getById: true,\n            create: true,\n            update: true,\n            delete: true\n        };\n    }\n\n    var publicAccessMap = {\n        addresses: getAllFalseProfile(),\n        brands: getCommonPublicProfile(),\n        carts: {\n            list: false,\n            findOne: false,\n            getById: true,\n            patch: true,\n            create: true,\n            update: true,\n            checkout: true,\n            delete: false\n        },\n        categories: getCommonPublicProfile(),\n        collections: getCommonPublicProfile(),\n        contents: getCommonPublicProfile(),\n        coupons: getAllFalseProfile(),\n        promotions: getCommonPublicProfile(),\n        currencies: getCommonPublicProfile(),\n        orders: {\n            list: false,\n            findOne: false,\n            getById: false,\n            create: true,\n            update: false,\n            delete: false\n        },\n        paymentMethods: getCommonPublicProfile(),\n        invoices: getAllFalseProfile(),\n        products: getCommonPublicProfile(),\n        shippings: getCommonPublicProfile(),\n        stores: getCommonPublicProfile(),\n        taxes: getCommonPublicProfile(),\n        users: {\n            list: false,\n            findOne: false,\n            getById: false,\n            create: true,\n            update: false,\n            delete: false,\n            authenticate: true\n        },\n        variables: getCommonPublicProfile()\n    };\n\n    var userAccessMap = {\n        addresses: {\n            list: true,\n            findOne: true,\n            getById: true,\n            create: true,\n            update: true,\n            delete: true\n        },\n        brands: {\n            list: true,\n            findOne: true,\n            getById: true,\n            create: false,\n            update: false,\n            delete: false\n        },\n        carts: {\n            list: true,\n            findOne: false,\n            getById: true,\n            patch: true,\n            create: true,\n            update: true,\n            checkout: true,\n            delete: true\n        },\n        categories: {\n            list: true,\n            findOne: true,\n            getById: true,\n            create: false,\n            update: false,\n            delete: false\n        },\n        collections: {\n            list: true,\n            findOne: true,\n            getById: true,\n            create: false,\n            update: false,\n            delete: false\n        },\n        contents: {\n            list: true,\n            findOne: true,\n            getById: true,\n            create: false,\n            update: false,\n            delete: false\n        },\n        coupons: getAllFalseProfile(),\n        promotions: {\n            list: true,\n            findOne: true,\n            getById: true,\n            create: false,\n            update: false,\n            delete: false\n        },\n        currencies: {\n            list: true,\n            findOne: true,\n            getById: true,\n            create: false,\n            update: false,\n            delete: false\n        },\n        orders: {\n            list: true,\n            findOne: true,\n            getById: true,\n            create: true,\n            update: false,\n            delete: false\n        },\n        paymentMethods: {\n            list: true,\n            findOne: true,\n            getById: true,\n            create: true, // I can order stuff on sites even if i'm not authenticated\n            update: false,\n            delete: false\n        },\n        products: {\n            list: true,\n            findOne: true,\n            getById: true,\n            create: false,\n            update: false,\n            delete: false\n        },\n        shippings: {\n            list: true,\n            findOne: true,\n            getById: true,\n            create: false,\n            update: false,\n            delete: false\n        },\n        stores: {\n            list: true,\n            findOne: true,\n            getById: true,\n            create: true,\n            update: true,\n            delete: true\n        },\n        taxes: {\n            list: true,\n            findOne: true,\n            getById: true,\n            create: false,\n            update: false,\n            delete: false\n        },\n        invoices: {\n            list: false,\n            findOne: false,\n            getById: false,\n            create: false,\n            update: false,\n            delete: false\n        },\n        users: {\n            list: false,\n            findOne: false,\n            getById: true,\n            create: true,\n            update: true,\n            delete: true,\n            authenticate: true\n        },\n        variables: getCommonUserProfile()\n    };\n\n    var adminAccessMap = {\n        addresses: {\n            list: true,\n            findOne: true,\n            getById: true,\n            create: true,\n            update: true,\n            delete: true\n        },\n        invoices: {\n            list: true,\n            findOne: true,\n            getById: true,\n            create: true,\n            update: true,\n            delete: true\n        },\n        brands: {\n            list: true,\n            findOne: true,\n            getById: true,\n            create: true,\n            update: true,\n            delete: true\n        },\n        carts: {\n            list: true,\n            findOne: true,\n            getById: true,\n            create: true,\n            patch: true,\n            update: true,\n            checkout: true,\n            delete: true\n        },\n        categories: {\n            list: true,\n            findOne: true,\n            getById: true,\n            create: true,\n            update: true,\n            delete: true\n        },\n        collections: {\n            list: true,\n            findOne: true,\n            getById: true,\n            create: true,\n            update: true,\n            delete: true\n        },\n        contents: {\n            list: true,\n            findOne: true,\n            getById: true,\n            create: true,\n            update: true,\n            delete: true\n        },\n        coupons: {\n            list: true,\n            findOne: true,\n            getById: true,\n            create: true,\n            update: true,\n            delete: true\n        },\n        promotions: {\n            list: true,\n            findOne: true,\n            getById: true,\n            create: true,\n            update: true,\n            delete: true\n        },\n        currencies: {\n            list: true,\n            findOne: true,\n            getById: true,\n            create: true,\n            update: true,\n            delete: true\n        },\n\n        orders: {\n            list: true,\n            findOne: true,\n            getById: true,\n            create: true,\n            update: true,\n            delete: true\n        },\n        paymentMethods: {\n            list: true,\n            findOne: true,\n            getById: true,\n            create: true,\n            update: true,\n            delete: true\n        },\n        products: {\n            list: true,\n            findOne: true,\n            getById: true,\n            create: true,\n            update: true,\n            delete: true\n        },\n        shippings: {\n            list: true,\n            findOne: true,\n            getById: true,\n            create: true,\n            update: true,\n            delete: true\n        },\n        stores: {\n            list: true,\n            findOne: true,\n            getById: true,\n            create: true,\n            update: true,\n            delete: true\n        },\n        taxes: {\n            list: true,\n            findOne: true,\n            getById: true,\n            create: true,\n            update: true,\n            delete: true\n        },\n        users: {\n            list: true,\n            findOne: true,\n            getById: true,\n            create: true,\n            update: true,\n            delete: true,\n            authenticate: true\n        },\n        variables: getCommonAdminProfile()\n    };\n\n    return {\n        public: publicAccessMap,\n        user: userAccessMap,\n        admin: adminAccessMap\n    };\n});"
    },
    {
      "id": 133,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\factories\\stormConfiguration.factory.js",
      "name": "./public/modules/data_dashboard/src/factories/stormConfiguration.factory.js",
      "index": 133,
      "index2": 131,
      "size": 2739,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./factories/stormConfiguration.factory.js"
        }
      ],
      "source": "'use strict';\n\n(function () {\n    'use strict';\n\n    angular.module('DataDashboard').factory('StormConfiguration', StormConfigurationFactory);\n\n    StormConfigurationFactory.$inject = ['$window', '$application'];\n\n    /*\r\n    *   AngularJS Factory that handles writes and reads from\r\n    *   localStorage (or similar backend) for managing Storm user preferences.\r\n    *\r\n    *   For example it can be used to save default filters on a certain view\r\n    * \r\n    *   It can also be used to save some custom behaviour.\r\n    *\r\n    *   The main feature should be that it wraps all the configs in a json object\r\n    *   which gets written to storage and read every time as a whole.\r\n    */\n    function StormConfigurationFactory($window, $application) {\n\n        var Factory = {};\n\n        console.info(\"Loading Storm configuration information from localStorage\");\n\n        var LOCALSTORAGE_KEY = 'Marketcloud.Storm.Configuration.' + ($application.get('id') || \"unkownAppId\");\n\n        function loadFromStorage() {\n            var storedJson = window.localStorage.getItem(LOCALSTORAGE_KEY);\n            if (storedJson) Factory._data = JSON.parse(storedJson);else Factory._data = {};\n        }\n\n        function persistToStorage() {\n            var s = JSON.stringify(Factory._data);\n            console.log(\"Persisting to storage with key \" + LOCALSTORAGE_KEY, s);\n            window.localStorage.setItem(LOCALSTORAGE_KEY, s);\n        }\n\n        Factory._data = {};\n\n        Factory.loadFromStorage = loadFromStorage;\n        Factory.persistToStorage = persistToStorage;\n\n        Factory.loadFromStorage();\n\n        Factory.get = function (key) {\n\n            if (\"undefined\" !== typeof key) return this._data[key];else return this._data;\n        };\n\n        Factory.set = function (key, value, persist) {\n\n            persist = persist || true;\n\n            if (\"string\" !== typeof key) throw new Error(\"StormConfigurationFactory.set(key,value) 'key' must be String\");\n\n            this._data[key] = value;\n\n            if (persist === true) Factory.persistToStorage();\n        };\n\n        Factory.applyTheme = function (theme) {\n\n            // Checking\n            if (!theme) return;\n\n            // Sanitizing the theme filename\n            if (theme.indexOf('.theme.css') === -1) {\n                theme = theme + '.theme.css';\n            }\n\n            var url = '/modules/data_dashboard/css/themes/' + theme;\n\n            // Removing previously loaded themes\n            $(\".storm-theme-definition\").remove();\n\n            // Appending the theme to the Document\n            $('<link rel=\"stylesheet\" class=\"storm-theme-definition\" type=\"text/css\" href=\"' + url + '\" >').appendTo(\"head\");\n        };\n\n        return Factory;\n    }\n})();"
    },
    {
      "id": 134,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\factories\\tableManager.factory.js",
      "name": "./public/modules/data_dashboard/src/factories/tableManager.factory.js",
      "index": 134,
      "index2": 132,
      "size": 570,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./factories/tableManager.factory.js"
        }
      ],
      "source": "'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('DataDashboard').factory('TableManager', TableManagerFactory);\n\n  TableManagerFactory.$inject = [];\n\n  /*\r\n  *   AngularJS Factory that handles the configuration\r\n  *   of data tables\r\n  */\n  function TableManagerFactory() {\n\n    var factory = {};\n\n    // This is to avoid to overflow controllers with shared functionality\n    function attachTableManagerFunctions(scope) {\n\n      if (!scope.hasOwnProperty(\"visibleColumns\")) {\n        scope.visibleColumns = [];\n      }\n    }\n\n    return factory;\n  }\n})();"
    },
    {
      "id": 135,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\factories\\taxrates.factory.js",
      "name": "./public/modules/data_dashboard/src/factories/taxrates.factory.js",
      "index": 135,
      "index2": 133,
      "size": 14592,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./factories/taxrates.factory.js"
        }
      ],
      "source": "'use strict';\n\nangular.module('Marketcloud.Shared').factory('TaxRates', function () {\n\n  return [{\n    \"country\": \"Australia\",\n    \"state\": \"*\",\n    \"rate\": \"10.0000\",\n    \"name\": \"GST\",\n    \"shipping\": true,\n    \"country_code\": \"AU\"\n  }, {\n    \"country\": \"Bangladesh\",\n    \"state\": \"*\",\n    \"rate\": \"15.0000\",\n    \"name\": \"VAT\",\n    \"shipping\": true,\n    \"country_code\": \"BD\"\n  }, {\n    \"country\": \"Belgium\",\n    \"state\": \"*\",\n    \"rate\": \"21.0000\",\n    \"name\": \"BTW\",\n    \"shipping\": true,\n    \"country_code\": \"BE\"\n  }, {\n    \"country\": \"Canada\",\n    \"state\": \"British Columbia\",\n    \"rate\": \"7.0000\",\n    \"name\": \"PST\",\n    \"shipping\": false,\n    \"priority\": 2,\n    \"country_code\": \"CA\",\n    \"state_code\": \"BC\"\n  }, {\n    \"country\": \"Canada\",\n    \"state\": \"Saskatchewan\",\n    \"rate\": \"5.0000\",\n    \"name\": \"PST\",\n    \"shipping\": false,\n    \"priority\": 2,\n    \"country_code\": \"CA\",\n    \"state_code\": \"SK\"\n  }, {\n    \"country\": \"Canada\",\n    \"state\": \"Manitoba\",\n    \"rate\": \"8.0000\",\n    \"name\": \"PST\",\n    \"shipping\": false,\n    \"priority\": 2,\n    \"country_code\": \"CA\",\n    \"state_code\": \"MB\"\n  }, {\n    \"country\": \"Canada\",\n    \"state\": \"Quebec\",\n    \"rate\": \"9.975\",\n    \"name\": \"QST\",\n    \"shipping\": false,\n    \"priority\": 2,\n    \"country_code\": \"CA\",\n    \"state_code\": \"QC\"\n  }, {\n    \"country\": \"Canada\",\n    \"state\": \"Ontario\",\n    \"rate\": \"13.0000\",\n    \"name\": \"HST\",\n    \"shipping\": true,\n    \"country_code\": \"CA\",\n    \"state_code\": \"ON\"\n  }, {\n    \"country\": \"Canada\",\n    \"state\": \"Newfoundland and Labrador\",\n    \"rate\": \"13.0000\",\n    \"name\": \"HST\",\n    \"shipping\": true,\n    \"country_code\": \"CA\",\n    \"state_code\": \"NL\"\n  }, {\n    \"country\": \"Canada\",\n    \"state\": \"New Brunswick\",\n    \"rate\": \"13.0000\",\n    \"name\": \"HST\",\n    \"shipping\": true,\n    \"country_code\": \"CA\",\n    \"state_code\": \"NB\"\n  }, {\n    \"country\": \"Canada\",\n    \"state\": \"Prince Edward Island\",\n    \"rate\": \"14.0000\",\n    \"name\": \"HST\",\n    \"shipping\": true,\n    \"country_code\": \"CA\",\n    \"state_code\": \"PE\"\n  }, {\n    \"country\": \"Canada\",\n    \"state\": \"Nova Scotia\",\n    \"rate\": \"15.0000\",\n    \"name\": \"HST\",\n    \"shipping\": true,\n    \"country_code\": \"CA\",\n    \"state_code\": \"NS\"\n  }, {\n    \"country\": \"Canada\",\n    \"state\": \"Alberta\",\n    \"rate\": \"5.0000\",\n    \"name\": \"GST\",\n    \"shipping\": true,\n    \"country_code\": \"CA\",\n    \"state_code\": \"AB\"\n  }, {\n    \"country\": \"Canada\",\n    \"state\": \"British Columbia\",\n    \"rate\": \"5.0000\",\n    \"name\": \"GST\",\n    \"shipping\": true,\n    \"country_code\": \"CA\",\n    \"state_code\": \"BC\"\n  }, {\n    \"country\": \"Canada\",\n    \"state\": \"Northwest Territories\",\n    \"rate\": \"5.0000\",\n    \"name\": \"GST\",\n    \"shipping\": true,\n    \"country_code\": \"CA\",\n    \"state_code\": \"NT\"\n  }, {\n    \"country\": \"Canada\",\n    \"state\": \"Nunavut\",\n    \"rate\": \"5.0000\",\n    \"name\": \"GST\",\n    \"shipping\": true,\n    \"country_code\": \"CA\",\n    \"state_code\": \"NU\"\n  }, {\n    \"country\": \"Canada\",\n    \"state\": \"Yukon\",\n    \"rate\": \"5.0000\",\n    \"name\": \"GST\",\n    \"shipping\": true,\n    \"country_code\": \"CA\",\n    \"state_code\": \"YT\"\n  }, {\n    \"country\": \"Canada\",\n    \"state\": \"Saskatchewan\",\n    \"rate\": \"5.0000\",\n    \"name\": \"GST\",\n    \"shipping\": true,\n    \"country_code\": \"CA\",\n    \"state_code\": \"SK\"\n  }, {\n    \"country\": \"Canada\",\n    \"state\": \"Manitoba\",\n    \"rate\": \"5.0000\",\n    \"name\": \"GST\",\n    \"shipping\": true,\n    \"country_code\": \"CA\",\n    \"state_code\": \"MB\"\n  }, {\n    \"country\": \"Canada\",\n    \"state\": \"Quebec\",\n    \"rate\": \"5.0000\",\n    \"name\": \"GST\",\n    \"shipping\": true,\n    \"country_code\": \"CA\",\n    \"state_code\": \"QC\"\n  }, {\n    \"country\": \"Finland\",\n    \"state\": \"*\",\n    \"rate\": \"24.0000\",\n    \"name\": \"ALV\",\n    \"shipping\": true,\n    \"country_code\": \"FI\"\n  }, {\n    \"country\": \"France\",\n    \"state\": \"*\",\n    \"rate\": \"20.0000\",\n    \"name\": \"TVA\",\n    \"shipping\": true,\n    \"country_code\": \"FR\"\n  }, {\n    \"country\": \"Germany\",\n    \"state\": \"*\",\n    \"rate\": \"19.0000\",\n    \"name\": \"Mwst.\",\n    \"shipping\": true,\n    \"country_code\": \"DE\"\n  }, {\n    \"country\": \"Hungary\",\n    \"state\": \"*\",\n    \"rate\": \"27.0000\",\n    \"name\": \"ÃFA\",\n    \"shipping\": true,\n    \"country_code\": \"HU\"\n  }, {\n    \"country\": \"Italy\",\n    \"state\": \"*\",\n    \"rate\": \"22.0000\",\n    \"name\": \"IVA\",\n    \"shipping\": true,\n    \"country_code\": \"IT\"\n  }, {\n    \"country\": \"Japan\",\n    \"state\": \"*\",\n    \"rate\": \"8.0000\",\n    \"name\": \"Consumption tax\",\n    \"shipping\": true,\n    \"country_code\": \"JP\"\n  }, {\n    \"country\": \"Nepal\",\n    \"state\": \"*\",\n    \"rate\": \"13.0000\",\n    \"name\": \"VAT\",\n    \"shipping\": true,\n    \"country_code\": \"NP\"\n  }, {\n    \"country\": \"Netherlands\",\n    \"state\": \"*\",\n    \"rate\": \"21.0000\",\n    \"name\": \"VAT\",\n    \"shipping\": true,\n    \"country_code\": \"NL\"\n  }, {\n    \"country\": \"Norway\",\n    \"state\": \"*\",\n    \"rate\": \"25.0000\",\n    \"name\": \"MVA\",\n    \"shipping\": true,\n    \"country_code\": \"NO\"\n  }, {\n    \"country\": \"Poland\",\n    \"state\": \"*\",\n    \"rate\": \"23.0000\",\n    \"name\": \"VAT\",\n    \"shipping\": true,\n    \"country_code\": \"PL\"\n  }, {\n    \"country\": \"Romania\",\n    \"state\": \"*\",\n    \"rate\": \"19.0000\",\n    \"name\": \"TVA\",\n    \"shipping\": true,\n    \"country_code\": \"RO\"\n  }, {\n    \"country\": \"South Africa\",\n    \"state\": \"*\",\n    \"rate\": \"14.0000\",\n    \"name\": \"VAT\",\n    \"shipping\": true,\n    \"country_code\": \"ZA\"\n  }, {\n    \"country\": \"Spain\",\n    \"state\": \"*\",\n    \"rate\": \"21.0000\",\n    \"name\": \"VAT\",\n    \"shipping\": true,\n    \"country_code\": \"ES\"\n  }, {\n    \"country\": \"Thailand\",\n    \"state\": \"*\",\n    \"rate\": \"7.0000\",\n    \"name\": \"VAT\",\n    \"shipping\": true,\n    \"country_code\": \"TH\"\n  }, {\n    \"country\": \"Turkey\",\n    \"state\": \"*\",\n    \"rate\": \"18.0000\",\n    \"name\": \"KDV\",\n    \"shipping\": true,\n    \"country_code\": \"TR\"\n  }, {\n    \"country\": \"United Kingdom\",\n    \"state\": \"*\",\n    \"rate\": \"20.0000\",\n    \"name\": \"VAT\",\n    \"shipping\": true,\n    \"country_code\": \"GB\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Alabama\",\n    \"rate\": \"4.0000\",\n    \"name\": \"State Tax\",\n    \"shipping\": false,\n    \"country_code\": \"US\",\n    \"state_code\": \"AL\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Arizona\",\n    \"rate\": \"5.6000\",\n    \"name\": \"State Tax\",\n    \"shipping\": false,\n    \"country_code\": \"US\",\n    \"state_code\": \"AZ\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Arkansas\",\n    \"rate\": \"6.5000\",\n    \"name\": \"State Tax\",\n    \"shipping\": true,\n    \"country_code\": \"US\",\n    \"state_code\": \"AR\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"California\",\n    \"rate\": \"7.5000\",\n    \"name\": \"State Tax\",\n    \"shipping\": false,\n    \"country_code\": \"US\",\n    \"state_code\": \"CA\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Colorado\",\n    \"rate\": \"2.9000\",\n    \"name\": \"State Tax\",\n    \"shipping\": false,\n    \"country_code\": \"US\",\n    \"state_code\": \"CO\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Connecticut\",\n    \"rate\": \"6.3500\",\n    \"name\": \"State Tax\",\n    \"shipping\": true,\n    \"country_code\": \"US\",\n    \"state_code\": \"CT\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"District of Columbia\",\n    \"rate\": \"5.7500\",\n    \"name\": \"State Tax\",\n    \"shipping\": true,\n    \"country_code\": \"US\",\n    \"state_code\": \"DC\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Florida\",\n    \"rate\": \"6.0000\",\n    \"name\": \"State Tax\",\n    \"shipping\": true,\n    \"country_code\": \"US\",\n    \"state_code\": \"FL\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Georgia\",\n    \"rate\": \"4.0000\",\n    \"name\": \"State Tax\",\n    \"shipping\": true,\n    \"country_code\": \"US\",\n    \"state_code\": \"GA\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Guam\",\n    \"rate\": \"4.0000\",\n    \"name\": \"State Tax\",\n    \"shipping\": false,\n    \"country_code\": \"US\",\n    \"state_code\": \"GU\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Hawaii\",\n    \"rate\": \"4.0000\",\n    \"name\": \"State Tax\",\n    \"shipping\": true,\n    \"country_code\": \"US\",\n    \"state_code\": \"HI\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Idaho\",\n    \"rate\": \"6.0000\",\n    \"name\": \"State Tax\",\n    \"shipping\": false,\n    \"country_code\": \"US\",\n    \"state_code\": \"ID\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Illinois\",\n    \"rate\": \"6.2500\",\n    \"name\": \"State Tax\",\n    \"shipping\": false,\n    \"country_code\": \"US\",\n    \"state_code\": \"IL\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Indiana\",\n    \"rate\": \"7.0000\",\n    \"name\": \"State Tax\",\n    \"shipping\": false,\n    \"country_code\": \"US\",\n    \"state_code\": \"IN\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Iowa\",\n    \"rate\": \"6.0000\",\n    \"name\": \"State Tax\",\n    \"shipping\": false,\n    \"country_code\": \"US\",\n    \"state_code\": \"IA\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Kansas\",\n    \"rate\": \"6.1500\",\n    \"name\": \"State Tax\",\n    \"shipping\": true,\n    \"country_code\": \"US\",\n    \"state_code\": \"KS\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Kentucky\",\n    \"rate\": \"6.0000\",\n    \"name\": \"State Tax\",\n    \"shipping\": true,\n    \"country_code\": \"US\",\n    \"state_code\": \"KY\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Louisiana\",\n    \"rate\": \"4.0000\",\n    \"name\": \"State Tax\",\n    \"shipping\": false,\n    \"country_code\": \"US\",\n    \"state_code\": \"LA\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Maine\",\n    \"rate\": \"5.5000\",\n    \"name\": \"State Tax\",\n    \"shipping\": false,\n    \"country_code\": \"US\",\n    \"state_code\": \"ME\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Maryland\",\n    \"rate\": \"6.0000\",\n    \"name\": \"State Tax\",\n    \"shipping\": false,\n    \"country_code\": \"US\",\n    \"state_code\": \"MD\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Massachusetts\",\n    \"rate\": \"6.2500\",\n    \"name\": \"State Tax\",\n    \"shipping\": false,\n    \"country_code\": \"US\",\n    \"state_code\": \"MA\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Michigan\",\n    \"rate\": \"6.0000\",\n    \"name\": \"State Tax\",\n    \"shipping\": true,\n    \"country_code\": \"US\",\n    \"state_code\": \"MI\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Minnesota\",\n    \"rate\": \"6.8750\",\n    \"name\": \"State Tax\",\n    \"shipping\": true,\n    \"country_code\": \"US\",\n    \"state_code\": \"MN\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Mississippi\",\n    \"rate\": \"7.0000\",\n    \"name\": \"State Tax\",\n    \"shipping\": true,\n    \"country_code\": \"US\",\n    \"state_code\": \"MS\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Missouri\",\n    \"rate\": \"4.225\",\n    \"name\": \"State Tax\",\n    \"shipping\": false,\n    \"country_code\": \"US\",\n    \"state_code\": \"MO\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Nebraska\",\n    \"rate\": \"5.5000\",\n    \"name\": \"State Tax\",\n    \"shipping\": true,\n    \"country_code\": \"US\",\n    \"state_code\": \"NE\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Nevada\",\n    \"rate\": \"6.8500\",\n    \"name\": \"State Tax\",\n    \"shipping\": false,\n    \"country_code\": \"US\",\n    \"state_code\": \"NV\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"New Jersey\",\n    \"rate\": \"7.0000\",\n    \"name\": \"State Tax\",\n    \"shipping\": true,\n    \"country_code\": \"US\",\n    \"state_code\": \"NJ\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"New Mexico\",\n    \"rate\": \"5.1250\",\n    \"name\": \"State Tax\",\n    \"shipping\": true,\n    \"country_code\": \"US\",\n    \"state_code\": \"NM\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"New York\",\n    \"rate\": \"4.0000\",\n    \"name\": \"State Tax\",\n    \"shipping\": true,\n    \"country_code\": \"US\",\n    \"state_code\": \"NY\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"North Carolina\",\n    \"rate\": \"4.7500\",\n    \"name\": \"State Tax\",\n    \"shipping\": true,\n    \"country_code\": \"US\",\n    \"state_code\": \"NC\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"North Dakota\",\n    \"rate\": \"5.0000\",\n    \"name\": \"State Tax\",\n    \"shipping\": true,\n    \"country_code\": \"US\",\n    \"state_code\": \"ND\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Ohio\",\n    \"rate\": \"5.7500\",\n    \"name\": \"State Tax\",\n    \"shipping\": true,\n    \"country_code\": \"US\",\n    \"state_code\": \"OH\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Oklahoma\",\n    \"rate\": \"4.5000\",\n    \"name\": \"State Tax\",\n    \"shipping\": false,\n    \"country_code\": \"US\",\n    \"state_code\": \"OK\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Pennsylvania\",\n    \"rate\": \"6.0000\",\n    \"name\": \"State Tax\",\n    \"shipping\": true,\n    \"country_code\": \"US\",\n    \"state_code\": \"PA\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Puerto Rico\",\n    \"rate\": \"6.0000\",\n    \"name\": \"State Tax\",\n    \"shipping\": false,\n    \"country_code\": \"US\",\n    \"state_code\": \"PR\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Rhode Island\",\n    \"rate\": \"7.0000\",\n    \"name\": \"State Tax\",\n    \"shipping\": false,\n    \"country_code\": \"US\",\n    \"state_code\": \"RI\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"South Carolina\",\n    \"rate\": \"6.0000\",\n    \"name\": \"State Tax\",\n    \"shipping\": true,\n    \"country_code\": \"US\",\n    \"state_code\": \"SC\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"South Dakota\",\n    \"rate\": \"4.0000\",\n    \"name\": \"State Tax\",\n    \"shipping\": true,\n    \"country_code\": \"US\",\n    \"state_code\": \"SD\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Tennessee\",\n    \"rate\": \"7.0000\",\n    \"name\": \"State Tax\",\n    \"shipping\": true,\n    \"country_code\": \"US\",\n    \"state_code\": \"TN\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Texas\",\n    \"rate\": \"6.2500\",\n    \"name\": \"State Tax\",\n    \"shipping\": true,\n    \"country_code\": \"US\",\n    \"state_code\": \"TX\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Utah\",\n    \"rate\": \"5.9500\",\n    \"name\": \"State Tax\",\n    \"shipping\": false,\n    \"country_code\": \"US\",\n    \"state_code\": \"UT\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Vermont\",\n    \"rate\": \"6.0000\",\n    \"name\": \"State Tax\",\n    \"shipping\": true,\n    \"country_code\": \"US\",\n    \"state_code\": \"VT\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Virginia\",\n    \"rate\": \"5.3000\",\n    \"name\": \"State Tax\",\n    \"shipping\": false,\n    \"country_code\": \"US\",\n    \"state_code\": \"VA\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Washington\",\n    \"rate\": \"6.5000\",\n    \"name\": \"State Tax\",\n    \"shipping\": true,\n    \"country_code\": \"US\",\n    \"state_code\": \"WA\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"West Virginia\",\n    \"rate\": \"6.0000\",\n    \"name\": \"State Tax\",\n    \"shipping\": true,\n    \"country_code\": \"US\",\n    \"state_code\": \"WV\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Wisconsin\",\n    \"rate\": \"5.0000\",\n    \"name\": \"State Tax\",\n    \"shipping\": true,\n    \"country_code\": \"US\",\n    \"state_code\": \"WI\"\n  }, {\n    \"country\": \"United States\",\n    \"state\": \"Wyoming\",\n    \"rate\": \"4.0000\",\n    \"name\": \"State Tax\",\n    \"shipping\": true,\n    \"country_code\": \"US\",\n    \"state_code\": \"WY\"\n  }];\n});"
    },
    {
      "id": 136,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\factories\\utils.factory.js",
      "name": "./public/modules/data_dashboard/src/factories/utils.factory.js",
      "index": 136,
      "index2": 134,
      "size": 6285,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./factories/utils.factory.js"
        }
      ],
      "source": "'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('DataDashboard').factory('$utils', UtilsFactory);\n\n  /*\r\n   *   AngularJS Factory that handles the pagination object\r\n   *   \r\n   */\n  function UtilsFactory() {\n\n    // Container object we will return\n    var Factory = {};\n\n    var flatten = function flatten(data) {\n      var result = {};\n\n      function recurse(cur, prop) {\n        if (Object(cur) !== cur) {\n          result[prop] = cur;\n        } else if (Array.isArray(cur)) {\n          for (var i = 0, l = cur.length; i < l; i++) {\n            recurse(cur[i], prop + \"[\" + i + \"]\");\n          }if (l === 0) result[prop] = [];\n        } else {\n          var isEmpty = true;\n          for (var p in cur) {\n            isEmpty = false;\n            recurse(cur[p], prop ? prop + \".\" + p : p);\n          }\n          if (isEmpty && prop) result[prop] = {};\n        }\n      }\n      recurse(data, \"\");\n      return result;\n    };\n\n    var unflatten = function unflatten(data) {\n      \"use strict\";\n\n      if (Object(data) !== data || Array.isArray(data)) return data;\n      var regex = /\\,?([^.\\[\\]]+)|\\[(\\d+)\\]/g,\n          resultholder = {};\n      for (var p in data) {\n        var cur = resultholder,\n            prop = \"\",\n            m;\n        while (m = regex.exec(p)) {\n          cur = cur[prop] || (cur[prop] = m[2] ? [] : {});\n          prop = m[2] || m[1];\n        }\n        cur[prop] = data[p];\n      }\n      return resultholder[\"\"] || resultholder;\n    };\n\n    Factory.flatten = flatten;\n    Factory.unflatten = unflatten;\n\n    /*\r\n     * @param {String} str The input string\r\n     * @return {String} The slug--ified version of the string\r\n     */\n    Factory.getSlugFromString = function (str) {\n      return str.split(' ').map(function (item) {\n        return item.replace(/\\W/g, '');\n      }).map(function (item) {\n        return item.toLowerCase();\n      }).join('-');\n    };\n\n    /*\r\n     * @param {HTTPResponse} httpResponse The response object\r\n     */\n    Factory.getPaginationFromHTTPResponse = function (httpResponse) {\n      return {\n        currentPage: httpResponse.data.page,\n        numberOfPages: httpResponse.data.pages,\n        nextPage: httpResponse.data._links.next || null,\n        previousPage: httpResponse.data._links.prev || null,\n        count: httpResponse.data.count\n      };\n    };\n\n    // Exports an array of objects or an object to a JSON file\n    function JSONExport(data, title) {\n      if (!title) title = 'Marketcloud_export_' + String(Date.now()) + '.json';\n\n      var encodedUri = encodeURI('data:application/json;charset=utf-8,' + JSON.stringify(data));\n      var link = document.createElement('a');\n      link.setAttribute('href', encodedUri);\n      link.setAttribute('download', title);\n      document.body.appendChild(link); // Required for FF\n\n      link.click(); // This will download the data file named \"my_data.csv\".\n    }\n\n    Factory.exportAsJSON = JSONExport;\n\n    // Exports an array of objects or an object to a JSON file\n    function CSVExport(data, title) {\n      if (!title) title = 'Marketcloud_export_' + String(Date.now()) + '.csv';\n\n      var encodedUri = encodeURI('data:text/csv;charset=utf-8,' + data);\n      var link = document.createElement('a');\n      link.setAttribute('href', encodedUri);\n      link.setAttribute('download', title);\n      document.body.appendChild(link); // Required for FF\n\n      link.click(); // This will download the data file named \"my_data.csv\".\n    }\n\n    Factory.exportAsCSV = CSVExport;\n\n    /*\r\n     * Simple and UN-SAFE hash function\r\n     *\r\n     * @param {String} str the input string\r\n     * @return {String} the hashed string\r\n     */\n    function strhash(str) {\n      if (str.length % 32 > 0) {\n        str += Array(33 - str.length % 32).join(\"z\");\n      }\n      var hash = '';\n      var bytes = [];\n      var i = 0;\n      var j = 0;\n      var k = 0;\n      var a = 0;\n      var dict = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n\n      for (i = 0; i < str.length; i++) {\n        var ch = str.charCodeAt(i);\n        bytes[j++] = ch < 127 ? ch & 0xFF : 127;\n      }\n\n      var chunk_len = Math.ceil(bytes.length / 32);\n      for (i = 0; i < bytes.length; i++) {\n        j += bytes[i];\n        k++;\n        if (k == chunk_len || i == bytes.length - 1) {\n          a = Math.floor(j / k);\n          if (a < 32) hash += '0';else if (a > 126) hash += 'z';else hash += dict[Math.floor((a - 32) / 2.76)];\n          j = k = 0;\n        }\n      }\n      return hash;\n    }\n\n    Factory.hash = strhash;\n\n    // Given a csv file (in string form)\n    // returns an array of objects\n    Factory.CSVToJSON = function (csv) {\n      var rows = csv.split(\"\\n\");\n\n      var header = rows[0];\n      var header_fields = header.split(\",\");\n\n      var objects = [];\n\n      for (var i = 1; i < rows.length; i++) {\n        var o = {};\n        var row_fields = rows[i].split(\",\");\n\n        for (var k = 0; k < header_fields.length; k++) {\n          if (row_fields[k] !== \"\") {\n            o[header_fields[k]] = row_fields[k];\n\n            if (\"true\" === o[header_fields[k]] || \"false\" === o[header_fields[k]]) o[header_fields[k]] = Boolean(o[header_fields[k]]);else if (!isNaN(o[header_fields[k]])) {\n              // Keeping the else-if otherwise\n              // test will fail converting a boolean to number\n              o[header_fields[k]] = Number(o[header_fields[k]]);\n            }\n          }\n        }\n\n        objects.push(o);\n      }\n\n      return objects;\n    };\n\n    Factory.JSONToCSV = function (json) {\n      if (!Array.isArray(json)) json = [json];\n\n      var fields = [];\n\n      json.forEach(function (row) {\n        for (var k in row) {\n          if (fields.indexOf(k) < 0) fields.push(k);\n        }\n      });\n\n      var firstRow = fields.join(',');\n\n      var buf = firstRow + \"\\n\";\n\n      json.forEach(function (row) {\n        fields.forEach(function (field) {\n          if (row.hasOwnProperty(field) && row[field] !== null) buf += row[field] + \",\";else buf += \",\";\n        });\n        buf += \"\\n\";\n      });\n\n      // lets remove the last newline\n      buf = buf.replace(/\\n$/, \"\");\n\n      return buf;\n    };\n\n    return Factory;\n  }\n})();"
    },
    {
      "id": 137,
      "identifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[\"es2015\"]}!S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src\\factories\\validation.service.js",
      "name": "./public/modules/data_dashboard/src/factories/validation.service.js",
      "index": 137,
      "index2": 135,
      "size": 2756,
      "cacheable": true,
      "built": true,
      "optional": true,
      "prefetched": false,
      "chunks": [
        0
      ],
      "assets": [],
      "issuer": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
      "failed": false,
      "errors": 0,
      "warnings": 0,
      "reasons": [
        {
          "moduleId": 1,
          "moduleIdentifier": "S:\\wamp\\www\\marketcloud-all-in-one\\marketcloud-website\\public\\modules\\data_dashboard\\src /\\.js/",
          "module": "./public/modules/data_dashboard/src \\.js",
          "moduleName": "./public/modules/data_dashboard/src \\.js",
          "type": "context element",
          "userRequest": "./factories/validation.service.js"
        }
      ],
      "source": "'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('DataDashboard').factory('$validation', ValidationService);\n\n  /*\r\n   *   AngularJS Service that handles the pagination object\r\n   *   \r\n   */\n  function ValidationService() {\n\n    // Container object we will return\n    var Service = {};\n\n    Service.showErrorMessage = function (validation, schema, selector) {\n\n      Service.hideErrors();\n\n      selector = selector || '[ng-model=\"' + validation.invalidPropertyName + '\"]';\n\n      if (0 === angular.element(selector).length) {\n        console.log(\"COuld now match selector \" + selector + \" to show error message, exiting\");\n        return;\n      }\n\n      var element = angular.element(selector);\n\n      var errorMessage = Service.getErrorMessage(validation, schema);\n\n      var parent = element.parent();\n\n      if (parent.hasClass('input-group')) parent = parent.parent();\n\n      parent.append('<div class=\"error-message\">' + errorMessage + '</div>');\n      parent.addClass(\"has-error\");\n\n      $('html, body').animate({\n        scrollTop: element.offset().top - 200\n      }, 500);\n    };\n\n    Service.getErrorMessage = function (validation, schema) {\n\n      switch (validation.failedValidator) {\n        case \"required\":\n          return \"This field is required\";\n\n        case \"type\":\n          return \"This field must be a \" + schema[validation.invalidPropertyName].type;\n\n        case \"min\":\n          if (\"number\" === schema[validation.invalidPropertyName].type) return \"Minimum value is \" + schema[validation.invalidPropertyName].min;else if (\"string\" === schema[validation.invalidPropertyName].type) return \"Minimum length is \" + schema[validation.invalidPropertyName].min;else if (\"array\" === schema[validation.invalidPropertyName].type) return \"Minimum number of elements is is \" + schema[validation.invalidPropertyName].min;else return \"Minimum is \" + schema[validation.invalidPropertyName].min;\n\n        case \"max\":\n          if (\"number\" === schema[validation.invalidPropertyName].type) return \"Maxiumum value is \" + schema[validation.invalidPropertyName].max;else if (\"string\" === schema[validation.invalidPropertyName].type) return \"Maxiumum length is \" + schema[validation.invalidPropertyName].max;else if (\"array\" === schema[validation.invalidPropertyName].type) return \"Maxiumum number of elements is is \" + schema[validation.invalidPropertyName].max;else return \"Maxiumum is \" + schema[validation.invalidPropertyName].max;\n          break;\n\n        default:\n          return \"This field is invalid\";\n          break;\n      }\n    };\n\n    Service.hideErrors = function () {\n      angular.element('.error-message').remove();\n      angular.element('.has-error').removeClass('has-error');\n    };\n\n    return Service;\n  }\n})();"
    }
  ],
  "filteredModules": 0,
  "children": []
}